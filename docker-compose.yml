services:
  kong:
    image: kong/kong-gateway:3.10.0.2
    depends_on:
      - auth-service
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_LOG_LEVEL: error
    networks:
      - infrastructure-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./db/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - infrastructure-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U infrastructure_user -d infrastructure_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - ./services/auth/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infrastructure-network

  profiles-service:
    build:
      context: .
      dockerfile: services/profiles/Dockerfile
    container_name: profiles-service
    restart: unless-stopped
    env_file:
      - ./services/profiles/.env
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
    networks:
      - infrastructure-network
  
  text-service:
    build:
      context: .
      dockerfile: services/text/Dockerfile
    container_name: text-service
    restart: unless-stopped
    env_file:
      - ./services/text/.env
    depends_on:
      postgres:
        condition: service_healthy
      profiles-service:
    networks:
      - infrastructure-network

  video-learning-service:
    build:
      context: .
      dockerfile: services/video-learning/Dockerfile
    container_name: video-learning-service
    restart: unless-stopped
    env_file:
      - ./services/video-learning/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infrastructure-network

  frontend-service:
    build:
      context: .
      dockerfile: services/frontend/Dockerfile
    container_name: frontend-service
    restart: unless-stopped
    env_file:
      - ./services/frontend/.env
    ports:
      - "3000:3000"
    networks:
      - infrastructure-network

volumes:
  postgres_data:

networks:
  infrastructure-network:
    driver: bridge
