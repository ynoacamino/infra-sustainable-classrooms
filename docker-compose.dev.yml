services:
  kong:
    image: kong/kong-gateway:3.10.0.2
    depends_on:
      - auth-service
    volumes:
      - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_LOG_LEVEL: error
    networks:
      - infrastructure-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./db/.env.dev
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - infrastructure-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U infrastructure_user -d infrastructure_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    env_file:
      - ./minio/.env.dev
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - infrastructure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - ./minio/.env.dev
    networks:
      - infrastructure-network
    volumes:
      - ./minio/init_buckets.sh:/init_buckets.sh:ro
    entrypoint: sh /init_buckets.sh

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - infrastructure-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile.dev
    container_name: auth-service
    restart: unless-stopped
    env_file:
      - ./services/auth/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infrastructure-network

  video_learning-service:
    build:
      context: .
      dockerfile: services/video_learning/Dockerfile.dev
    container_name: video_learning-service
    restart: unless-stopped
    env_file:
      - ./services/video_learning/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infrastructure-network

  profiles-service:
    build:
      context: .
      dockerfile: services/profiles/Dockerfile.dev
    container_name: profiles-service
    restart: unless-stopped
    env_file:
      - ./services/profiles/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - infrastructure-network

  mailing-service:
    build:
      context: .
      dockerfile: services/mailing/Dockerfile.dev
    container_name: mailing-service
    restart: unless-stopped
    env_file:
      - ./services/mailing/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - infrastructure-network

  text-service:
    build:
      context: .
      dockerfile: services/text/Dockerfile.dev
    container_name: text-service
    restart: unless-stopped
    env_file:
      - ./services/text/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      profiles-service:
        condition: service_started
    networks:
      - infrastructure-network

  knowledge-service:
    build:
      context: .
      dockerfile: services/knowledge/Dockerfile.dev
    container_name: knowledge-service
    restart: unless-stopped
    env_file:
      - ./services/knowledge/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      profiles-service:
        condition: service_started
    networks:
      - infrastructure-network
    
  codelab-service:
    build:
      context: .
      dockerfile: services/codelab/Dockerfile.dev
    container_name: codelab-service
    restart: unless-stopped
    env_file:
      - ./services/codelab/.env.dev
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
      profiles-service:
        condition: service_started
    networks:
      - infrastructure-network

volumes:
  postgres_data:
  minio_data:

networks:
  infrastructure-network:
    driver: bridge
