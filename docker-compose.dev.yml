services:
  postgres:
    image: postgres:16-alpine
    container_name: infrastructure_postgres
    restart: unless-stopped
    env_file:
      - ./db/.env.dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - infrastructure-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U infrastructure_user -d infrastructure_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile.dev
    container_name: infrastructure_auth
    restart: unless-stopped
    env_file:
      - ./services/auth/.env.dev
    ports:
      - "8080:8080"
      - "8090:8090"
    volumes:
      - ./services:/app/services
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infrastructure-network

  # frontend-service:
  #   build:
  #     context: .
  #     dockerfile: services/frontend/Dockerfile.dev
  #   container_name: infrastructure_frontend
  #   restart: unless-stopped
  #   env_file:
  #     - ./services/frontend/.env.dev
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - frontend_node_modules:/app/node_modules
  #     - ./services/frontend:/app
  #   networks:
  #     - infrastructure-network

volumes:
  postgres_data:
  frontend_node_modules:

networks:
  infrastructure-network:
    driver: bridge
