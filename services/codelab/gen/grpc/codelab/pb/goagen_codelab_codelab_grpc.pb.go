// Code generated with goa v3.21.1, DO NOT EDIT.
//
// codelab protocol buffer definition
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: goagen_codelab_codelab.proto

package codelabpb

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

// CodelabClient is the client API for Codelab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Codelab microservice for coding exercises, tests, answers and attempts
type CodelabClient interface {
}

type codelabClient struct {
	cc grpc.ClientConnInterface
}

func NewCodelabClient(cc grpc.ClientConnInterface) CodelabClient {
	return &codelabClient{cc}
}

// CodelabServer is the server API for Codelab service.
// All implementations must embed UnimplementedCodelabServer
// for forward compatibility.
//
// Codelab microservice for coding exercises, tests, answers and attempts
type CodelabServer interface {
	mustEmbedUnimplementedCodelabServer()
}

// UnimplementedCodelabServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodelabServer struct{}

func (UnimplementedCodelabServer) mustEmbedUnimplementedCodelabServer() {}
func (UnimplementedCodelabServer) testEmbeddedByValue()                 {}

// UnsafeCodelabServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodelabServer will
// result in compilation errors.
type UnsafeCodelabServer interface {
	mustEmbedUnimplementedCodelabServer()
}

func RegisterCodelabServer(s grpc.ServiceRegistrar, srv CodelabServer) {
	// If the following call pancis, it indicates UnimplementedCodelabServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Codelab_ServiceDesc, srv)
}

// Codelab_ServiceDesc is the grpc.ServiceDesc for Codelab service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Codelab_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codelab.Codelab",
	HandlerType: (*CodelabServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "goagen_codelab_codelab.proto",
}
