// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package codelab

import (
	"context"
)

// Codelab microservice for coding exercises, tests, answers and attempts
type Service interface {
	// Create a new coding exercise (professors only)
	CreateExercise(context.Context, *CreateExercisePayload) (res *SimpleResponse, err error)
	// Get exercise by ID with solution (professors only)
	GetExercise(context.Context, *GetExercisePayload) (res *Exercise, err error)
	// List all exercises with solutions (professors only)
	ListExercises(context.Context, *ListExercisesPayload) (res []*Exercise, err error)
	// Update an exercise (professors only)
	UpdateExercise(context.Context, *UpdateExercisePayload2) (res *SimpleResponse, err error)
	// Delete an exercise (professors only)
	DeleteExercise(context.Context, *DeleteExercisePayload) (res *SimpleResponse, err error)
	// Create a new test case for an exercise (professors only)
	CreateTest(context.Context, *CreateTestPayload) (res *SimpleResponse, err error)
	// Get all test cases for an exercise (professors only)
	GetTestsByExercise(context.Context, *GetTestsByExercisePayload) (res []*Test, err error)
	// Update a test case (professors only)
	UpdateTest(context.Context, *UpdateTestPayload2) (res *SimpleResponse, err error)
	// Delete a test case (professors only)
	DeleteTest(context.Context, *DeleteTestPayload) (res *SimpleResponse, err error)
	// Get exercise by ID without solution (students)
	GetExerciseForStudent(context.Context, *GetExerciseForStudentPayload) (res *ExerciseForStudents, err error)
	// List all exercises without solutions (students)
	ListExercisesForStudents(context.Context, *ListExercisesForStudentsPayload) (res []*ExerciseForStudentsListView, err error)
	// Submit a code attempt for an exercise (students)
	CreateAttempt(context.Context, *CreateAttemptPayload) (res *SimpleResponse, err error)
	// Get user's attempts for a specific exercise (students)
	GetAttemptsByUserAndExercise(context.Context, *GetAttemptsByUserAndExercisePayload) (res []*Attempt, err error)
	// Get user's answer for a specific exercise
	GetAnswerByUserAndExercise(context.Context, *GetAnswerByUserAndExercisePayload) (res *Answer, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "codelab"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "codelab"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [14]string{"CreateExercise", "GetExercise", "ListExercises", "UpdateExercise", "DeleteExercise", "CreateTest", "GetTestsByExercise", "UpdateTest", "DeleteTest", "GetExerciseForStudent", "ListExercisesForStudents", "CreateAttempt", "GetAttemptsByUserAndExercise", "GetAnswerByUserAndExercise"}

// Answer is the result type of the codelab service GetAnswerByUserAndExercise
// method.
type Answer struct {
	// Answer ID
	ID int64
	// Associated exercise ID
	ExerciseID int64
	// Student user ID
	UserID int64
	// Whether the exercise is completed
	Completed bool
	// Creation timestamp
	CreatedAt int64
	// Last update timestamp
	UpdatedAt int64
}

// A code submission attempt for an answer
type Attempt struct {
	// Attempt ID
	ID int64
	// Associated answer ID
	AnswerID int64
	// Submitted code
	Code string
	// Whether the attempt was successful
	Success bool
	// Creation timestamp
	CreatedAt int64
}

// CreateAttemptPayload is the payload type of the codelab service
// CreateAttempt method.
type CreateAttemptPayload struct {
	// Associated exercise ID
	ExerciseID int64
	// Submitted code
	Code string
	// Whether the attempt was successful
	Success bool
	// Authentication session token
	SessionToken string
}

// CreateExercisePayload is the payload type of the codelab service
// CreateExercise method.
type CreateExercisePayload struct {
	// Exercise title
	Title string
	// Exercise description
	Description string
	// Initial code template
	InitialCode string
	// Exercise solution
	Solution string
	// Exercise difficulty level
	Difficulty string
	// ID of user creating the exercise
	CreatedBy int64
	// Authentication session token
	SessionToken string
}

// CreateTestPayload is the payload type of the codelab service CreateTest
// method.
type CreateTestPayload struct {
	// Test input
	Input string
	// Expected output
	Output string
	// Whether test is visible to students
	Public bool
	// Associated exercise ID
	ExerciseID int64
	// Authentication session token
	SessionToken string
}

// DeleteExercisePayload is the payload type of the codelab service
// DeleteExercise method.
type DeleteExercisePayload struct {
	// Exercise ID
	ID int64
	// Authentication session token
	SessionToken string
}

// DeleteTestPayload is the payload type of the codelab service DeleteTest
// method.
type DeleteTestPayload struct {
	// Test ID
	ID int64
	// Authentication session token
	SessionToken string
}

// Exercise is the result type of the codelab service GetExercise method.
type Exercise struct {
	// Exercise ID
	ID int64
	// Exercise title
	Title string
	// Exercise description
	Description string
	// Initial code template
	InitialCode string
	// Exercise solution
	Solution string
	// Exercise difficulty level
	Difficulty string
	// ID of user who created the exercise
	CreatedBy int64
	// Creation timestamp in miliseconds
	CreatedAt int64
	// Last update timestamp
	UpdatedAt int64
}

// ExerciseForStudents is the result type of the codelab service
// GetExerciseForStudent method.
type ExerciseForStudents struct {
	// Exercise ID
	ID int64
	// Exercise title
	Title string
	// Exercise description
	Description string
	// Initial code template
	InitialCode string
	// Exercise difficulty level
	Difficulty string
	// List of public tests for the exercise
	Tests []*Test
	// List of attempts made by students for this exercise
	Attempts []*Attempt
	// Student's answer/participation in the exercise
	Answer *Answer
	// ID of user who created the exercise
	CreatedBy int64
	// Creation timestamp
	CreatedAt int64
	// Last update timestamp
	UpdatedAt int64
}

// View for listing exercises available to students
type ExerciseForStudentsListView struct {
	// Exercise ID
	ID int64
	// Exercise title
	Title string
	// Exercise description
	Description string
	// Exercise difficulty level
	Difficulty string
	// Whether the exercise is completed by the student
	Completed *bool
	// ID of user who created the exercise
	CreatedBy int64
	// Creation timestamp
	CreatedAt int64
	// Last update timestamp
	UpdatedAt int64
}

// GetAnswerByUserAndExercisePayload is the payload type of the codelab service
// GetAnswerByUserAndExercise method.
type GetAnswerByUserAndExercisePayload struct {
	// User ID
	UserID int64
	// Exercise ID
	ExerciseID int64
	// Authentication session token
	SessionToken string
}

// GetAttemptsByUserAndExercisePayload is the payload type of the codelab
// service GetAttemptsByUserAndExercise method.
type GetAttemptsByUserAndExercisePayload struct {
	// User ID
	UserID int64
	// Exercise ID
	ExerciseID int64
	// Authentication session token
	SessionToken string
}

// GetExerciseForStudentPayload is the payload type of the codelab service
// GetExerciseForStudent method.
type GetExerciseForStudentPayload struct {
	// Exercise ID
	ID int64
	// Authentication session token
	SessionToken string
}

// GetExercisePayload is the payload type of the codelab service GetExercise
// method.
type GetExercisePayload struct {
	// Exercise ID
	ID int64
	// Authentication session token
	SessionToken string
}

// GetTestsByExercisePayload is the payload type of the codelab service
// GetTestsByExercise method.
type GetTestsByExercisePayload struct {
	// Exercise ID
	ExerciseID int64
	// Authentication session token
	SessionToken string
}

// ListExercisesForStudentsPayload is the payload type of the codelab service
// ListExercisesForStudents method.
type ListExercisesForStudentsPayload struct {
	// Authentication session token
	SessionToken string
}

// ListExercisesPayload is the payload type of the codelab service
// ListExercises method.
type ListExercisesPayload struct {
	// Authentication session token
	SessionToken string
}

// SimpleResponse is the result type of the codelab service CreateExercise
// method.
type SimpleResponse struct {
	// Operation success status
	Success bool
	// Response message
	Message string
}

// A test case with input and expected output
type Test struct {
	// Test ID
	ID int64
	// Test input
	Input string
	// Expected output
	Output string
	// Whether test is visible to students
	Public bool
	// Associated exercise ID
	ExerciseID int64
	// Creation timestamp
	CreatedAt int64
	// Last update timestamp
	UpdatedAt int64
}

// Payload for updating an exercise
type UpdateExercisePayload struct {
	// Exercise title
	Title string
	// Exercise description
	Description string
	// Initial code template
	InitialCode string
	// Exercise solution
	Solution string
	// Exercise difficulty level
	Difficulty string
}

// UpdateExercisePayload2 is the payload type of the codelab service
// UpdateExercise method.
type UpdateExercisePayload2 struct {
	// Exercise ID
	ID int64
	// Exercise data to update
	Exercise *UpdateExercisePayload
	// Authentication session token
	SessionToken string
}

// Payload for updating a test
type UpdateTestPayload struct {
	// Test input
	Input string
	// Expected output
	Output string
	// Whether test is visible to students
	Public bool
}

// UpdateTestPayload2 is the payload type of the codelab service UpdateTest
// method.
type UpdateTestPayload2 struct {
	// Test ID
	ID int64
	// Test data to update
	Test *UpdateTestPayload
	// Authentication session token
	SessionToken string
}

// Internal server error
type InternalError string

// Invalid input parameters
type InvalidInput string

// Resource not found
type NotFound string

// Permission denied (only teachers)
type PermissionDenied string

// Too many requests
type RateLimited string

// Service temporarily unavailable
type ServiceUnavailable string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input parameters"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Resource not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e PermissionDenied) Error() string {
	return "Permission denied (only teachers)"
}

// ErrorName returns "permission_denied".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e PermissionDenied) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "permission_denied".
func (e PermissionDenied) GoaErrorName() string {
	return "permission_denied"
}

// Error returns an error description.
func (e RateLimited) Error() string {
	return "Too many requests"
}

// ErrorName returns "rate_limited".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e RateLimited) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "rate_limited".
func (e RateLimited) GoaErrorName() string {
	return "rate_limited"
}

// Error returns an error description.
func (e ServiceUnavailable) Error() string {
	return "Service temporarily unavailable"
}

// ErrorName returns "service_unavailable".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ServiceUnavailable) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service_unavailable".
func (e ServiceUnavailable) GoaErrorName() string {
	return "service_unavailable"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
