// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab client
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package codelab

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "codelab" service client.
type Client struct {
	CreateExerciseEndpoint               goa.Endpoint
	GetExerciseEndpoint                  goa.Endpoint
	ListExercisesEndpoint                goa.Endpoint
	UpdateExerciseEndpoint               goa.Endpoint
	DeleteExerciseEndpoint               goa.Endpoint
	CreateTestEndpoint                   goa.Endpoint
	GetTestsByExerciseEndpoint           goa.Endpoint
	UpdateTestEndpoint                   goa.Endpoint
	DeleteTestEndpoint                   goa.Endpoint
	GetExerciseForStudentEndpoint        goa.Endpoint
	ListExercisesForStudentsEndpoint     goa.Endpoint
	CreateAttemptEndpoint                goa.Endpoint
	GetAttemptsByUserAndExerciseEndpoint goa.Endpoint
	GetAnswerByUserAndExerciseEndpoint   goa.Endpoint
}

// NewClient initializes a "codelab" service client given the endpoints.
func NewClient(createExercise, getExercise, listExercises, updateExercise, deleteExercise, createTest, getTestsByExercise, updateTest, deleteTest, getExerciseForStudent, listExercisesForStudents, createAttempt, getAttemptsByUserAndExercise, getAnswerByUserAndExercise goa.Endpoint) *Client {
	return &Client{
		CreateExerciseEndpoint:               createExercise,
		GetExerciseEndpoint:                  getExercise,
		ListExercisesEndpoint:                listExercises,
		UpdateExerciseEndpoint:               updateExercise,
		DeleteExerciseEndpoint:               deleteExercise,
		CreateTestEndpoint:                   createTest,
		GetTestsByExerciseEndpoint:           getTestsByExercise,
		UpdateTestEndpoint:                   updateTest,
		DeleteTestEndpoint:                   deleteTest,
		GetExerciseForStudentEndpoint:        getExerciseForStudent,
		ListExercisesForStudentsEndpoint:     listExercisesForStudents,
		CreateAttemptEndpoint:                createAttempt,
		GetAttemptsByUserAndExerciseEndpoint: getAttemptsByUserAndExercise,
		GetAnswerByUserAndExerciseEndpoint:   getAnswerByUserAndExercise,
	}
}

// CreateExercise calls the "CreateExercise" endpoint of the "codelab" service.
// CreateExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) CreateExercise(ctx context.Context, p *CreateExercisePayload) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.CreateExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// GetExercise calls the "GetExercise" endpoint of the "codelab" service.
// GetExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetExercise(ctx context.Context, p *GetExercisePayload) (res *Exercise, err error) {
	var ires any
	ires, err = c.GetExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Exercise), nil
}

// ListExercises calls the "ListExercises" endpoint of the "codelab" service.
// ListExercises may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) ListExercises(ctx context.Context, p *ListExercisesPayload) (res []*Exercise, err error) {
	var ires any
	ires, err = c.ListExercisesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Exercise), nil
}

// UpdateExercise calls the "UpdateExercise" endpoint of the "codelab" service.
// UpdateExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) UpdateExercise(ctx context.Context, p *UpdateExercisePayload2) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.UpdateExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// DeleteExercise calls the "DeleteExercise" endpoint of the "codelab" service.
// DeleteExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) DeleteExercise(ctx context.Context, p *DeleteExercisePayload) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.DeleteExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// CreateTest calls the "CreateTest" endpoint of the "codelab" service.
// CreateTest may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) CreateTest(ctx context.Context, p *CreateTestPayload) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.CreateTestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// GetTestsByExercise calls the "GetTestsByExercise" endpoint of the "codelab"
// service.
// GetTestsByExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetTestsByExercise(ctx context.Context, p *GetTestsByExercisePayload) (res []*Test, err error) {
	var ires any
	ires, err = c.GetTestsByExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Test), nil
}

// UpdateTest calls the "UpdateTest" endpoint of the "codelab" service.
// UpdateTest may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) UpdateTest(ctx context.Context, p *UpdateTestPayload2) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.UpdateTestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// DeleteTest calls the "DeleteTest" endpoint of the "codelab" service.
// DeleteTest may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) DeleteTest(ctx context.Context, p *DeleteTestPayload) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.DeleteTestEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// GetExerciseForStudent calls the "GetExerciseForStudent" endpoint of the
// "codelab" service.
// GetExerciseForStudent may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetExerciseForStudent(ctx context.Context, p *GetExerciseForStudentPayload) (res *ExerciseForStudents, err error) {
	var ires any
	ires, err = c.GetExerciseForStudentEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ExerciseForStudents), nil
}

// ListExercisesForStudents calls the "ListExercisesForStudents" endpoint of
// the "codelab" service.
// ListExercisesForStudents may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) ListExercisesForStudents(ctx context.Context, p *ListExercisesForStudentsPayload) (res []*ExerciseForStudentsListView, err error) {
	var ires any
	ires, err = c.ListExercisesForStudentsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*ExerciseForStudentsListView), nil
}

// CreateAttempt calls the "CreateAttempt" endpoint of the "codelab" service.
// CreateAttempt may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) CreateAttempt(ctx context.Context, p *CreateAttemptPayload) (res *SimpleResponse, err error) {
	var ires any
	ires, err = c.CreateAttemptEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SimpleResponse), nil
}

// GetAttemptsByUserAndExercise calls the "GetAttemptsByUserAndExercise"
// endpoint of the "codelab" service.
// GetAttemptsByUserAndExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetAttemptsByUserAndExercise(ctx context.Context, p *GetAttemptsByUserAndExercisePayload) (res []*Attempt, err error) {
	var ires any
	ires, err = c.GetAttemptsByUserAndExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Attempt), nil
}

// GetAnswerByUserAndExercise calls the "GetAnswerByUserAndExercise" endpoint
// of the "codelab" service.
// GetAnswerByUserAndExercise may return the following errors:
//   - "invalid_input" (type InvalidInput)
//   - "rate_limited" (type RateLimited)
//   - "service_unavailable" (type ServiceUnavailable)
//   - "unauthorized" (type Unauthorized)
//   - "permission_denied" (type PermissionDenied)
//   - "not_found" (type NotFound)
//   - "internal_error" (type InternalError)
//   - error: internal error
func (c *Client) GetAnswerByUserAndExercise(ctx context.Context, p *GetAnswerByUserAndExercisePayload) (res *Answer, err error) {
	var ires any
	ires, err = c.GetAnswerByUserAndExerciseEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Answer), nil
}
