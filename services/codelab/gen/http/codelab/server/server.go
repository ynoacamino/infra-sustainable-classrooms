// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab HTTP server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package server

import (
	"context"
	"net/http"

	codelab "github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/gen/codelab"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the codelab service endpoint HTTP handlers.
type Server struct {
	Mounts                       []*MountPoint
	CreateExercise               http.Handler
	GetExercise                  http.Handler
	ListExercises                http.Handler
	UpdateExercise               http.Handler
	DeleteExercise               http.Handler
	CreateTest                   http.Handler
	GetTestsByExercise           http.Handler
	UpdateTest                   http.Handler
	DeleteTest                   http.Handler
	GetExerciseForStudent        http.Handler
	ListExercisesForStudents     http.Handler
	CreateAttempt                http.Handler
	GetAttemptsByUserAndExercise http.Handler
	GetAnswerByUserAndExercise   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the codelab service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *codelab.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateExercise", "POST", "/api/codelab/exercises"},
			{"GetExercise", "GET", "/api/codelab/exercises/{id}"},
			{"ListExercises", "GET", "/api/codelab/exercises"},
			{"UpdateExercise", "PUT", "/api/codelab/exercises/{id}"},
			{"DeleteExercise", "DELETE", "/api/codelab/exercises/{id}"},
			{"CreateTest", "POST", "/api/codelab/tests"},
			{"GetTestsByExercise", "GET", "/api/codelab/exercises/{exercise_id}/tests"},
			{"UpdateTest", "PUT", "/api/codelab/tests/{id}"},
			{"DeleteTest", "DELETE", "/api/codelab/tests/{id}"},
			{"GetExerciseForStudent", "GET", "/api/codelab/student/exercises/{id}"},
			{"ListExercisesForStudents", "GET", "/api/codelab/student/exercises"},
			{"CreateAttempt", "POST", "/api/codelab/attempts"},
			{"GetAttemptsByUserAndExercise", "GET", "/api/codelab/student/users/{user_id}/exercises/{exercise_id}/attempts"},
			{"GetAnswerByUserAndExercise", "GET", "/api/codelab/answers/user/{user_id}/exercise/{exercise_id}"},
		},
		CreateExercise:               NewCreateExerciseHandler(e.CreateExercise, mux, decoder, encoder, errhandler, formatter),
		GetExercise:                  NewGetExerciseHandler(e.GetExercise, mux, decoder, encoder, errhandler, formatter),
		ListExercises:                NewListExercisesHandler(e.ListExercises, mux, decoder, encoder, errhandler, formatter),
		UpdateExercise:               NewUpdateExerciseHandler(e.UpdateExercise, mux, decoder, encoder, errhandler, formatter),
		DeleteExercise:               NewDeleteExerciseHandler(e.DeleteExercise, mux, decoder, encoder, errhandler, formatter),
		CreateTest:                   NewCreateTestHandler(e.CreateTest, mux, decoder, encoder, errhandler, formatter),
		GetTestsByExercise:           NewGetTestsByExerciseHandler(e.GetTestsByExercise, mux, decoder, encoder, errhandler, formatter),
		UpdateTest:                   NewUpdateTestHandler(e.UpdateTest, mux, decoder, encoder, errhandler, formatter),
		DeleteTest:                   NewDeleteTestHandler(e.DeleteTest, mux, decoder, encoder, errhandler, formatter),
		GetExerciseForStudent:        NewGetExerciseForStudentHandler(e.GetExerciseForStudent, mux, decoder, encoder, errhandler, formatter),
		ListExercisesForStudents:     NewListExercisesForStudentsHandler(e.ListExercisesForStudents, mux, decoder, encoder, errhandler, formatter),
		CreateAttempt:                NewCreateAttemptHandler(e.CreateAttempt, mux, decoder, encoder, errhandler, formatter),
		GetAttemptsByUserAndExercise: NewGetAttemptsByUserAndExerciseHandler(e.GetAttemptsByUserAndExercise, mux, decoder, encoder, errhandler, formatter),
		GetAnswerByUserAndExercise:   NewGetAnswerByUserAndExerciseHandler(e.GetAnswerByUserAndExercise, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "codelab" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateExercise = m(s.CreateExercise)
	s.GetExercise = m(s.GetExercise)
	s.ListExercises = m(s.ListExercises)
	s.UpdateExercise = m(s.UpdateExercise)
	s.DeleteExercise = m(s.DeleteExercise)
	s.CreateTest = m(s.CreateTest)
	s.GetTestsByExercise = m(s.GetTestsByExercise)
	s.UpdateTest = m(s.UpdateTest)
	s.DeleteTest = m(s.DeleteTest)
	s.GetExerciseForStudent = m(s.GetExerciseForStudent)
	s.ListExercisesForStudents = m(s.ListExercisesForStudents)
	s.CreateAttempt = m(s.CreateAttempt)
	s.GetAttemptsByUserAndExercise = m(s.GetAttemptsByUserAndExercise)
	s.GetAnswerByUserAndExercise = m(s.GetAnswerByUserAndExercise)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return codelab.MethodNames[:] }

// Mount configures the mux to serve the codelab endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateExerciseHandler(mux, h.CreateExercise)
	MountGetExerciseHandler(mux, h.GetExercise)
	MountListExercisesHandler(mux, h.ListExercises)
	MountUpdateExerciseHandler(mux, h.UpdateExercise)
	MountDeleteExerciseHandler(mux, h.DeleteExercise)
	MountCreateTestHandler(mux, h.CreateTest)
	MountGetTestsByExerciseHandler(mux, h.GetTestsByExercise)
	MountUpdateTestHandler(mux, h.UpdateTest)
	MountDeleteTestHandler(mux, h.DeleteTest)
	MountGetExerciseForStudentHandler(mux, h.GetExerciseForStudent)
	MountListExercisesForStudentsHandler(mux, h.ListExercisesForStudents)
	MountCreateAttemptHandler(mux, h.CreateAttempt)
	MountGetAttemptsByUserAndExerciseHandler(mux, h.GetAttemptsByUserAndExercise)
	MountGetAnswerByUserAndExerciseHandler(mux, h.GetAnswerByUserAndExercise)
}

// Mount configures the mux to serve the codelab endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateExerciseHandler configures the mux to serve the "codelab" service
// "CreateExercise" endpoint.
func MountCreateExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/codelab/exercises", f)
}

// NewCreateExerciseHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "CreateExercise" endpoint.
func NewCreateExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateExerciseRequest(mux, decoder)
		encodeResponse = EncodeCreateExerciseResponse(encoder)
		encodeError    = EncodeCreateExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetExerciseHandler configures the mux to serve the "codelab" service
// "GetExercise" endpoint.
func MountGetExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/exercises/{id}", f)
}

// NewGetExerciseHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "GetExercise" endpoint.
func NewGetExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetExerciseRequest(mux, decoder)
		encodeResponse = EncodeGetExerciseResponse(encoder)
		encodeError    = EncodeGetExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListExercisesHandler configures the mux to serve the "codelab" service
// "ListExercises" endpoint.
func MountListExercisesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/exercises", f)
}

// NewListExercisesHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "ListExercises" endpoint.
func NewListExercisesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListExercisesRequest(mux, decoder)
		encodeResponse = EncodeListExercisesResponse(encoder)
		encodeError    = EncodeListExercisesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ListExercises")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateExerciseHandler configures the mux to serve the "codelab" service
// "UpdateExercise" endpoint.
func MountUpdateExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/codelab/exercises/{id}", f)
}

// NewUpdateExerciseHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "UpdateExercise" endpoint.
func NewUpdateExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateExerciseRequest(mux, decoder)
		encodeResponse = EncodeUpdateExerciseResponse(encoder)
		encodeError    = EncodeUpdateExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteExerciseHandler configures the mux to serve the "codelab" service
// "DeleteExercise" endpoint.
func MountDeleteExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/codelab/exercises/{id}", f)
}

// NewDeleteExerciseHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "DeleteExercise" endpoint.
func NewDeleteExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteExerciseRequest(mux, decoder)
		encodeResponse = EncodeDeleteExerciseResponse(encoder)
		encodeError    = EncodeDeleteExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateTestHandler configures the mux to serve the "codelab" service
// "CreateTest" endpoint.
func MountCreateTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/codelab/tests", f)
}

// NewCreateTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "codelab" service "CreateTest" endpoint.
func NewCreateTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTestRequest(mux, decoder)
		encodeResponse = EncodeCreateTestResponse(encoder)
		encodeError    = EncodeCreateTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTestsByExerciseHandler configures the mux to serve the "codelab"
// service "GetTestsByExercise" endpoint.
func MountGetTestsByExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/exercises/{exercise_id}/tests", f)
}

// NewGetTestsByExerciseHandler creates a HTTP handler which loads the HTTP
// request and calls the "codelab" service "GetTestsByExercise" endpoint.
func NewGetTestsByExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTestsByExerciseRequest(mux, decoder)
		encodeResponse = EncodeGetTestsByExerciseResponse(encoder)
		encodeError    = EncodeGetTestsByExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTestsByExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateTestHandler configures the mux to serve the "codelab" service
// "UpdateTest" endpoint.
func MountUpdateTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/codelab/tests/{id}", f)
}

// NewUpdateTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "codelab" service "UpdateTest" endpoint.
func NewUpdateTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTestRequest(mux, decoder)
		encodeResponse = EncodeUpdateTestResponse(encoder)
		encodeError    = EncodeUpdateTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTestHandler configures the mux to serve the "codelab" service
// "DeleteTest" endpoint.
func MountDeleteTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/codelab/tests/{id}", f)
}

// NewDeleteTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "codelab" service "DeleteTest" endpoint.
func NewDeleteTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTestRequest(mux, decoder)
		encodeResponse = EncodeDeleteTestResponse(encoder)
		encodeError    = EncodeDeleteTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetExerciseForStudentHandler configures the mux to serve the "codelab"
// service "GetExerciseForStudent" endpoint.
func MountGetExerciseForStudentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/student/exercises/{id}", f)
}

// NewGetExerciseForStudentHandler creates a HTTP handler which loads the HTTP
// request and calls the "codelab" service "GetExerciseForStudent" endpoint.
func NewGetExerciseForStudentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetExerciseForStudentRequest(mux, decoder)
		encodeResponse = EncodeGetExerciseForStudentResponse(encoder)
		encodeError    = EncodeGetExerciseForStudentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetExerciseForStudent")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListExercisesForStudentsHandler configures the mux to serve the
// "codelab" service "ListExercisesForStudents" endpoint.
func MountListExercisesForStudentsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/student/exercises", f)
}

// NewListExercisesForStudentsHandler creates a HTTP handler which loads the
// HTTP request and calls the "codelab" service "ListExercisesForStudents"
// endpoint.
func NewListExercisesForStudentsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListExercisesForStudentsRequest(mux, decoder)
		encodeResponse = EncodeListExercisesForStudentsResponse(encoder)
		encodeError    = EncodeListExercisesForStudentsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ListExercisesForStudents")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateAttemptHandler configures the mux to serve the "codelab" service
// "CreateAttempt" endpoint.
func MountCreateAttemptHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/codelab/attempts", f)
}

// NewCreateAttemptHandler creates a HTTP handler which loads the HTTP request
// and calls the "codelab" service "CreateAttempt" endpoint.
func NewCreateAttemptHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateAttemptRequest(mux, decoder)
		encodeResponse = EncodeCreateAttemptResponse(encoder)
		encodeError    = EncodeCreateAttemptError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateAttempt")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAttemptsByUserAndExerciseHandler configures the mux to serve the
// "codelab" service "GetAttemptsByUserAndExercise" endpoint.
func MountGetAttemptsByUserAndExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/student/users/{user_id}/exercises/{exercise_id}/attempts", f)
}

// NewGetAttemptsByUserAndExerciseHandler creates a HTTP handler which loads
// the HTTP request and calls the "codelab" service
// "GetAttemptsByUserAndExercise" endpoint.
func NewGetAttemptsByUserAndExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAttemptsByUserAndExerciseRequest(mux, decoder)
		encodeResponse = EncodeGetAttemptsByUserAndExerciseResponse(encoder)
		encodeError    = EncodeGetAttemptsByUserAndExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAttemptsByUserAndExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAnswerByUserAndExerciseHandler configures the mux to serve the
// "codelab" service "GetAnswerByUserAndExercise" endpoint.
func MountGetAnswerByUserAndExerciseHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/codelab/answers/user/{user_id}/exercise/{exercise_id}", f)
}

// NewGetAnswerByUserAndExerciseHandler creates a HTTP handler which loads the
// HTTP request and calls the "codelab" service "GetAnswerByUserAndExercise"
// endpoint.
func NewGetAnswerByUserAndExerciseHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAnswerByUserAndExerciseRequest(mux, decoder)
		encodeResponse = EncodeGetAnswerByUserAndExerciseResponse(encoder)
		encodeError    = EncodeGetAnswerByUserAndExerciseError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAnswerByUserAndExercise")
		ctx = context.WithValue(ctx, goa.ServiceKey, "codelab")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
