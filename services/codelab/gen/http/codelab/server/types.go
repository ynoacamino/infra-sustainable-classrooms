// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package server

import (
	"unicode/utf8"

	codelab "github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/gen/codelab"
	goa "goa.design/goa/v3/pkg"
)

// CreateExerciseRequestBody is the type of the "codelab" service
// "CreateExercise" endpoint HTTP request body.
type CreateExerciseRequestBody struct {
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Initial code template
	InitialCode *string `form:"initial_code,omitempty" json:"initial_code,omitempty" xml:"initial_code,omitempty"`
	// Exercise solution
	Solution *string `form:"solution,omitempty" json:"solution,omitempty" xml:"solution,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
	// ID of user creating the exercise
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
}

// UpdateExerciseRequestBody is the type of the "codelab" service
// "UpdateExercise" endpoint HTTP request body.
type UpdateExerciseRequestBody struct {
	// Exercise data to update
	Exercise *UpdateExercisePayloadRequestBody `form:"exercise,omitempty" json:"exercise,omitempty" xml:"exercise,omitempty"`
}

// CreateTestRequestBody is the type of the "codelab" service "CreateTest"
// endpoint HTTP request body.
type CreateTestRequestBody struct {
	// Test input
	Input *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
	// Expected output
	Output *string `form:"output,omitempty" json:"output,omitempty" xml:"output,omitempty"`
	// Whether test is visible to students
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
}

// UpdateTestRequestBody is the type of the "codelab" service "UpdateTest"
// endpoint HTTP request body.
type UpdateTestRequestBody struct {
	// Test data to update
	Test *UpdateTestPayloadRequestBody `form:"test,omitempty" json:"test,omitempty" xml:"test,omitempty"`
}

// CreateAttemptRequestBody is the type of the "codelab" service
// "CreateAttempt" endpoint HTTP request body.
type CreateAttemptRequestBody struct {
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
	// Submitted code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Whether the attempt was successful
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
}

// CreateExerciseResponseBody is the type of the "codelab" service
// "CreateExercise" endpoint HTTP response body.
type CreateExerciseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetExerciseResponseBody is the type of the "codelab" service "GetExercise"
// endpoint HTTP response body.
type GetExerciseResponseBody struct {
	// Exercise ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Initial code template
	InitialCode string `form:"initial_code" json:"initial_code" xml:"initial_code"`
	// Exercise solution
	Solution string `form:"solution" json:"solution" xml:"solution"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
	// ID of user who created the exercise
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
	// Creation timestamp in miliseconds
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListExercisesResponseBody is the type of the "codelab" service
// "ListExercises" endpoint HTTP response body.
type ListExercisesResponseBody []*ExerciseResponse

// UpdateExerciseResponseBody is the type of the "codelab" service
// "UpdateExercise" endpoint HTTP response body.
type UpdateExerciseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteExerciseResponseBody is the type of the "codelab" service
// "DeleteExercise" endpoint HTTP response body.
type DeleteExerciseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateTestResponseBody is the type of the "codelab" service "CreateTest"
// endpoint HTTP response body.
type CreateTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTestsByExerciseResponseBody is the type of the "codelab" service
// "GetTestsByExercise" endpoint HTTP response body.
type GetTestsByExerciseResponseBody []*TestResponse

// UpdateTestResponseBody is the type of the "codelab" service "UpdateTest"
// endpoint HTTP response body.
type UpdateTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteTestResponseBody is the type of the "codelab" service "DeleteTest"
// endpoint HTTP response body.
type DeleteTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetExerciseForStudentResponseBody is the type of the "codelab" service
// "GetExerciseForStudent" endpoint HTTP response body.
type GetExerciseForStudentResponseBody struct {
	// Exercise ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Initial code template
	InitialCode string `form:"initial_code" json:"initial_code" xml:"initial_code"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
	// List of public tests for the exercise
	Tests []*TestResponseBody `form:"tests" json:"tests" xml:"tests"`
	// List of attempts made by students for this exercise
	Attempts []*AttemptResponseBody `form:"attempts" json:"attempts" xml:"attempts"`
	// Student's answer/participation in the exercise
	Answer *AnswerResponseBody `form:"answer" json:"answer" xml:"answer"`
	// ID of user who created the exercise
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListExercisesForStudentsResponseBody is the type of the "codelab" service
// "ListExercisesForStudents" endpoint HTTP response body.
type ListExercisesForStudentsResponseBody []*ExerciseForStudentsListViewResponse

// CreateAttemptResponseBody is the type of the "codelab" service
// "CreateAttempt" endpoint HTTP response body.
type CreateAttemptResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetAttemptsByUserAndExerciseResponseBody is the type of the "codelab"
// service "GetAttemptsByUserAndExercise" endpoint HTTP response body.
type GetAttemptsByUserAndExerciseResponseBody []*AttemptResponse

// GetAnswerByUserAndExerciseResponseBody is the type of the "codelab" service
// "GetAnswerByUserAndExercise" endpoint HTTP response body.
type GetAnswerByUserAndExerciseResponseBody struct {
	// Answer ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
	// Student user ID
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// Whether the exercise is completed
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ExerciseResponse is used to define fields on response body types.
type ExerciseResponse struct {
	// Exercise ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Initial code template
	InitialCode string `form:"initial_code" json:"initial_code" xml:"initial_code"`
	// Exercise solution
	Solution string `form:"solution" json:"solution" xml:"solution"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
	// ID of user who created the exercise
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
	// Creation timestamp in miliseconds
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// TestResponse is used to define fields on response body types.
type TestResponse struct {
	// Test ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Test input
	Input string `form:"input" json:"input" xml:"input"`
	// Expected output
	Output string `form:"output" json:"output" xml:"output"`
	// Whether test is visible to students
	Public bool `form:"public" json:"public" xml:"public"`
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// TestResponseBody is used to define fields on response body types.
type TestResponseBody struct {
	// Test ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Test input
	Input string `form:"input" json:"input" xml:"input"`
	// Expected output
	Output string `form:"output" json:"output" xml:"output"`
	// Whether test is visible to students
	Public bool `form:"public" json:"public" xml:"public"`
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// AttemptResponseBody is used to define fields on response body types.
type AttemptResponseBody struct {
	// Attempt ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Associated answer ID
	AnswerID int64 `form:"answer_id" json:"answer_id" xml:"answer_id"`
	// Submitted code
	Code string `form:"code" json:"code" xml:"code"`
	// Whether the attempt was successful
	Success bool `form:"success" json:"success" xml:"success"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
}

// AnswerResponseBody is used to define fields on response body types.
type AnswerResponseBody struct {
	// Answer ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
	// Student user ID
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// Whether the exercise is completed
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ExerciseForStudentsListViewResponse is used to define fields on response
// body types.
type ExerciseForStudentsListViewResponse struct {
	// Exercise ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
	// Whether the exercise is completed by the student
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// ID of user who created the exercise
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// AttemptResponse is used to define fields on response body types.
type AttemptResponse struct {
	// Attempt ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Associated answer ID
	AnswerID int64 `form:"answer_id" json:"answer_id" xml:"answer_id"`
	// Submitted code
	Code string `form:"code" json:"code" xml:"code"`
	// Whether the attempt was successful
	Success bool `form:"success" json:"success" xml:"success"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
}

// UpdateExercisePayloadRequestBody is used to define fields on request body
// types.
type UpdateExercisePayloadRequestBody struct {
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Initial code template
	InitialCode *string `form:"initial_code,omitempty" json:"initial_code,omitempty" xml:"initial_code,omitempty"`
	// Exercise solution
	Solution *string `form:"solution,omitempty" json:"solution,omitempty" xml:"solution,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
}

// UpdateTestPayloadRequestBody is used to define fields on request body types.
type UpdateTestPayloadRequestBody struct {
	// Test input
	Input *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
	// Expected output
	Output *string `form:"output,omitempty" json:"output,omitempty" xml:"output,omitempty"`
	// Whether test is visible to students
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
}

// NewCreateExerciseResponseBody builds the HTTP response body from the result
// of the "CreateExercise" endpoint of the "codelab" service.
func NewCreateExerciseResponseBody(res *codelab.SimpleResponse) *CreateExerciseResponseBody {
	body := &CreateExerciseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetExerciseResponseBody builds the HTTP response body from the result of
// the "GetExercise" endpoint of the "codelab" service.
func NewGetExerciseResponseBody(res *codelab.Exercise) *GetExerciseResponseBody {
	body := &GetExerciseResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
		InitialCode: res.InitialCode,
		Solution:    res.Solution,
		Difficulty:  res.Difficulty,
		CreatedBy:   res.CreatedBy,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewListExercisesResponseBody builds the HTTP response body from the result
// of the "ListExercises" endpoint of the "codelab" service.
func NewListExercisesResponseBody(res []*codelab.Exercise) ListExercisesResponseBody {
	body := make([]*ExerciseResponse, len(res))
	for i, val := range res {
		body[i] = marshalCodelabExerciseToExerciseResponse(val)
	}
	return body
}

// NewUpdateExerciseResponseBody builds the HTTP response body from the result
// of the "UpdateExercise" endpoint of the "codelab" service.
func NewUpdateExerciseResponseBody(res *codelab.SimpleResponse) *UpdateExerciseResponseBody {
	body := &UpdateExerciseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteExerciseResponseBody builds the HTTP response body from the result
// of the "DeleteExercise" endpoint of the "codelab" service.
func NewDeleteExerciseResponseBody(res *codelab.SimpleResponse) *DeleteExerciseResponseBody {
	body := &DeleteExerciseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewCreateTestResponseBody builds the HTTP response body from the result of
// the "CreateTest" endpoint of the "codelab" service.
func NewCreateTestResponseBody(res *codelab.SimpleResponse) *CreateTestResponseBody {
	body := &CreateTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetTestsByExerciseResponseBody builds the HTTP response body from the
// result of the "GetTestsByExercise" endpoint of the "codelab" service.
func NewGetTestsByExerciseResponseBody(res []*codelab.Test) GetTestsByExerciseResponseBody {
	body := make([]*TestResponse, len(res))
	for i, val := range res {
		body[i] = marshalCodelabTestToTestResponse(val)
	}
	return body
}

// NewUpdateTestResponseBody builds the HTTP response body from the result of
// the "UpdateTest" endpoint of the "codelab" service.
func NewUpdateTestResponseBody(res *codelab.SimpleResponse) *UpdateTestResponseBody {
	body := &UpdateTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteTestResponseBody builds the HTTP response body from the result of
// the "DeleteTest" endpoint of the "codelab" service.
func NewDeleteTestResponseBody(res *codelab.SimpleResponse) *DeleteTestResponseBody {
	body := &DeleteTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetExerciseForStudentResponseBody builds the HTTP response body from the
// result of the "GetExerciseForStudent" endpoint of the "codelab" service.
func NewGetExerciseForStudentResponseBody(res *codelab.ExerciseForStudents) *GetExerciseForStudentResponseBody {
	body := &GetExerciseForStudentResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
		InitialCode: res.InitialCode,
		Difficulty:  res.Difficulty,
		CreatedBy:   res.CreatedBy,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	if res.Tests != nil {
		body.Tests = make([]*TestResponseBody, len(res.Tests))
		for i, val := range res.Tests {
			body.Tests[i] = marshalCodelabTestToTestResponseBody(val)
		}
	} else {
		body.Tests = []*TestResponseBody{}
	}
	if res.Attempts != nil {
		body.Attempts = make([]*AttemptResponseBody, len(res.Attempts))
		for i, val := range res.Attempts {
			body.Attempts[i] = marshalCodelabAttemptToAttemptResponseBody(val)
		}
	} else {
		body.Attempts = []*AttemptResponseBody{}
	}
	if res.Answer != nil {
		body.Answer = marshalCodelabAnswerToAnswerResponseBody(res.Answer)
	}
	return body
}

// NewListExercisesForStudentsResponseBody builds the HTTP response body from
// the result of the "ListExercisesForStudents" endpoint of the "codelab"
// service.
func NewListExercisesForStudentsResponseBody(res []*codelab.ExerciseForStudentsListView) ListExercisesForStudentsResponseBody {
	body := make([]*ExerciseForStudentsListViewResponse, len(res))
	for i, val := range res {
		body[i] = marshalCodelabExerciseForStudentsListViewToExerciseForStudentsListViewResponse(val)
	}
	return body
}

// NewCreateAttemptResponseBody builds the HTTP response body from the result
// of the "CreateAttempt" endpoint of the "codelab" service.
func NewCreateAttemptResponseBody(res *codelab.SimpleResponse) *CreateAttemptResponseBody {
	body := &CreateAttemptResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetAttemptsByUserAndExerciseResponseBody builds the HTTP response body
// from the result of the "GetAttemptsByUserAndExercise" endpoint of the
// "codelab" service.
func NewGetAttemptsByUserAndExerciseResponseBody(res []*codelab.Attempt) GetAttemptsByUserAndExerciseResponseBody {
	body := make([]*AttemptResponse, len(res))
	for i, val := range res {
		body[i] = marshalCodelabAttemptToAttemptResponse(val)
	}
	return body
}

// NewGetAnswerByUserAndExerciseResponseBody builds the HTTP response body from
// the result of the "GetAnswerByUserAndExercise" endpoint of the "codelab"
// service.
func NewGetAnswerByUserAndExerciseResponseBody(res *codelab.Answer) *GetAnswerByUserAndExerciseResponseBody {
	body := &GetAnswerByUserAndExerciseResponseBody{
		ID:         res.ID,
		ExerciseID: res.ExerciseID,
		UserID:     res.UserID,
		Completed:  res.Completed,
		CreatedAt:  res.CreatedAt,
		UpdatedAt:  res.UpdatedAt,
	}
	return body
}

// NewCreateExercisePayload builds a codelab service CreateExercise endpoint
// payload.
func NewCreateExercisePayload(body *CreateExerciseRequestBody, sessionToken string) *codelab.CreateExercisePayload {
	v := &codelab.CreateExercisePayload{
		Title:       *body.Title,
		Description: *body.Description,
		InitialCode: *body.InitialCode,
		Solution:    *body.Solution,
		Difficulty:  *body.Difficulty,
		CreatedBy:   *body.CreatedBy,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetExercisePayload builds a codelab service GetExercise endpoint payload.
func NewGetExercisePayload(id int64, sessionToken string) *codelab.GetExercisePayload {
	v := &codelab.GetExercisePayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewListExercisesPayload builds a codelab service ListExercises endpoint
// payload.
func NewListExercisesPayload(sessionToken string) *codelab.ListExercisesPayload {
	v := &codelab.ListExercisesPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewUpdateExercisePayload2 builds a codelab service UpdateExercise endpoint
// payload.
func NewUpdateExercisePayload2(body *UpdateExerciseRequestBody, id int64, sessionToken string) *codelab.UpdateExercisePayload2 {
	v := &codelab.UpdateExercisePayload2{}
	v.Exercise = unmarshalUpdateExercisePayloadRequestBodyToCodelabUpdateExercisePayload(body.Exercise)
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewDeleteExercisePayload builds a codelab service DeleteExercise endpoint
// payload.
func NewDeleteExercisePayload(id int64, sessionToken string) *codelab.DeleteExercisePayload {
	v := &codelab.DeleteExercisePayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewCreateTestPayload builds a codelab service CreateTest endpoint payload.
func NewCreateTestPayload(body *CreateTestRequestBody, sessionToken string) *codelab.CreateTestPayload {
	v := &codelab.CreateTestPayload{
		Input:      *body.Input,
		Output:     *body.Output,
		Public:     *body.Public,
		ExerciseID: *body.ExerciseID,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetTestsByExercisePayload builds a codelab service GetTestsByExercise
// endpoint payload.
func NewGetTestsByExercisePayload(exerciseID int64, sessionToken string) *codelab.GetTestsByExercisePayload {
	v := &codelab.GetTestsByExercisePayload{}
	v.ExerciseID = exerciseID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateTestPayload2 builds a codelab service UpdateTest endpoint payload.
func NewUpdateTestPayload2(body *UpdateTestRequestBody, id int64, sessionToken string) *codelab.UpdateTestPayload2 {
	v := &codelab.UpdateTestPayload2{}
	v.Test = unmarshalUpdateTestPayloadRequestBodyToCodelabUpdateTestPayload(body.Test)
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewDeleteTestPayload builds a codelab service DeleteTest endpoint payload.
func NewDeleteTestPayload(id int64, sessionToken string) *codelab.DeleteTestPayload {
	v := &codelab.DeleteTestPayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewGetExerciseForStudentPayload builds a codelab service
// GetExerciseForStudent endpoint payload.
func NewGetExerciseForStudentPayload(id int64, sessionToken string) *codelab.GetExerciseForStudentPayload {
	v := &codelab.GetExerciseForStudentPayload{}
	v.ID = id
	v.SessionToken = sessionToken

	return v
}

// NewListExercisesForStudentsPayload builds a codelab service
// ListExercisesForStudents endpoint payload.
func NewListExercisesForStudentsPayload(sessionToken string) *codelab.ListExercisesForStudentsPayload {
	v := &codelab.ListExercisesForStudentsPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewCreateAttemptPayload builds a codelab service CreateAttempt endpoint
// payload.
func NewCreateAttemptPayload(body *CreateAttemptRequestBody, sessionToken string) *codelab.CreateAttemptPayload {
	v := &codelab.CreateAttemptPayload{
		ExerciseID: *body.ExerciseID,
		Code:       *body.Code,
		Success:    *body.Success,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetAttemptsByUserAndExercisePayload builds a codelab service
// GetAttemptsByUserAndExercise endpoint payload.
func NewGetAttemptsByUserAndExercisePayload(userID int64, exerciseID int64, sessionToken string) *codelab.GetAttemptsByUserAndExercisePayload {
	v := &codelab.GetAttemptsByUserAndExercisePayload{}
	v.UserID = userID
	v.ExerciseID = exerciseID
	v.SessionToken = sessionToken

	return v
}

// NewGetAnswerByUserAndExercisePayload builds a codelab service
// GetAnswerByUserAndExercise endpoint payload.
func NewGetAnswerByUserAndExercisePayload(userID int64, exerciseID int64, sessionToken string) *codelab.GetAnswerByUserAndExercisePayload {
	v := &codelab.GetAnswerByUserAndExercisePayload{}
	v.UserID = userID
	v.ExerciseID = exerciseID
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateExerciseRequestBody runs the validations defined on
// CreateExerciseRequestBody
func ValidateCreateExerciseRequestBody(body *CreateExerciseRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InitialCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("initial_code", "body"))
	}
	if body.Solution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solution", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	return
}

// ValidateUpdateExerciseRequestBody runs the validations defined on
// UpdateExerciseRequestBody
func ValidateUpdateExerciseRequestBody(body *UpdateExerciseRequestBody) (err error) {
	if body.Exercise == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise", "body"))
	}
	if body.Exercise != nil {
		if err2 := ValidateUpdateExercisePayloadRequestBody(body.Exercise); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateTestRequestBody runs the validations defined on
// CreateTestRequestBody
func ValidateCreateTestRequestBody(body *CreateTestRequestBody) (err error) {
	if body.Input == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("input", "body"))
	}
	if body.Output == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("output", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	return
}

// ValidateUpdateTestRequestBody runs the validations defined on
// UpdateTestRequestBody
func ValidateUpdateTestRequestBody(body *UpdateTestRequestBody) (err error) {
	if body.Test == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test", "body"))
	}
	if body.Test != nil {
		if err2 := ValidateUpdateTestPayloadRequestBody(body.Test); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateAttemptRequestBody runs the validations defined on
// CreateAttemptRequestBody
func ValidateCreateAttemptRequestBody(body *CreateAttemptRequestBody) (err error) {
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	return
}

// ValidateUpdateExercisePayloadRequestBody runs the validations defined on
// UpdateExercisePayloadRequestBody
func ValidateUpdateExercisePayloadRequestBody(body *UpdateExercisePayloadRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InitialCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("initial_code", "body"))
	}
	if body.Solution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solution", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	return
}

// ValidateUpdateTestPayloadRequestBody runs the validations defined on
// UpdateTestPayloadRequestBody
func ValidateUpdateTestPayloadRequestBody(body *UpdateTestPayloadRequestBody) (err error) {
	if body.Input == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("input", "body"))
	}
	if body.Output == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("output", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	return
}
