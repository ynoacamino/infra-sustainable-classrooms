// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package client

import (
	"unicode/utf8"

	codelab "github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/gen/codelab"
	goa "goa.design/goa/v3/pkg"
)

// CreateExerciseRequestBody is the type of the "codelab" service
// "CreateExercise" endpoint HTTP request body.
type CreateExerciseRequestBody struct {
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Initial code template
	InitialCode string `form:"initial_code" json:"initial_code" xml:"initial_code"`
	// Exercise solution
	Solution string `form:"solution" json:"solution" xml:"solution"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
	// ID of user creating the exercise
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
}

// UpdateExerciseRequestBody is the type of the "codelab" service
// "UpdateExercise" endpoint HTTP request body.
type UpdateExerciseRequestBody struct {
	// Exercise data to update
	Exercise *UpdateExercisePayloadRequestBody `form:"exercise" json:"exercise" xml:"exercise"`
}

// CreateTestRequestBody is the type of the "codelab" service "CreateTest"
// endpoint HTTP request body.
type CreateTestRequestBody struct {
	// Test input
	Input string `form:"input" json:"input" xml:"input"`
	// Expected output
	Output string `form:"output" json:"output" xml:"output"`
	// Whether test is visible to students
	Public bool `form:"public" json:"public" xml:"public"`
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
}

// UpdateTestRequestBody is the type of the "codelab" service "UpdateTest"
// endpoint HTTP request body.
type UpdateTestRequestBody struct {
	// Test data to update
	Test *UpdateTestPayloadRequestBody `form:"test" json:"test" xml:"test"`
}

// CreateAttemptRequestBody is the type of the "codelab" service
// "CreateAttempt" endpoint HTTP request body.
type CreateAttemptRequestBody struct {
	// Associated exercise ID
	ExerciseID int64 `form:"exercise_id" json:"exercise_id" xml:"exercise_id"`
	// Submitted code
	Code string `form:"code" json:"code" xml:"code"`
	// Whether the attempt was successful
	Success bool `form:"success" json:"success" xml:"success"`
}

// CreateExerciseResponseBody is the type of the "codelab" service
// "CreateExercise" endpoint HTTP response body.
type CreateExerciseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetExerciseResponseBody is the type of the "codelab" service "GetExercise"
// endpoint HTTP response body.
type GetExerciseResponseBody struct {
	// Exercise ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Initial code template
	InitialCode *string `form:"initial_code,omitempty" json:"initial_code,omitempty" xml:"initial_code,omitempty"`
	// Exercise solution
	Solution *string `form:"solution,omitempty" json:"solution,omitempty" xml:"solution,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
	// ID of user who created the exercise
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Creation timestamp in miliseconds
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListExercisesResponseBody is the type of the "codelab" service
// "ListExercises" endpoint HTTP response body.
type ListExercisesResponseBody []*ExerciseResponse

// UpdateExerciseResponseBody is the type of the "codelab" service
// "UpdateExercise" endpoint HTTP response body.
type UpdateExerciseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteExerciseResponseBody is the type of the "codelab" service
// "DeleteExercise" endpoint HTTP response body.
type DeleteExerciseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateTestResponseBody is the type of the "codelab" service "CreateTest"
// endpoint HTTP response body.
type CreateTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetTestsByExerciseResponseBody is the type of the "codelab" service
// "GetTestsByExercise" endpoint HTTP response body.
type GetTestsByExerciseResponseBody []*TestResponse

// UpdateTestResponseBody is the type of the "codelab" service "UpdateTest"
// endpoint HTTP response body.
type UpdateTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteTestResponseBody is the type of the "codelab" service "DeleteTest"
// endpoint HTTP response body.
type DeleteTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetExerciseForStudentResponseBody is the type of the "codelab" service
// "GetExerciseForStudent" endpoint HTTP response body.
type GetExerciseForStudentResponseBody struct {
	// Exercise ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Initial code template
	InitialCode *string `form:"initial_code,omitempty" json:"initial_code,omitempty" xml:"initial_code,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
	// List of public tests for the exercise
	Tests []*TestResponseBody `form:"tests,omitempty" json:"tests,omitempty" xml:"tests,omitempty"`
	// List of attempts made by students for this exercise
	Attempts []*AttemptResponseBody `form:"attempts,omitempty" json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Student's answer/participation in the exercise
	Answer *AnswerResponseBody `form:"answer,omitempty" json:"answer,omitempty" xml:"answer,omitempty"`
	// ID of user who created the exercise
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListExercisesForStudentsResponseBody is the type of the "codelab" service
// "ListExercisesForStudents" endpoint HTTP response body.
type ListExercisesForStudentsResponseBody []*ExerciseForStudentsListViewResponse

// CreateAttemptResponseBody is the type of the "codelab" service
// "CreateAttempt" endpoint HTTP response body.
type CreateAttemptResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetAttemptsByUserAndExerciseResponseBody is the type of the "codelab"
// service "GetAttemptsByUserAndExercise" endpoint HTTP response body.
type GetAttemptsByUserAndExerciseResponseBody []*AttemptResponse

// GetAnswerByUserAndExerciseResponseBody is the type of the "codelab" service
// "GetAnswerByUserAndExercise" endpoint HTTP response body.
type GetAnswerByUserAndExerciseResponseBody struct {
	// Answer ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
	// Student user ID
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Whether the exercise is completed
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ExerciseResponse is used to define fields on response body types.
type ExerciseResponse struct {
	// Exercise ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Initial code template
	InitialCode *string `form:"initial_code,omitempty" json:"initial_code,omitempty" xml:"initial_code,omitempty"`
	// Exercise solution
	Solution *string `form:"solution,omitempty" json:"solution,omitempty" xml:"solution,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
	// ID of user who created the exercise
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Creation timestamp in miliseconds
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateExercisePayloadRequestBody is used to define fields on request body
// types.
type UpdateExercisePayloadRequestBody struct {
	// Exercise title
	Title string `form:"title" json:"title" xml:"title"`
	// Exercise description
	Description string `form:"description" json:"description" xml:"description"`
	// Initial code template
	InitialCode string `form:"initial_code" json:"initial_code" xml:"initial_code"`
	// Exercise solution
	Solution string `form:"solution" json:"solution" xml:"solution"`
	// Exercise difficulty level
	Difficulty string `form:"difficulty" json:"difficulty" xml:"difficulty"`
}

// TestResponse is used to define fields on response body types.
type TestResponse struct {
	// Test ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Test input
	Input *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
	// Expected output
	Output *string `form:"output,omitempty" json:"output,omitempty" xml:"output,omitempty"`
	// Whether test is visible to students
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateTestPayloadRequestBody is used to define fields on request body types.
type UpdateTestPayloadRequestBody struct {
	// Test input
	Input string `form:"input" json:"input" xml:"input"`
	// Expected output
	Output string `form:"output" json:"output" xml:"output"`
	// Whether test is visible to students
	Public bool `form:"public" json:"public" xml:"public"`
}

// TestResponseBody is used to define fields on response body types.
type TestResponseBody struct {
	// Test ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Test input
	Input *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
	// Expected output
	Output *string `form:"output,omitempty" json:"output,omitempty" xml:"output,omitempty"`
	// Whether test is visible to students
	Public *bool `form:"public,omitempty" json:"public,omitempty" xml:"public,omitempty"`
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// AttemptResponseBody is used to define fields on response body types.
type AttemptResponseBody struct {
	// Attempt ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Associated answer ID
	AnswerID *int64 `form:"answer_id,omitempty" json:"answer_id,omitempty" xml:"answer_id,omitempty"`
	// Submitted code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Whether the attempt was successful
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// AnswerResponseBody is used to define fields on response body types.
type AnswerResponseBody struct {
	// Answer ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Associated exercise ID
	ExerciseID *int64 `form:"exercise_id,omitempty" json:"exercise_id,omitempty" xml:"exercise_id,omitempty"`
	// Student user ID
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// Whether the exercise is completed
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ExerciseForStudentsListViewResponse is used to define fields on response
// body types.
type ExerciseForStudentsListViewResponse struct {
	// Exercise ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Exercise title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Exercise description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Exercise difficulty level
	Difficulty *string `form:"difficulty,omitempty" json:"difficulty,omitempty" xml:"difficulty,omitempty"`
	// Whether the exercise is completed by the student
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// ID of user who created the exercise
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// AttemptResponse is used to define fields on response body types.
type AttemptResponse struct {
	// Attempt ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Associated answer ID
	AnswerID *int64 `form:"answer_id,omitempty" json:"answer_id,omitempty" xml:"answer_id,omitempty"`
	// Submitted code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// Whether the attempt was successful
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// NewCreateExerciseRequestBody builds the HTTP request body from the payload
// of the "CreateExercise" endpoint of the "codelab" service.
func NewCreateExerciseRequestBody(p *codelab.CreateExercisePayload) *CreateExerciseRequestBody {
	body := &CreateExerciseRequestBody{
		Title:       p.Title,
		Description: p.Description,
		InitialCode: p.InitialCode,
		Solution:    p.Solution,
		Difficulty:  p.Difficulty,
		CreatedBy:   p.CreatedBy,
	}
	return body
}

// NewUpdateExerciseRequestBody builds the HTTP request body from the payload
// of the "UpdateExercise" endpoint of the "codelab" service.
func NewUpdateExerciseRequestBody(p *codelab.UpdateExercisePayload2) *UpdateExerciseRequestBody {
	body := &UpdateExerciseRequestBody{}
	if p.Exercise != nil {
		body.Exercise = marshalCodelabUpdateExercisePayloadToUpdateExercisePayloadRequestBody(p.Exercise)
	}
	return body
}

// NewCreateTestRequestBody builds the HTTP request body from the payload of
// the "CreateTest" endpoint of the "codelab" service.
func NewCreateTestRequestBody(p *codelab.CreateTestPayload) *CreateTestRequestBody {
	body := &CreateTestRequestBody{
		Input:      p.Input,
		Output:     p.Output,
		Public:     p.Public,
		ExerciseID: p.ExerciseID,
	}
	return body
}

// NewUpdateTestRequestBody builds the HTTP request body from the payload of
// the "UpdateTest" endpoint of the "codelab" service.
func NewUpdateTestRequestBody(p *codelab.UpdateTestPayload2) *UpdateTestRequestBody {
	body := &UpdateTestRequestBody{}
	if p.Test != nil {
		body.Test = marshalCodelabUpdateTestPayloadToUpdateTestPayloadRequestBody(p.Test)
	}
	return body
}

// NewCreateAttemptRequestBody builds the HTTP request body from the payload of
// the "CreateAttempt" endpoint of the "codelab" service.
func NewCreateAttemptRequestBody(p *codelab.CreateAttemptPayload) *CreateAttemptRequestBody {
	body := &CreateAttemptRequestBody{
		ExerciseID: p.ExerciseID,
		Code:       p.Code,
		Success:    p.Success,
	}
	return body
}

// NewCreateExerciseSimpleResponseCreated builds a "codelab" service
// "CreateExercise" endpoint result from a HTTP "Created" response.
func NewCreateExerciseSimpleResponseCreated(body *CreateExerciseResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateExerciseInvalidInput builds a codelab service CreateExercise
// endpoint invalid_input error.
func NewCreateExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewCreateExerciseServiceUnavailable builds a codelab service CreateExercise
// endpoint service_unavailable error.
func NewCreateExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewCreateExerciseUnauthorized builds a codelab service CreateExercise
// endpoint unauthorized error.
func NewCreateExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewGetExerciseExerciseOK builds a "codelab" service "GetExercise" endpoint
// result from a HTTP "OK" response.
func NewGetExerciseExerciseOK(body *GetExerciseResponseBody) *codelab.Exercise {
	v := &codelab.Exercise{
		ID:          *body.ID,
		Title:       *body.Title,
		Description: *body.Description,
		InitialCode: *body.InitialCode,
		Solution:    *body.Solution,
		Difficulty:  *body.Difficulty,
		CreatedBy:   *body.CreatedBy,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewGetExerciseNotFound builds a codelab service GetExercise endpoint
// not_found error.
func NewGetExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewGetExercisePermissionDenied builds a codelab service GetExercise endpoint
// permission_denied error.
func NewGetExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewGetExerciseServiceUnavailable builds a codelab service GetExercise
// endpoint service_unavailable error.
func NewGetExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewGetExerciseUnauthorized builds a codelab service GetExercise endpoint
// unauthorized error.
func NewGetExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewListExercisesExerciseOK builds a "codelab" service "ListExercises"
// endpoint result from a HTTP "OK" response.
func NewListExercisesExerciseOK(body []*ExerciseResponse) []*codelab.Exercise {
	v := make([]*codelab.Exercise, len(body))
	for i, val := range body {
		v[i] = unmarshalExerciseResponseToCodelabExercise(val)
	}

	return v
}

// NewListExercisesNotFound builds a codelab service ListExercises endpoint
// not_found error.
func NewListExercisesNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewListExercisesPermissionDenied builds a codelab service ListExercises
// endpoint permission_denied error.
func NewListExercisesPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewListExercisesServiceUnavailable builds a codelab service ListExercises
// endpoint service_unavailable error.
func NewListExercisesServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewListExercisesUnauthorized builds a codelab service ListExercises endpoint
// unauthorized error.
func NewListExercisesUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewUpdateExerciseSimpleResponseOK builds a "codelab" service
// "UpdateExercise" endpoint result from a HTTP "OK" response.
func NewUpdateExerciseSimpleResponseOK(body *UpdateExerciseResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateExerciseInvalidInput builds a codelab service UpdateExercise
// endpoint invalid_input error.
func NewUpdateExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewUpdateExerciseNotFound builds a codelab service UpdateExercise endpoint
// not_found error.
func NewUpdateExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewUpdateExercisePermissionDenied builds a codelab service UpdateExercise
// endpoint permission_denied error.
func NewUpdateExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewUpdateExerciseServiceUnavailable builds a codelab service UpdateExercise
// endpoint service_unavailable error.
func NewUpdateExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewUpdateExerciseUnauthorized builds a codelab service UpdateExercise
// endpoint unauthorized error.
func NewUpdateExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewDeleteExerciseSimpleResponseOK builds a "codelab" service
// "DeleteExercise" endpoint result from a HTTP "OK" response.
func NewDeleteExerciseSimpleResponseOK(body *DeleteExerciseResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteExerciseInvalidInput builds a codelab service DeleteExercise
// endpoint invalid_input error.
func NewDeleteExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewDeleteExerciseNotFound builds a codelab service DeleteExercise endpoint
// not_found error.
func NewDeleteExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewDeleteExercisePermissionDenied builds a codelab service DeleteExercise
// endpoint permission_denied error.
func NewDeleteExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewDeleteExerciseServiceUnavailable builds a codelab service DeleteExercise
// endpoint service_unavailable error.
func NewDeleteExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewDeleteExerciseUnauthorized builds a codelab service DeleteExercise
// endpoint unauthorized error.
func NewDeleteExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewCreateTestSimpleResponseCreated builds a "codelab" service "CreateTest"
// endpoint result from a HTTP "Created" response.
func NewCreateTestSimpleResponseCreated(body *CreateTestResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateTestInvalidInput builds a codelab service CreateTest endpoint
// invalid_input error.
func NewCreateTestInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewCreateTestPermissionDenied builds a codelab service CreateTest endpoint
// permission_denied error.
func NewCreateTestPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewCreateTestServiceUnavailable builds a codelab service CreateTest endpoint
// service_unavailable error.
func NewCreateTestServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewCreateTestUnauthorized builds a codelab service CreateTest endpoint
// unauthorized error.
func NewCreateTestUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewGetTestsByExerciseTestOK builds a "codelab" service "GetTestsByExercise"
// endpoint result from a HTTP "OK" response.
func NewGetTestsByExerciseTestOK(body []*TestResponse) []*codelab.Test {
	v := make([]*codelab.Test, len(body))
	for i, val := range body {
		v[i] = unmarshalTestResponseToCodelabTest(val)
	}

	return v
}

// NewGetTestsByExerciseInvalidInput builds a codelab service
// GetTestsByExercise endpoint invalid_input error.
func NewGetTestsByExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewGetTestsByExerciseNotFound builds a codelab service GetTestsByExercise
// endpoint not_found error.
func NewGetTestsByExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewGetTestsByExercisePermissionDenied builds a codelab service
// GetTestsByExercise endpoint permission_denied error.
func NewGetTestsByExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewGetTestsByExerciseServiceUnavailable builds a codelab service
// GetTestsByExercise endpoint service_unavailable error.
func NewGetTestsByExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewGetTestsByExerciseUnauthorized builds a codelab service
// GetTestsByExercise endpoint unauthorized error.
func NewGetTestsByExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewUpdateTestSimpleResponseOK builds a "codelab" service "UpdateTest"
// endpoint result from a HTTP "OK" response.
func NewUpdateTestSimpleResponseOK(body *UpdateTestResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateTestInvalidInput builds a codelab service UpdateTest endpoint
// invalid_input error.
func NewUpdateTestInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewUpdateTestNotFound builds a codelab service UpdateTest endpoint not_found
// error.
func NewUpdateTestNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewUpdateTestPermissionDenied builds a codelab service UpdateTest endpoint
// permission_denied error.
func NewUpdateTestPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewUpdateTestServiceUnavailable builds a codelab service UpdateTest endpoint
// service_unavailable error.
func NewUpdateTestServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewUpdateTestUnauthorized builds a codelab service UpdateTest endpoint
// unauthorized error.
func NewUpdateTestUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewDeleteTestSimpleResponseOK builds a "codelab" service "DeleteTest"
// endpoint result from a HTTP "OK" response.
func NewDeleteTestSimpleResponseOK(body *DeleteTestResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteTestInvalidInput builds a codelab service DeleteTest endpoint
// invalid_input error.
func NewDeleteTestInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewDeleteTestNotFound builds a codelab service DeleteTest endpoint not_found
// error.
func NewDeleteTestNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewDeleteTestPermissionDenied builds a codelab service DeleteTest endpoint
// permission_denied error.
func NewDeleteTestPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewDeleteTestServiceUnavailable builds a codelab service DeleteTest endpoint
// service_unavailable error.
func NewDeleteTestServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewDeleteTestUnauthorized builds a codelab service DeleteTest endpoint
// unauthorized error.
func NewDeleteTestUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewGetExerciseForStudentExerciseForStudentsOK builds a "codelab" service
// "GetExerciseForStudent" endpoint result from a HTTP "OK" response.
func NewGetExerciseForStudentExerciseForStudentsOK(body *GetExerciseForStudentResponseBody) *codelab.ExerciseForStudents {
	v := &codelab.ExerciseForStudents{
		ID:          *body.ID,
		Title:       *body.Title,
		Description: *body.Description,
		InitialCode: *body.InitialCode,
		Difficulty:  *body.Difficulty,
		CreatedBy:   *body.CreatedBy,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}
	v.Tests = make([]*codelab.Test, len(body.Tests))
	for i, val := range body.Tests {
		v.Tests[i] = unmarshalTestResponseBodyToCodelabTest(val)
	}
	v.Attempts = make([]*codelab.Attempt, len(body.Attempts))
	for i, val := range body.Attempts {
		v.Attempts[i] = unmarshalAttemptResponseBodyToCodelabAttempt(val)
	}
	v.Answer = unmarshalAnswerResponseBodyToCodelabAnswer(body.Answer)

	return v
}

// NewGetExerciseForStudentInvalidInput builds a codelab service
// GetExerciseForStudent endpoint invalid_input error.
func NewGetExerciseForStudentInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewGetExerciseForStudentNotFound builds a codelab service
// GetExerciseForStudent endpoint not_found error.
func NewGetExerciseForStudentNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewGetExerciseForStudentPermissionDenied builds a codelab service
// GetExerciseForStudent endpoint permission_denied error.
func NewGetExerciseForStudentPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewGetExerciseForStudentServiceUnavailable builds a codelab service
// GetExerciseForStudent endpoint service_unavailable error.
func NewGetExerciseForStudentServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewGetExerciseForStudentUnauthorized builds a codelab service
// GetExerciseForStudent endpoint unauthorized error.
func NewGetExerciseForStudentUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewListExercisesForStudentsExerciseForStudentsListViewOK builds a "codelab"
// service "ListExercisesForStudents" endpoint result from a HTTP "OK" response.
func NewListExercisesForStudentsExerciseForStudentsListViewOK(body []*ExerciseForStudentsListViewResponse) []*codelab.ExerciseForStudentsListView {
	v := make([]*codelab.ExerciseForStudentsListView, len(body))
	for i, val := range body {
		v[i] = unmarshalExerciseForStudentsListViewResponseToCodelabExerciseForStudentsListView(val)
	}

	return v
}

// NewListExercisesForStudentsInvalidInput builds a codelab service
// ListExercisesForStudents endpoint invalid_input error.
func NewListExercisesForStudentsInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewListExercisesForStudentsNotFound builds a codelab service
// ListExercisesForStudents endpoint not_found error.
func NewListExercisesForStudentsNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewListExercisesForStudentsPermissionDenied builds a codelab service
// ListExercisesForStudents endpoint permission_denied error.
func NewListExercisesForStudentsPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewListExercisesForStudentsServiceUnavailable builds a codelab service
// ListExercisesForStudents endpoint service_unavailable error.
func NewListExercisesForStudentsServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewListExercisesForStudentsUnauthorized builds a codelab service
// ListExercisesForStudents endpoint unauthorized error.
func NewListExercisesForStudentsUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewCreateAttemptSimpleResponseCreated builds a "codelab" service
// "CreateAttempt" endpoint result from a HTTP "Created" response.
func NewCreateAttemptSimpleResponseCreated(body *CreateAttemptResponseBody) *codelab.SimpleResponse {
	v := &codelab.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateAttemptInvalidInput builds a codelab service CreateAttempt endpoint
// invalid_input error.
func NewCreateAttemptInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewCreateAttemptNotFound builds a codelab service CreateAttempt endpoint
// not_found error.
func NewCreateAttemptNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewCreateAttemptPermissionDenied builds a codelab service CreateAttempt
// endpoint permission_denied error.
func NewCreateAttemptPermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewCreateAttemptServiceUnavailable builds a codelab service CreateAttempt
// endpoint service_unavailable error.
func NewCreateAttemptServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewCreateAttemptUnauthorized builds a codelab service CreateAttempt endpoint
// unauthorized error.
func NewCreateAttemptUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewGetAttemptsByUserAndExerciseAttemptOK builds a "codelab" service
// "GetAttemptsByUserAndExercise" endpoint result from a HTTP "OK" response.
func NewGetAttemptsByUserAndExerciseAttemptOK(body []*AttemptResponse) []*codelab.Attempt {
	v := make([]*codelab.Attempt, len(body))
	for i, val := range body {
		v[i] = unmarshalAttemptResponseToCodelabAttempt(val)
	}

	return v
}

// NewGetAttemptsByUserAndExerciseInvalidInput builds a codelab service
// GetAttemptsByUserAndExercise endpoint invalid_input error.
func NewGetAttemptsByUserAndExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewGetAttemptsByUserAndExerciseNotFound builds a codelab service
// GetAttemptsByUserAndExercise endpoint not_found error.
func NewGetAttemptsByUserAndExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewGetAttemptsByUserAndExercisePermissionDenied builds a codelab service
// GetAttemptsByUserAndExercise endpoint permission_denied error.
func NewGetAttemptsByUserAndExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewGetAttemptsByUserAndExerciseServiceUnavailable builds a codelab service
// GetAttemptsByUserAndExercise endpoint service_unavailable error.
func NewGetAttemptsByUserAndExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewGetAttemptsByUserAndExerciseUnauthorized builds a codelab service
// GetAttemptsByUserAndExercise endpoint unauthorized error.
func NewGetAttemptsByUserAndExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// NewGetAnswerByUserAndExerciseAnswerOK builds a "codelab" service
// "GetAnswerByUserAndExercise" endpoint result from a HTTP "OK" response.
func NewGetAnswerByUserAndExerciseAnswerOK(body *GetAnswerByUserAndExerciseResponseBody) *codelab.Answer {
	v := &codelab.Answer{
		ID:         *body.ID,
		ExerciseID: *body.ExerciseID,
		UserID:     *body.UserID,
		Completed:  *body.Completed,
		CreatedAt:  *body.CreatedAt,
		UpdatedAt:  *body.UpdatedAt,
	}

	return v
}

// NewGetAnswerByUserAndExerciseInvalidInput builds a codelab service
// GetAnswerByUserAndExercise endpoint invalid_input error.
func NewGetAnswerByUserAndExerciseInvalidInput(body string) codelab.InvalidInput {
	v := codelab.InvalidInput(body)

	return v
}

// NewGetAnswerByUserAndExerciseNotFound builds a codelab service
// GetAnswerByUserAndExercise endpoint not_found error.
func NewGetAnswerByUserAndExerciseNotFound(body string) codelab.NotFound {
	v := codelab.NotFound(body)

	return v
}

// NewGetAnswerByUserAndExercisePermissionDenied builds a codelab service
// GetAnswerByUserAndExercise endpoint permission_denied error.
func NewGetAnswerByUserAndExercisePermissionDenied(body string) codelab.PermissionDenied {
	v := codelab.PermissionDenied(body)

	return v
}

// NewGetAnswerByUserAndExerciseServiceUnavailable builds a codelab service
// GetAnswerByUserAndExercise endpoint service_unavailable error.
func NewGetAnswerByUserAndExerciseServiceUnavailable(body string) codelab.ServiceUnavailable {
	v := codelab.ServiceUnavailable(body)

	return v
}

// NewGetAnswerByUserAndExerciseUnauthorized builds a codelab service
// GetAnswerByUserAndExercise endpoint unauthorized error.
func NewGetAnswerByUserAndExerciseUnauthorized(body string) codelab.Unauthorized {
	v := codelab.Unauthorized(body)

	return v
}

// ValidateCreateExerciseResponseBody runs the validations defined on
// CreateExerciseResponseBody
func ValidateCreateExerciseResponseBody(body *CreateExerciseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetExerciseResponseBody runs the validations defined on
// GetExerciseResponseBody
func ValidateGetExerciseResponseBody(body *GetExerciseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InitialCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("initial_code", "body"))
	}
	if body.Solution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solution", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	return
}

// ValidateUpdateExerciseResponseBody runs the validations defined on
// UpdateExerciseResponseBody
func ValidateUpdateExerciseResponseBody(body *UpdateExerciseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteExerciseResponseBody runs the validations defined on
// DeleteExerciseResponseBody
func ValidateDeleteExerciseResponseBody(body *DeleteExerciseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateTestResponseBody runs the validations defined on
// CreateTestResponseBody
func ValidateCreateTestResponseBody(body *CreateTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTestResponseBody runs the validations defined on
// UpdateTestResponseBody
func ValidateUpdateTestResponseBody(body *UpdateTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTestResponseBody runs the validations defined on
// DeleteTestResponseBody
func ValidateDeleteTestResponseBody(body *DeleteTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetExerciseForStudentResponseBody runs the validations defined on
// GetExerciseForStudentResponseBody
func ValidateGetExerciseForStudentResponseBody(body *GetExerciseForStudentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InitialCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("initial_code", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.Tests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tests", "body"))
	}
	if body.Attempts == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attempts", "body"))
	}
	if body.Answer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answer", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	for _, e := range body.Tests {
		if e != nil {
			if err2 := ValidateTestResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range body.Attempts {
		if e != nil {
			if err2 := ValidateAttemptResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.Answer != nil {
		if err2 := ValidateAnswerResponseBody(body.Answer); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateAttemptResponseBody runs the validations defined on
// CreateAttemptResponseBody
func ValidateCreateAttemptResponseBody(body *CreateAttemptResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetAnswerByUserAndExerciseResponseBody runs the validations defined
// on GetAnswerByUserAndExerciseResponseBody
func ValidateGetAnswerByUserAndExerciseResponseBody(body *GetAnswerByUserAndExerciseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateExerciseResponse runs the validations defined on ExerciseResponse
func ValidateExerciseResponse(body *ExerciseResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.InitialCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("initial_code", "body"))
	}
	if body.Solution == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("solution", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	return
}

// ValidateUpdateExercisePayloadRequestBody runs the validations defined on
// UpdateExercisePayloadRequestBody
func ValidateUpdateExercisePayloadRequestBody(body *UpdateExercisePayloadRequestBody) (err error) {
	if utf8.RuneCountInString(body.Title) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 200, false))
	}
	if !(body.Difficulty == "easy" || body.Difficulty == "medium" || body.Difficulty == "hard") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", body.Difficulty, []any{"easy", "medium", "hard"}))
	}
	return
}

// ValidateTestResponse runs the validations defined on TestResponse
func ValidateTestResponse(body *TestResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Input == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("input", "body"))
	}
	if body.Output == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("output", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateTestResponseBody runs the validations defined on TestResponseBody
func ValidateTestResponseBody(body *TestResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Input == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("input", "body"))
	}
	if body.Output == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("output", "body"))
	}
	if body.Public == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("public", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateAttemptResponseBody runs the validations defined on
// AttemptResponseBody
func ValidateAttemptResponseBody(body *AttemptResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.AnswerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answer_id", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateAnswerResponseBody runs the validations defined on AnswerResponseBody
func ValidateAnswerResponseBody(body *AnswerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.ExerciseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("exercise_id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateExerciseForStudentsListViewResponse runs the validations defined on
// ExerciseForStudentsListViewResponse
func ValidateExerciseForStudentsListViewResponse(body *ExerciseForStudentsListViewResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Difficulty == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("difficulty", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 200, false))
		}
	}
	if body.Difficulty != nil {
		if !(*body.Difficulty == "easy" || *body.Difficulty == "medium" || *body.Difficulty == "hard") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.difficulty", *body.Difficulty, []any{"easy", "medium", "hard"}))
		}
	}
	return
}

// ValidateAttemptResponse runs the validations defined on AttemptResponse
func ValidateAttemptResponse(body *AttemptResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.AnswerID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answer_id", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}
