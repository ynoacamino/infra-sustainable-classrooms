// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	codelab "github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/gen/codelab"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateExerciseRequest instantiates a HTTP request object with method
// and path set to call the "codelab" service "CreateExercise" endpoint
func (c *Client) BuildCreateExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateExerciseCodelabPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "CreateExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateExerciseRequest returns an encoder for requests sent to the
// codelab CreateExercise server.
func EncodeCreateExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.CreateExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "CreateExercise", "*codelab.CreateExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateExerciseRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("codelab", "CreateExercise", err)
		}
		return nil
	}
}

// DecodeCreateExerciseResponse returns a decoder for responses returned by the
// codelab CreateExercise endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateExercise", err)
			}
			err = ValidateCreateExerciseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "CreateExercise", err)
			}
			res := NewCreateExerciseSimpleResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateExercise", err)
			}
			return nil, NewCreateExerciseInvalidInput(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateExercise", err)
			}
			return nil, NewCreateExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateExercise", err)
			}
			return nil, NewCreateExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "CreateExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildGetExerciseRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "GetExercise" endpoint
func (c *Client) BuildGetExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.GetExercisePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "GetExercise", "*codelab.GetExercisePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetExerciseCodelabPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "GetExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetExerciseRequest returns an encoder for requests sent to the codelab
// GetExercise server.
func EncodeGetExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.GetExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "GetExercise", "*codelab.GetExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetExerciseResponse returns a decoder for responses returned by the
// codelab GetExercise endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetExerciseResponse may return the following errors:
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExercise", err)
			}
			err = ValidateGetExerciseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "GetExercise", err)
			}
			res := NewGetExerciseExerciseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExercise", err)
			}
			return nil, NewGetExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExercise", err)
			}
			return nil, NewGetExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExercise", err)
			}
			return nil, NewGetExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExercise", err)
			}
			return nil, NewGetExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "GetExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildListExercisesRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "ListExercises" endpoint
func (c *Client) BuildListExercisesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListExercisesCodelabPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "ListExercises", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListExercisesRequest returns an encoder for requests sent to the
// codelab ListExercises server.
func EncodeListExercisesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.ListExercisesPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "ListExercises", "*codelab.ListExercisesPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeListExercisesResponse returns a decoder for responses returned by the
// codelab ListExercises endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListExercisesResponse may return the following errors:
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListExercisesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListExercisesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercises", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateExerciseResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "ListExercises", err)
			}
			res := NewListExercisesExerciseOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercises", err)
			}
			return nil, NewListExercisesNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercises", err)
			}
			return nil, NewListExercisesPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercises", err)
			}
			return nil, NewListExercisesServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercises", err)
			}
			return nil, NewListExercisesUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "ListExercises", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateExerciseRequest instantiates a HTTP request object with method
// and path set to call the "codelab" service "UpdateExercise" endpoint
func (c *Client) BuildUpdateExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.UpdateExercisePayload2)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "UpdateExercise", "*codelab.UpdateExercisePayload2", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateExerciseCodelabPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "UpdateExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateExerciseRequest returns an encoder for requests sent to the
// codelab UpdateExercise server.
func EncodeUpdateExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.UpdateExercisePayload2)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "UpdateExercise", "*codelab.UpdateExercisePayload2", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateExerciseRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("codelab", "UpdateExercise", err)
		}
		return nil
	}
}

// DecodeUpdateExerciseResponse returns a decoder for responses returned by the
// codelab UpdateExercise endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			err = ValidateUpdateExerciseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "UpdateExercise", err)
			}
			res := NewUpdateExerciseSimpleResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			return nil, NewUpdateExerciseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			return nil, NewUpdateExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			return nil, NewUpdateExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			return nil, NewUpdateExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateExercise", err)
			}
			return nil, NewUpdateExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "UpdateExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteExerciseRequest instantiates a HTTP request object with method
// and path set to call the "codelab" service "DeleteExercise" endpoint
func (c *Client) BuildDeleteExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.DeleteExercisePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "DeleteExercise", "*codelab.DeleteExercisePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteExerciseCodelabPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "DeleteExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteExerciseRequest returns an encoder for requests sent to the
// codelab DeleteExercise server.
func EncodeDeleteExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.DeleteExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "DeleteExercise", "*codelab.DeleteExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteExerciseResponse returns a decoder for responses returned by the
// codelab DeleteExercise endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			err = ValidateDeleteExerciseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "DeleteExercise", err)
			}
			res := NewDeleteExerciseSimpleResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			return nil, NewDeleteExerciseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			return nil, NewDeleteExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			return nil, NewDeleteExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			return nil, NewDeleteExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteExercise", err)
			}
			return nil, NewDeleteExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "DeleteExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateTestRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "CreateTest" endpoint
func (c *Client) BuildCreateTestRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTestCodelabPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "CreateTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTestRequest returns an encoder for requests sent to the codelab
// CreateTest server.
func EncodeCreateTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.CreateTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "CreateTest", "*codelab.CreateTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateTestRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("codelab", "CreateTest", err)
		}
		return nil
	}
}

// DecodeCreateTestResponse returns a decoder for responses returned by the
// codelab CreateTest endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateTestResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateTest", err)
			}
			err = ValidateCreateTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "CreateTest", err)
			}
			res := NewCreateTestSimpleResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateTest", err)
			}
			return nil, NewCreateTestInvalidInput(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateTest", err)
			}
			return nil, NewCreateTestPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateTest", err)
			}
			return nil, NewCreateTestServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateTest", err)
			}
			return nil, NewCreateTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "CreateTest", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTestsByExerciseRequest instantiates a HTTP request object with
// method and path set to call the "codelab" service "GetTestsByExercise"
// endpoint
func (c *Client) BuildGetTestsByExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		exerciseID int64
	)
	{
		p, ok := v.(*codelab.GetTestsByExercisePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "GetTestsByExercise", "*codelab.GetTestsByExercisePayload", v)
		}
		exerciseID = p.ExerciseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTestsByExerciseCodelabPath(exerciseID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "GetTestsByExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTestsByExerciseRequest returns an encoder for requests sent to the
// codelab GetTestsByExercise server.
func EncodeGetTestsByExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.GetTestsByExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "GetTestsByExercise", "*codelab.GetTestsByExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetTestsByExerciseResponse returns a decoder for responses returned by
// the codelab GetTestsByExercise endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetTestsByExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTestsByExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTestsByExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateTestResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "GetTestsByExercise", err)
			}
			res := NewGetTestsByExerciseTestOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			return nil, NewGetTestsByExerciseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			return nil, NewGetTestsByExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			return nil, NewGetTestsByExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			return nil, NewGetTestsByExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetTestsByExercise", err)
			}
			return nil, NewGetTestsByExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "GetTestsByExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTestRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "UpdateTest" endpoint
func (c *Client) BuildUpdateTestRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.UpdateTestPayload2)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "UpdateTest", "*codelab.UpdateTestPayload2", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTestCodelabPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "UpdateTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTestRequest returns an encoder for requests sent to the codelab
// UpdateTest server.
func EncodeUpdateTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.UpdateTestPayload2)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "UpdateTest", "*codelab.UpdateTestPayload2", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateTestRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("codelab", "UpdateTest", err)
		}
		return nil
	}
}

// DecodeUpdateTestResponse returns a decoder for responses returned by the
// codelab UpdateTest endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateTestResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			err = ValidateUpdateTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "UpdateTest", err)
			}
			res := NewUpdateTestSimpleResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			return nil, NewUpdateTestInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			return nil, NewUpdateTestNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			return nil, NewUpdateTestPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			return nil, NewUpdateTestServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "UpdateTest", err)
			}
			return nil, NewUpdateTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "UpdateTest", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTestRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "DeleteTest" endpoint
func (c *Client) BuildDeleteTestRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.DeleteTestPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "DeleteTest", "*codelab.DeleteTestPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTestCodelabPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "DeleteTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTestRequest returns an encoder for requests sent to the codelab
// DeleteTest server.
func EncodeDeleteTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.DeleteTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "DeleteTest", "*codelab.DeleteTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteTestResponse returns a decoder for responses returned by the
// codelab DeleteTest endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteTestResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			err = ValidateDeleteTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "DeleteTest", err)
			}
			res := NewDeleteTestSimpleResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			return nil, NewDeleteTestInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			return nil, NewDeleteTestNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			return nil, NewDeleteTestPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			return nil, NewDeleteTestServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "DeleteTest", err)
			}
			return nil, NewDeleteTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "DeleteTest", resp.StatusCode, string(body))
		}
	}
}

// BuildGetExerciseForStudentRequest instantiates a HTTP request object with
// method and path set to call the "codelab" service "GetExerciseForStudent"
// endpoint
func (c *Client) BuildGetExerciseForStudentRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int64
	)
	{
		p, ok := v.(*codelab.GetExerciseForStudentPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "GetExerciseForStudent", "*codelab.GetExerciseForStudentPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetExerciseForStudentCodelabPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "GetExerciseForStudent", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetExerciseForStudentRequest returns an encoder for requests sent to
// the codelab GetExerciseForStudent server.
func EncodeGetExerciseForStudentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.GetExerciseForStudentPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "GetExerciseForStudent", "*codelab.GetExerciseForStudentPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetExerciseForStudentResponse returns a decoder for responses returned
// by the codelab GetExerciseForStudent endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetExerciseForStudentResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetExerciseForStudentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetExerciseForStudentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			err = ValidateGetExerciseForStudentResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "GetExerciseForStudent", err)
			}
			res := NewGetExerciseForStudentExerciseForStudentsOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			return nil, NewGetExerciseForStudentInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			return nil, NewGetExerciseForStudentNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			return nil, NewGetExerciseForStudentPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			return nil, NewGetExerciseForStudentServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetExerciseForStudent", err)
			}
			return nil, NewGetExerciseForStudentUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "GetExerciseForStudent", resp.StatusCode, string(body))
		}
	}
}

// BuildListExercisesForStudentsRequest instantiates a HTTP request object with
// method and path set to call the "codelab" service "ListExercisesForStudents"
// endpoint
func (c *Client) BuildListExercisesForStudentsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListExercisesForStudentsCodelabPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "ListExercisesForStudents", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListExercisesForStudentsRequest returns an encoder for requests sent
// to the codelab ListExercisesForStudents server.
func EncodeListExercisesForStudentsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.ListExercisesForStudentsPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "ListExercisesForStudents", "*codelab.ListExercisesForStudentsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeListExercisesForStudentsResponse returns a decoder for responses
// returned by the codelab ListExercisesForStudents endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeListExercisesForStudentsResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListExercisesForStudentsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListExercisesForStudentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateExerciseForStudentsListViewResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "ListExercisesForStudents", err)
			}
			res := NewListExercisesForStudentsExerciseForStudentsListViewOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			return nil, NewListExercisesForStudentsInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			return nil, NewListExercisesForStudentsNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			return nil, NewListExercisesForStudentsPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			return nil, NewListExercisesForStudentsServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "ListExercisesForStudents", err)
			}
			return nil, NewListExercisesForStudentsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "ListExercisesForStudents", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateAttemptRequest instantiates a HTTP request object with method and
// path set to call the "codelab" service "CreateAttempt" endpoint
func (c *Client) BuildCreateAttemptRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAttemptCodelabPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "CreateAttempt", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAttemptRequest returns an encoder for requests sent to the
// codelab CreateAttempt server.
func EncodeCreateAttemptRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.CreateAttemptPayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "CreateAttempt", "*codelab.CreateAttemptPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateAttemptRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("codelab", "CreateAttempt", err)
		}
		return nil
	}
}

// DecodeCreateAttemptResponse returns a decoder for responses returned by the
// codelab CreateAttempt endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateAttemptResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateAttemptResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateAttemptResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			err = ValidateCreateAttemptResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "CreateAttempt", err)
			}
			res := NewCreateAttemptSimpleResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			return nil, NewCreateAttemptInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			return nil, NewCreateAttemptNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			return nil, NewCreateAttemptPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			return nil, NewCreateAttemptServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "CreateAttempt", err)
			}
			return nil, NewCreateAttemptUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "CreateAttempt", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAttemptsByUserAndExerciseRequest instantiates a HTTP request object
// with method and path set to call the "codelab" service
// "GetAttemptsByUserAndExercise" endpoint
func (c *Client) BuildGetAttemptsByUserAndExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		userID     int64
		exerciseID int64
	)
	{
		p, ok := v.(*codelab.GetAttemptsByUserAndExercisePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "GetAttemptsByUserAndExercise", "*codelab.GetAttemptsByUserAndExercisePayload", v)
		}
		userID = p.UserID
		exerciseID = p.ExerciseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAttemptsByUserAndExerciseCodelabPath(userID, exerciseID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "GetAttemptsByUserAndExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAttemptsByUserAndExerciseRequest returns an encoder for requests
// sent to the codelab GetAttemptsByUserAndExercise server.
func EncodeGetAttemptsByUserAndExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.GetAttemptsByUserAndExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "GetAttemptsByUserAndExercise", "*codelab.GetAttemptsByUserAndExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetAttemptsByUserAndExerciseResponse returns a decoder for responses
// returned by the codelab GetAttemptsByUserAndExercise endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetAttemptsByUserAndExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAttemptsByUserAndExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAttemptsByUserAndExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateAttemptResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			res := NewGetAttemptsByUserAndExerciseAttemptOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			return nil, NewGetAttemptsByUserAndExerciseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			return nil, NewGetAttemptsByUserAndExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			return nil, NewGetAttemptsByUserAndExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			return nil, NewGetAttemptsByUserAndExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAttemptsByUserAndExercise", err)
			}
			return nil, NewGetAttemptsByUserAndExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "GetAttemptsByUserAndExercise", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAnswerByUserAndExerciseRequest instantiates a HTTP request object
// with method and path set to call the "codelab" service
// "GetAnswerByUserAndExercise" endpoint
func (c *Client) BuildGetAnswerByUserAndExerciseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		userID     int64
		exerciseID int64
	)
	{
		p, ok := v.(*codelab.GetAnswerByUserAndExercisePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("codelab", "GetAnswerByUserAndExercise", "*codelab.GetAnswerByUserAndExercisePayload", v)
		}
		userID = p.UserID
		exerciseID = p.ExerciseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAnswerByUserAndExerciseCodelabPath(userID, exerciseID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("codelab", "GetAnswerByUserAndExercise", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAnswerByUserAndExerciseRequest returns an encoder for requests sent
// to the codelab GetAnswerByUserAndExercise server.
func EncodeGetAnswerByUserAndExerciseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*codelab.GetAnswerByUserAndExercisePayload)
		if !ok {
			return goahttp.ErrInvalidType("codelab", "GetAnswerByUserAndExercise", "*codelab.GetAnswerByUserAndExercisePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetAnswerByUserAndExerciseResponse returns a decoder for responses
// returned by the codelab GetAnswerByUserAndExercise endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetAnswerByUserAndExerciseResponse may return the following errors:
//   - "invalid_input" (type codelab.InvalidInput): http.StatusBadRequest
//   - "not_found" (type codelab.NotFound): http.StatusNotFound
//   - "permission_denied" (type codelab.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type codelab.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type codelab.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAnswerByUserAndExerciseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAnswerByUserAndExerciseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			err = ValidateGetAnswerByUserAndExerciseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("codelab", "GetAnswerByUserAndExercise", err)
			}
			res := NewGetAnswerByUserAndExerciseAnswerOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			return nil, NewGetAnswerByUserAndExerciseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			return nil, NewGetAnswerByUserAndExerciseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			return nil, NewGetAnswerByUserAndExercisePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			return nil, NewGetAnswerByUserAndExerciseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("codelab", "GetAnswerByUserAndExercise", err)
			}
			return nil, NewGetAnswerByUserAndExerciseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("codelab", "GetAnswerByUserAndExercise", resp.StatusCode, string(body))
		}
	}
}

// unmarshalExerciseResponseToCodelabExercise builds a value of type
// *codelab.Exercise from a value of type *ExerciseResponse.
func unmarshalExerciseResponseToCodelabExercise(v *ExerciseResponse) *codelab.Exercise {
	res := &codelab.Exercise{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		InitialCode: *v.InitialCode,
		Solution:    *v.Solution,
		Difficulty:  *v.Difficulty,
		CreatedBy:   *v.CreatedBy,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}

// marshalCodelabUpdateExercisePayloadToUpdateExercisePayloadRequestBody builds
// a value of type *UpdateExercisePayloadRequestBody from a value of type
// *codelab.UpdateExercisePayload.
func marshalCodelabUpdateExercisePayloadToUpdateExercisePayloadRequestBody(v *codelab.UpdateExercisePayload) *UpdateExercisePayloadRequestBody {
	res := &UpdateExercisePayloadRequestBody{
		Title:       v.Title,
		Description: v.Description,
		InitialCode: v.InitialCode,
		Solution:    v.Solution,
		Difficulty:  v.Difficulty,
	}

	return res
}

// marshalUpdateExercisePayloadRequestBodyToCodelabUpdateExercisePayload builds
// a value of type *codelab.UpdateExercisePayload from a value of type
// *UpdateExercisePayloadRequestBody.
func marshalUpdateExercisePayloadRequestBodyToCodelabUpdateExercisePayload(v *UpdateExercisePayloadRequestBody) *codelab.UpdateExercisePayload {
	res := &codelab.UpdateExercisePayload{
		Title:       v.Title,
		Description: v.Description,
		InitialCode: v.InitialCode,
		Solution:    v.Solution,
		Difficulty:  v.Difficulty,
	}

	return res
}

// unmarshalTestResponseToCodelabTest builds a value of type *codelab.Test from
// a value of type *TestResponse.
func unmarshalTestResponseToCodelabTest(v *TestResponse) *codelab.Test {
	res := &codelab.Test{
		ID:         *v.ID,
		Input:      *v.Input,
		Output:     *v.Output,
		Public:     *v.Public,
		ExerciseID: *v.ExerciseID,
		CreatedAt:  *v.CreatedAt,
		UpdatedAt:  *v.UpdatedAt,
	}

	return res
}

// marshalCodelabUpdateTestPayloadToUpdateTestPayloadRequestBody builds a value
// of type *UpdateTestPayloadRequestBody from a value of type
// *codelab.UpdateTestPayload.
func marshalCodelabUpdateTestPayloadToUpdateTestPayloadRequestBody(v *codelab.UpdateTestPayload) *UpdateTestPayloadRequestBody {
	res := &UpdateTestPayloadRequestBody{
		Input:  v.Input,
		Output: v.Output,
		Public: v.Public,
	}

	return res
}

// marshalUpdateTestPayloadRequestBodyToCodelabUpdateTestPayload builds a value
// of type *codelab.UpdateTestPayload from a value of type
// *UpdateTestPayloadRequestBody.
func marshalUpdateTestPayloadRequestBodyToCodelabUpdateTestPayload(v *UpdateTestPayloadRequestBody) *codelab.UpdateTestPayload {
	res := &codelab.UpdateTestPayload{
		Input:  v.Input,
		Output: v.Output,
		Public: v.Public,
	}

	return res
}

// unmarshalTestResponseBodyToCodelabTest builds a value of type *codelab.Test
// from a value of type *TestResponseBody.
func unmarshalTestResponseBodyToCodelabTest(v *TestResponseBody) *codelab.Test {
	res := &codelab.Test{
		ID:         *v.ID,
		Input:      *v.Input,
		Output:     *v.Output,
		Public:     *v.Public,
		ExerciseID: *v.ExerciseID,
		CreatedAt:  *v.CreatedAt,
		UpdatedAt:  *v.UpdatedAt,
	}

	return res
}

// unmarshalAttemptResponseBodyToCodelabAttempt builds a value of type
// *codelab.Attempt from a value of type *AttemptResponseBody.
func unmarshalAttemptResponseBodyToCodelabAttempt(v *AttemptResponseBody) *codelab.Attempt {
	res := &codelab.Attempt{
		ID:        *v.ID,
		AnswerID:  *v.AnswerID,
		Code:      *v.Code,
		Success:   *v.Success,
		CreatedAt: *v.CreatedAt,
	}

	return res
}

// unmarshalAnswerResponseBodyToCodelabAnswer builds a value of type
// *codelab.Answer from a value of type *AnswerResponseBody.
func unmarshalAnswerResponseBodyToCodelabAnswer(v *AnswerResponseBody) *codelab.Answer {
	res := &codelab.Answer{
		ID:         *v.ID,
		ExerciseID: *v.ExerciseID,
		UserID:     *v.UserID,
		Completed:  *v.Completed,
		CreatedAt:  *v.CreatedAt,
		UpdatedAt:  *v.UpdatedAt,
	}

	return res
}

// unmarshalExerciseForStudentsListViewResponseToCodelabExerciseForStudentsListView
// builds a value of type *codelab.ExerciseForStudentsListView from a value of
// type *ExerciseForStudentsListViewResponse.
func unmarshalExerciseForStudentsListViewResponseToCodelabExerciseForStudentsListView(v *ExerciseForStudentsListViewResponse) *codelab.ExerciseForStudentsListView {
	res := &codelab.ExerciseForStudentsListView{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Difficulty:  *v.Difficulty,
		Completed:   v.Completed,
		CreatedBy:   *v.CreatedBy,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}

// unmarshalAttemptResponseToCodelabAttempt builds a value of type
// *codelab.Attempt from a value of type *AttemptResponse.
func unmarshalAttemptResponseToCodelabAttempt(v *AttemptResponse) *codelab.Attempt {
	res := &codelab.Attempt{
		ID:        *v.ID,
		AnswerID:  *v.AnswerID,
		Code:      *v.Code,
		Success:   *v.Success,
		CreatedAt: *v.CreatedAt,
	}

	return res
}
