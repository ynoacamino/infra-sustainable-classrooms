// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab client HTTP transport
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the codelab service endpoint HTTP clients.
type Client struct {
	// CreateExercise Doer is the HTTP client used to make requests to the
	// CreateExercise endpoint.
	CreateExerciseDoer goahttp.Doer

	// GetExercise Doer is the HTTP client used to make requests to the GetExercise
	// endpoint.
	GetExerciseDoer goahttp.Doer

	// ListExercises Doer is the HTTP client used to make requests to the
	// ListExercises endpoint.
	ListExercisesDoer goahttp.Doer

	// UpdateExercise Doer is the HTTP client used to make requests to the
	// UpdateExercise endpoint.
	UpdateExerciseDoer goahttp.Doer

	// DeleteExercise Doer is the HTTP client used to make requests to the
	// DeleteExercise endpoint.
	DeleteExerciseDoer goahttp.Doer

	// CreateTest Doer is the HTTP client used to make requests to the CreateTest
	// endpoint.
	CreateTestDoer goahttp.Doer

	// GetTestsByExercise Doer is the HTTP client used to make requests to the
	// GetTestsByExercise endpoint.
	GetTestsByExerciseDoer goahttp.Doer

	// UpdateTest Doer is the HTTP client used to make requests to the UpdateTest
	// endpoint.
	UpdateTestDoer goahttp.Doer

	// DeleteTest Doer is the HTTP client used to make requests to the DeleteTest
	// endpoint.
	DeleteTestDoer goahttp.Doer

	// GetExerciseForStudent Doer is the HTTP client used to make requests to the
	// GetExerciseForStudent endpoint.
	GetExerciseForStudentDoer goahttp.Doer

	// ListExercisesForStudents Doer is the HTTP client used to make requests to
	// the ListExercisesForStudents endpoint.
	ListExercisesForStudentsDoer goahttp.Doer

	// CreateAttempt Doer is the HTTP client used to make requests to the
	// CreateAttempt endpoint.
	CreateAttemptDoer goahttp.Doer

	// GetAttemptsByUserAndExercise Doer is the HTTP client used to make requests
	// to the GetAttemptsByUserAndExercise endpoint.
	GetAttemptsByUserAndExerciseDoer goahttp.Doer

	// GetAnswerByUserAndExercise Doer is the HTTP client used to make requests to
	// the GetAnswerByUserAndExercise endpoint.
	GetAnswerByUserAndExerciseDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the codelab service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateExerciseDoer:               doer,
		GetExerciseDoer:                  doer,
		ListExercisesDoer:                doer,
		UpdateExerciseDoer:               doer,
		DeleteExerciseDoer:               doer,
		CreateTestDoer:                   doer,
		GetTestsByExerciseDoer:           doer,
		UpdateTestDoer:                   doer,
		DeleteTestDoer:                   doer,
		GetExerciseForStudentDoer:        doer,
		ListExercisesForStudentsDoer:     doer,
		CreateAttemptDoer:                doer,
		GetAttemptsByUserAndExerciseDoer: doer,
		GetAnswerByUserAndExerciseDoer:   doer,
		RestoreResponseBody:              restoreBody,
		scheme:                           scheme,
		host:                             host,
		decoder:                          dec,
		encoder:                          enc,
	}
}

// CreateExercise returns an endpoint that makes HTTP requests to the codelab
// service CreateExercise server.
func (c *Client) CreateExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateExerciseRequest(c.encoder)
		decodeResponse = DecodeCreateExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "CreateExercise", err)
		}
		return decodeResponse(resp)
	}
}

// GetExercise returns an endpoint that makes HTTP requests to the codelab
// service GetExercise server.
func (c *Client) GetExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetExerciseRequest(c.encoder)
		decodeResponse = DecodeGetExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "GetExercise", err)
		}
		return decodeResponse(resp)
	}
}

// ListExercises returns an endpoint that makes HTTP requests to the codelab
// service ListExercises server.
func (c *Client) ListExercises() goa.Endpoint {
	var (
		encodeRequest  = EncodeListExercisesRequest(c.encoder)
		decodeResponse = DecodeListExercisesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListExercisesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListExercisesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "ListExercises", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateExercise returns an endpoint that makes HTTP requests to the codelab
// service UpdateExercise server.
func (c *Client) UpdateExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateExerciseRequest(c.encoder)
		decodeResponse = DecodeUpdateExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "UpdateExercise", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteExercise returns an endpoint that makes HTTP requests to the codelab
// service DeleteExercise server.
func (c *Client) DeleteExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteExerciseRequest(c.encoder)
		decodeResponse = DecodeDeleteExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "DeleteExercise", err)
		}
		return decodeResponse(resp)
	}
}

// CreateTest returns an endpoint that makes HTTP requests to the codelab
// service CreateTest server.
func (c *Client) CreateTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTestRequest(c.encoder)
		decodeResponse = DecodeCreateTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "CreateTest", err)
		}
		return decodeResponse(resp)
	}
}

// GetTestsByExercise returns an endpoint that makes HTTP requests to the
// codelab service GetTestsByExercise server.
func (c *Client) GetTestsByExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTestsByExerciseRequest(c.encoder)
		decodeResponse = DecodeGetTestsByExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTestsByExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTestsByExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "GetTestsByExercise", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTest returns an endpoint that makes HTTP requests to the codelab
// service UpdateTest server.
func (c *Client) UpdateTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateTestRequest(c.encoder)
		decodeResponse = DecodeUpdateTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "UpdateTest", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTest returns an endpoint that makes HTTP requests to the codelab
// service DeleteTest server.
func (c *Client) DeleteTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTestRequest(c.encoder)
		decodeResponse = DecodeDeleteTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "DeleteTest", err)
		}
		return decodeResponse(resp)
	}
}

// GetExerciseForStudent returns an endpoint that makes HTTP requests to the
// codelab service GetExerciseForStudent server.
func (c *Client) GetExerciseForStudent() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetExerciseForStudentRequest(c.encoder)
		decodeResponse = DecodeGetExerciseForStudentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetExerciseForStudentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetExerciseForStudentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "GetExerciseForStudent", err)
		}
		return decodeResponse(resp)
	}
}

// ListExercisesForStudents returns an endpoint that makes HTTP requests to the
// codelab service ListExercisesForStudents server.
func (c *Client) ListExercisesForStudents() goa.Endpoint {
	var (
		encodeRequest  = EncodeListExercisesForStudentsRequest(c.encoder)
		decodeResponse = DecodeListExercisesForStudentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListExercisesForStudentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListExercisesForStudentsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "ListExercisesForStudents", err)
		}
		return decodeResponse(resp)
	}
}

// CreateAttempt returns an endpoint that makes HTTP requests to the codelab
// service CreateAttempt server.
func (c *Client) CreateAttempt() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateAttemptRequest(c.encoder)
		decodeResponse = DecodeCreateAttemptResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateAttemptRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateAttemptDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "CreateAttempt", err)
		}
		return decodeResponse(resp)
	}
}

// GetAttemptsByUserAndExercise returns an endpoint that makes HTTP requests to
// the codelab service GetAttemptsByUserAndExercise server.
func (c *Client) GetAttemptsByUserAndExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAttemptsByUserAndExerciseRequest(c.encoder)
		decodeResponse = DecodeGetAttemptsByUserAndExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAttemptsByUserAndExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAttemptsByUserAndExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "GetAttemptsByUserAndExercise", err)
		}
		return decodeResponse(resp)
	}
}

// GetAnswerByUserAndExercise returns an endpoint that makes HTTP requests to
// the codelab service GetAnswerByUserAndExercise server.
func (c *Client) GetAnswerByUserAndExercise() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAnswerByUserAndExerciseRequest(c.encoder)
		decodeResponse = DecodeGetAnswerByUserAndExerciseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAnswerByUserAndExerciseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAnswerByUserAndExerciseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("codelab", "GetAnswerByUserAndExercise", err)
		}
		return decodeResponse(resp)
	}
}
