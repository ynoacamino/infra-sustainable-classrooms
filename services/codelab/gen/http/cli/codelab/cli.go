// Code generated by goa v3.21.1, DO NOT EDIT.
//
// codelab HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/design/api
// -o ./services/codelab/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	codelabc "github.com/ynoacamino/infra-sustainable-classrooms/services/codelab/gen/http/codelab/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `codelab (create-exercise|get-exercise|list-exercises|update-exercise|delete-exercise|create-test|get-tests-by-exercise|update-test|delete-test|get-exercise-for-student|list-exercises-for-students|create-attempt|get-attempts-by-user-and-exercise|get-answer-by-user-and-exercise)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` codelab create-exercise --body '{
      "created_by": 123,
      "description": "Write a function that returns the sum of two numbers",
      "difficulty": "easy",
      "initial_code": "def sum_two_numbers(a, b):\n    # Write your code here\n    pass",
      "solution": "def sum_two_numbers(a, b):\n    return a + b",
      "title": "Sum Two Numbers"
   }' --session-token "Molestiae et."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		codelabFlags = flag.NewFlagSet("codelab", flag.ContinueOnError)

		codelabCreateExerciseFlags            = flag.NewFlagSet("create-exercise", flag.ExitOnError)
		codelabCreateExerciseBodyFlag         = codelabCreateExerciseFlags.String("body", "REQUIRED", "")
		codelabCreateExerciseSessionTokenFlag = codelabCreateExerciseFlags.String("session-token", "REQUIRED", "")

		codelabGetExerciseFlags            = flag.NewFlagSet("get-exercise", flag.ExitOnError)
		codelabGetExerciseIDFlag           = codelabGetExerciseFlags.String("id", "REQUIRED", "Exercise ID")
		codelabGetExerciseSessionTokenFlag = codelabGetExerciseFlags.String("session-token", "REQUIRED", "")

		codelabListExercisesFlags            = flag.NewFlagSet("list-exercises", flag.ExitOnError)
		codelabListExercisesSessionTokenFlag = codelabListExercisesFlags.String("session-token", "REQUIRED", "")

		codelabUpdateExerciseFlags            = flag.NewFlagSet("update-exercise", flag.ExitOnError)
		codelabUpdateExerciseBodyFlag         = codelabUpdateExerciseFlags.String("body", "REQUIRED", "")
		codelabUpdateExerciseIDFlag           = codelabUpdateExerciseFlags.String("id", "REQUIRED", "Exercise ID")
		codelabUpdateExerciseSessionTokenFlag = codelabUpdateExerciseFlags.String("session-token", "REQUIRED", "")

		codelabDeleteExerciseFlags            = flag.NewFlagSet("delete-exercise", flag.ExitOnError)
		codelabDeleteExerciseIDFlag           = codelabDeleteExerciseFlags.String("id", "REQUIRED", "Exercise ID")
		codelabDeleteExerciseSessionTokenFlag = codelabDeleteExerciseFlags.String("session-token", "REQUIRED", "")

		codelabCreateTestFlags            = flag.NewFlagSet("create-test", flag.ExitOnError)
		codelabCreateTestBodyFlag         = codelabCreateTestFlags.String("body", "REQUIRED", "")
		codelabCreateTestSessionTokenFlag = codelabCreateTestFlags.String("session-token", "REQUIRED", "")

		codelabGetTestsByExerciseFlags            = flag.NewFlagSet("get-tests-by-exercise", flag.ExitOnError)
		codelabGetTestsByExerciseExerciseIDFlag   = codelabGetTestsByExerciseFlags.String("exercise-id", "REQUIRED", "Exercise ID")
		codelabGetTestsByExerciseSessionTokenFlag = codelabGetTestsByExerciseFlags.String("session-token", "REQUIRED", "")

		codelabUpdateTestFlags            = flag.NewFlagSet("update-test", flag.ExitOnError)
		codelabUpdateTestBodyFlag         = codelabUpdateTestFlags.String("body", "REQUIRED", "")
		codelabUpdateTestIDFlag           = codelabUpdateTestFlags.String("id", "REQUIRED", "Test ID")
		codelabUpdateTestSessionTokenFlag = codelabUpdateTestFlags.String("session-token", "REQUIRED", "")

		codelabDeleteTestFlags            = flag.NewFlagSet("delete-test", flag.ExitOnError)
		codelabDeleteTestIDFlag           = codelabDeleteTestFlags.String("id", "REQUIRED", "Test ID")
		codelabDeleteTestSessionTokenFlag = codelabDeleteTestFlags.String("session-token", "REQUIRED", "")

		codelabGetExerciseForStudentFlags            = flag.NewFlagSet("get-exercise-for-student", flag.ExitOnError)
		codelabGetExerciseForStudentIDFlag           = codelabGetExerciseForStudentFlags.String("id", "REQUIRED", "Exercise ID")
		codelabGetExerciseForStudentSessionTokenFlag = codelabGetExerciseForStudentFlags.String("session-token", "REQUIRED", "")

		codelabListExercisesForStudentsFlags            = flag.NewFlagSet("list-exercises-for-students", flag.ExitOnError)
		codelabListExercisesForStudentsSessionTokenFlag = codelabListExercisesForStudentsFlags.String("session-token", "REQUIRED", "")

		codelabCreateAttemptFlags            = flag.NewFlagSet("create-attempt", flag.ExitOnError)
		codelabCreateAttemptBodyFlag         = codelabCreateAttemptFlags.String("body", "REQUIRED", "")
		codelabCreateAttemptSessionTokenFlag = codelabCreateAttemptFlags.String("session-token", "REQUIRED", "")

		codelabGetAttemptsByUserAndExerciseFlags            = flag.NewFlagSet("get-attempts-by-user-and-exercise", flag.ExitOnError)
		codelabGetAttemptsByUserAndExerciseUserIDFlag       = codelabGetAttemptsByUserAndExerciseFlags.String("user-id", "REQUIRED", "User ID")
		codelabGetAttemptsByUserAndExerciseExerciseIDFlag   = codelabGetAttemptsByUserAndExerciseFlags.String("exercise-id", "REQUIRED", "Exercise ID")
		codelabGetAttemptsByUserAndExerciseSessionTokenFlag = codelabGetAttemptsByUserAndExerciseFlags.String("session-token", "REQUIRED", "")

		codelabGetAnswerByUserAndExerciseFlags            = flag.NewFlagSet("get-answer-by-user-and-exercise", flag.ExitOnError)
		codelabGetAnswerByUserAndExerciseUserIDFlag       = codelabGetAnswerByUserAndExerciseFlags.String("user-id", "REQUIRED", "User ID")
		codelabGetAnswerByUserAndExerciseExerciseIDFlag   = codelabGetAnswerByUserAndExerciseFlags.String("exercise-id", "REQUIRED", "Exercise ID")
		codelabGetAnswerByUserAndExerciseSessionTokenFlag = codelabGetAnswerByUserAndExerciseFlags.String("session-token", "REQUIRED", "")
	)
	codelabFlags.Usage = codelabUsage
	codelabCreateExerciseFlags.Usage = codelabCreateExerciseUsage
	codelabGetExerciseFlags.Usage = codelabGetExerciseUsage
	codelabListExercisesFlags.Usage = codelabListExercisesUsage
	codelabUpdateExerciseFlags.Usage = codelabUpdateExerciseUsage
	codelabDeleteExerciseFlags.Usage = codelabDeleteExerciseUsage
	codelabCreateTestFlags.Usage = codelabCreateTestUsage
	codelabGetTestsByExerciseFlags.Usage = codelabGetTestsByExerciseUsage
	codelabUpdateTestFlags.Usage = codelabUpdateTestUsage
	codelabDeleteTestFlags.Usage = codelabDeleteTestUsage
	codelabGetExerciseForStudentFlags.Usage = codelabGetExerciseForStudentUsage
	codelabListExercisesForStudentsFlags.Usage = codelabListExercisesForStudentsUsage
	codelabCreateAttemptFlags.Usage = codelabCreateAttemptUsage
	codelabGetAttemptsByUserAndExerciseFlags.Usage = codelabGetAttemptsByUserAndExerciseUsage
	codelabGetAnswerByUserAndExerciseFlags.Usage = codelabGetAnswerByUserAndExerciseUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "codelab":
			svcf = codelabFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "codelab":
			switch epn {
			case "create-exercise":
				epf = codelabCreateExerciseFlags

			case "get-exercise":
				epf = codelabGetExerciseFlags

			case "list-exercises":
				epf = codelabListExercisesFlags

			case "update-exercise":
				epf = codelabUpdateExerciseFlags

			case "delete-exercise":
				epf = codelabDeleteExerciseFlags

			case "create-test":
				epf = codelabCreateTestFlags

			case "get-tests-by-exercise":
				epf = codelabGetTestsByExerciseFlags

			case "update-test":
				epf = codelabUpdateTestFlags

			case "delete-test":
				epf = codelabDeleteTestFlags

			case "get-exercise-for-student":
				epf = codelabGetExerciseForStudentFlags

			case "list-exercises-for-students":
				epf = codelabListExercisesForStudentsFlags

			case "create-attempt":
				epf = codelabCreateAttemptFlags

			case "get-attempts-by-user-and-exercise":
				epf = codelabGetAttemptsByUserAndExerciseFlags

			case "get-answer-by-user-and-exercise":
				epf = codelabGetAnswerByUserAndExerciseFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "codelab":
			c := codelabc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-exercise":
				endpoint = c.CreateExercise()
				data, err = codelabc.BuildCreateExercisePayload(*codelabCreateExerciseBodyFlag, *codelabCreateExerciseSessionTokenFlag)
			case "get-exercise":
				endpoint = c.GetExercise()
				data, err = codelabc.BuildGetExercisePayload(*codelabGetExerciseIDFlag, *codelabGetExerciseSessionTokenFlag)
			case "list-exercises":
				endpoint = c.ListExercises()
				data, err = codelabc.BuildListExercisesPayload(*codelabListExercisesSessionTokenFlag)
			case "update-exercise":
				endpoint = c.UpdateExercise()
				data, err = codelabc.BuildUpdateExercisePayload(*codelabUpdateExerciseBodyFlag, *codelabUpdateExerciseIDFlag, *codelabUpdateExerciseSessionTokenFlag)
			case "delete-exercise":
				endpoint = c.DeleteExercise()
				data, err = codelabc.BuildDeleteExercisePayload(*codelabDeleteExerciseIDFlag, *codelabDeleteExerciseSessionTokenFlag)
			case "create-test":
				endpoint = c.CreateTest()
				data, err = codelabc.BuildCreateTestPayload(*codelabCreateTestBodyFlag, *codelabCreateTestSessionTokenFlag)
			case "get-tests-by-exercise":
				endpoint = c.GetTestsByExercise()
				data, err = codelabc.BuildGetTestsByExercisePayload(*codelabGetTestsByExerciseExerciseIDFlag, *codelabGetTestsByExerciseSessionTokenFlag)
			case "update-test":
				endpoint = c.UpdateTest()
				data, err = codelabc.BuildUpdateTestPayload(*codelabUpdateTestBodyFlag, *codelabUpdateTestIDFlag, *codelabUpdateTestSessionTokenFlag)
			case "delete-test":
				endpoint = c.DeleteTest()
				data, err = codelabc.BuildDeleteTestPayload(*codelabDeleteTestIDFlag, *codelabDeleteTestSessionTokenFlag)
			case "get-exercise-for-student":
				endpoint = c.GetExerciseForStudent()
				data, err = codelabc.BuildGetExerciseForStudentPayload(*codelabGetExerciseForStudentIDFlag, *codelabGetExerciseForStudentSessionTokenFlag)
			case "list-exercises-for-students":
				endpoint = c.ListExercisesForStudents()
				data, err = codelabc.BuildListExercisesForStudentsPayload(*codelabListExercisesForStudentsSessionTokenFlag)
			case "create-attempt":
				endpoint = c.CreateAttempt()
				data, err = codelabc.BuildCreateAttemptPayload(*codelabCreateAttemptBodyFlag, *codelabCreateAttemptSessionTokenFlag)
			case "get-attempts-by-user-and-exercise":
				endpoint = c.GetAttemptsByUserAndExercise()
				data, err = codelabc.BuildGetAttemptsByUserAndExercisePayload(*codelabGetAttemptsByUserAndExerciseUserIDFlag, *codelabGetAttemptsByUserAndExerciseExerciseIDFlag, *codelabGetAttemptsByUserAndExerciseSessionTokenFlag)
			case "get-answer-by-user-and-exercise":
				endpoint = c.GetAnswerByUserAndExercise()
				data, err = codelabc.BuildGetAnswerByUserAndExercisePayload(*codelabGetAnswerByUserAndExerciseUserIDFlag, *codelabGetAnswerByUserAndExerciseExerciseIDFlag, *codelabGetAnswerByUserAndExerciseSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// codelabUsage displays the usage of the codelab command and its subcommands.
func codelabUsage() {
	fmt.Fprintf(os.Stderr, `Codelab microservice for coding exercises, tests, answers and attempts
Usage:
    %[1]s [globalflags] codelab COMMAND [flags]

COMMAND:
    create-exercise: Create a new coding exercise (professors only)
    get-exercise: Get exercise by ID with solution (professors only)
    list-exercises: List all exercises with solutions (professors only)
    update-exercise: Update an exercise (professors only)
    delete-exercise: Delete an exercise (professors only)
    create-test: Create a new test case for an exercise (professors only)
    get-tests-by-exercise: Get all test cases for an exercise (professors only)
    update-test: Update a test case (professors only)
    delete-test: Delete a test case (professors only)
    get-exercise-for-student: Get exercise by ID without solution (students)
    list-exercises-for-students: List all exercises without solutions (students)
    create-attempt: Submit a code attempt for an exercise (students)
    get-attempts-by-user-and-exercise: Get user's attempts for a specific exercise (students)
    get-answer-by-user-and-exercise: Get user's answer for a specific exercise

Additional help:
    %[1]s codelab COMMAND --help
`, os.Args[0])
}
func codelabCreateExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab create-exercise -body JSON -session-token STRING

Create a new coding exercise (professors only)
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s codelab create-exercise --body '{
      "created_by": 123,
      "description": "Write a function that returns the sum of two numbers",
      "difficulty": "easy",
      "initial_code": "def sum_two_numbers(a, b):\n    # Write your code here\n    pass",
      "solution": "def sum_two_numbers(a, b):\n    return a + b",
      "title": "Sum Two Numbers"
   }' --session-token "Molestiae et."
`, os.Args[0])
}

func codelabGetExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab get-exercise -id INT64 -session-token STRING

Get exercise by ID with solution (professors only)
    -id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab get-exercise --id 1 --session-token "Quis cupiditate possimus molestiae doloremque dolores fugiat."
`, os.Args[0])
}

func codelabListExercisesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab list-exercises -session-token STRING

List all exercises with solutions (professors only)
    -session-token STRING: 

Example:
    %[1]s codelab list-exercises --session-token "Nulla et praesentium quo accusantium ut doloribus."
`, os.Args[0])
}

func codelabUpdateExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab update-exercise -body JSON -id INT64 -session-token STRING

Update an exercise (professors only)
    -body JSON: 
    -id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab update-exercise --body '{
      "exercise": {
         "description": "Write a function that returns the sum of two numbers",
         "difficulty": "easy",
         "initial_code": "def sum_two_numbers(a, b):\n    # Write your code here\n    pass",
         "solution": "def sum_two_numbers(a, b):\n    return a + b",
         "title": "Sum Two Numbers"
      }
   }' --id 1 --session-token "Totam minima odit saepe tempore."
`, os.Args[0])
}

func codelabDeleteExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab delete-exercise -id INT64 -session-token STRING

Delete an exercise (professors only)
    -id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab delete-exercise --id 1 --session-token "Ut eum nisi."
`, os.Args[0])
}

func codelabCreateTestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab create-test -body JSON -session-token STRING

Create a new test case for an exercise (professors only)
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s codelab create-test --body '{
      "exercise_id": 1,
      "input": "5, 3",
      "output": "8",
      "public": true
   }' --session-token "Enim iure."
`, os.Args[0])
}

func codelabGetTestsByExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab get-tests-by-exercise -exercise-id INT64 -session-token STRING

Get all test cases for an exercise (professors only)
    -exercise-id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab get-tests-by-exercise --exercise-id 1 --session-token "Porro molestiae voluptates."
`, os.Args[0])
}

func codelabUpdateTestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab update-test -body JSON -id INT64 -session-token STRING

Update a test case (professors only)
    -body JSON: 
    -id INT64: Test ID
    -session-token STRING: 

Example:
    %[1]s codelab update-test --body '{
      "test": {
         "input": "5, 3",
         "output": "8",
         "public": true
      }
   }' --id 1 --session-token "At sed dolores nobis animi delectus et."
`, os.Args[0])
}

func codelabDeleteTestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab delete-test -id INT64 -session-token STRING

Delete a test case (professors only)
    -id INT64: Test ID
    -session-token STRING: 

Example:
    %[1]s codelab delete-test --id 1 --session-token "Cumque illo mollitia nostrum suscipit molestiae."
`, os.Args[0])
}

func codelabGetExerciseForStudentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab get-exercise-for-student -id INT64 -session-token STRING

Get exercise by ID without solution (students)
    -id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab get-exercise-for-student --id 1 --session-token "Accusantium adipisci."
`, os.Args[0])
}

func codelabListExercisesForStudentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab list-exercises-for-students -session-token STRING

List all exercises without solutions (students)
    -session-token STRING: 

Example:
    %[1]s codelab list-exercises-for-students --session-token "Iusto eveniet dicta molestias voluptates quis."
`, os.Args[0])
}

func codelabCreateAttemptUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab create-attempt -body JSON -session-token STRING

Submit a code attempt for an exercise (students)
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s codelab create-attempt --body '{
      "code": "def sum_two_numbers(a, b):\n    return a + b",
      "exercise_id": 1,
      "success": true
   }' --session-token "Quia ratione nostrum necessitatibus animi quo esse."
`, os.Args[0])
}

func codelabGetAttemptsByUserAndExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab get-attempts-by-user-and-exercise -user-id INT64 -exercise-id INT64 -session-token STRING

Get user's attempts for a specific exercise (students)
    -user-id INT64: User ID
    -exercise-id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab get-attempts-by-user-and-exercise --user-id 123 --exercise-id 1 --session-token "Sed sed et."
`, os.Args[0])
}

func codelabGetAnswerByUserAndExerciseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] codelab get-answer-by-user-and-exercise -user-id INT64 -exercise-id INT64 -session-token STRING

Get user's answer for a specific exercise
    -user-id INT64: User ID
    -exercise-id INT64: Exercise ID
    -session-token STRING: 

Example:
    %[1]s codelab get-answer-by-user-and-exercise --user-id 123 --exercise-id 1 --session-token "Aut nisi."
`, os.Args[0])
}
