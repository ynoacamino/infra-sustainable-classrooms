// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package mailing

import (
	"context"
)

// Mailing microservice for sending emails
type Service interface {
	// Send an email message via SMTP
	SendEmail(context.Context, *SendEmailPayload) (res *EmailResponse, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "mailing"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "mailing"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"SendEmail"}

// Email message structure
type EmailMessage struct {
	// Recipient email addresses
	To []string
	// Carbon copy email addresses
	Cc []string
	// Blind carbon copy email addresses
	Bcc []string
	// Email subject
	Subject string
	// Email body content
	Body string
	// Whether the body content is HTML
	IsHTML bool
}

// EmailResponse is the result type of the mailing service SendEmail method.
type EmailResponse struct {
	// Whether the email was sent successfully
	Success bool
	// Response message
	Message string
	// Message ID from the SMTP server
	MessageID *string
}

// SendEmailPayload is the payload type of the mailing service SendEmail method.
type SendEmailPayload struct {
	// Email message to send
	Email *EmailMessage
}

// Failed to send email
type EmailSendFailed string

// Invalid input parameters
type InvalidInput string

// Service temporarily unavailable
type ServiceUnavailable string

// Failed to connect to SMTP server
type SMTPConnectionFailed string

// Error returns an error description.
func (e EmailSendFailed) Error() string {
	return "Failed to send email"
}

// ErrorName returns "email_send_failed".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e EmailSendFailed) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "email_send_failed".
func (e EmailSendFailed) GoaErrorName() string {
	return "email_send_failed"
}

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input parameters"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e ServiceUnavailable) Error() string {
	return "Service temporarily unavailable"
}

// ErrorName returns "service_unavailable".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ServiceUnavailable) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service_unavailable".
func (e ServiceUnavailable) GoaErrorName() string {
	return "service_unavailable"
}

// Error returns an error description.
func (e SMTPConnectionFailed) Error() string {
	return "Failed to connect to SMTP server"
}

// ErrorName returns "smtp_connection_failed".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e SMTPConnectionFailed) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "smtp_connection_failed".
func (e SMTPConnectionFailed) GoaErrorName() string {
	return "smtp_connection_failed"
}
