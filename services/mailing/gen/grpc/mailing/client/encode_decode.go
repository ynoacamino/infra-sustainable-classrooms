// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing gRPC client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	"context"

	mailingpb "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/grpc/mailing/pb"
	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSendEmailFunc builds the remote method to invoke for "mailing" service
// "SendEmail" endpoint.
func BuildSendEmailFunc(grpccli mailingpb.MailingClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SendEmail(ctx, reqpb.(*mailingpb.SendEmailRequest), opts...)
		}
		return grpccli.SendEmail(ctx, &mailingpb.SendEmailRequest{}, opts...)
	}
}

// EncodeSendEmailRequest encodes requests sent to mailing SendEmail endpoint.
func EncodeSendEmailRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*mailing.SendEmailPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("mailing", "SendEmail", "*mailing.SendEmailPayload", v)
	}
	return NewProtoSendEmailRequest(payload), nil
}

// DecodeSendEmailResponse decodes responses from the mailing SendEmail
// endpoint.
func DecodeSendEmailResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*mailingpb.SendEmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("mailing", "SendEmail", "*mailingpb.SendEmailResponse", v)
	}
	res := NewSendEmailResult(message)
	return res, nil
}
