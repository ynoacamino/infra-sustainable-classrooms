// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	"encoding/json"
	"fmt"

	mailingpb "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/grpc/mailing/pb"
	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
)

// BuildSendEmailPayload builds the payload for the mailing SendEmail endpoint
// from CLI flags.
func BuildSendEmailPayload(mailingSendEmailMessage string) (*mailing.SendEmailPayload, error) {
	var err error
	var message mailingpb.SendEmailRequest
	{
		if mailingSendEmailMessage != "" {
			err = json.Unmarshal([]byte(mailingSendEmailMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": {\n         \"bcc\": [\n            \"bcc@example.com\"\n         ],\n         \"body\": \"Hello! Welcome to our platform. We\\'re excited to have you on board.\",\n         \"cc\": [\n            \"cc@example.com\"\n         ],\n         \"is_html\": true,\n         \"subject\": \"Welcome to our platform!\",\n         \"to\": [\n            \"user@example.com\",\n            \"admin@example.com\"\n         ]\n      }\n   }'")
			}
		}
	}
	v := &mailing.SendEmailPayload{}
	if message.Email != nil {
		v.Email = protobufMailingpbEmailMessageToMailingEmailMessage(message.Email)
	}

	return v, nil
}
