// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing gRPC client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	mailingpb "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/grpc/mailing/pb"
	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
)

// NewProtoSendEmailRequest builds the gRPC request type from the payload of
// the "SendEmail" endpoint of the "mailing" service.
func NewProtoSendEmailRequest(payload *mailing.SendEmailPayload) *mailingpb.SendEmailRequest {
	message := &mailingpb.SendEmailRequest{}
	if payload.Email != nil {
		message.Email = svcMailingEmailMessageToMailingpbEmailMessage(payload.Email)
	}
	return message
}

// NewSendEmailResult builds the result type of the "SendEmail" endpoint of the
// "mailing" service from the gRPC response type.
func NewSendEmailResult(message *mailingpb.SendEmailResponse) *mailing.EmailResponse {
	result := &mailing.EmailResponse{
		Success:   message.Success,
		Message:   message.Message_,
		MessageID: message.MessageId,
	}
	return result
}

// protobufMailingpbEmailMessageToMailingEmailMessage builds a value of type
// *mailing.EmailMessage from a value of type *mailingpb.EmailMessage.
func protobufMailingpbEmailMessageToMailingEmailMessage(v *mailingpb.EmailMessage) *mailing.EmailMessage {
	res := &mailing.EmailMessage{
		Subject: v.Subject,
		Body:    v.Body,
	}
	if v.IsHtml != nil {
		res.IsHTML = *v.IsHtml
	}
	if v.To != nil {
		res.To = make([]string, len(v.To))
		for i, val := range v.To {
			res.To[i] = val
		}
	}
	if v.Cc != nil {
		res.Cc = make([]string, len(v.Cc))
		for i, val := range v.Cc {
			res.Cc[i] = val
		}
	}
	if v.Bcc != nil {
		res.Bcc = make([]string, len(v.Bcc))
		for i, val := range v.Bcc {
			res.Bcc[i] = val
		}
	}
	if v.IsHtml == nil {
		res.IsHTML = false
	}

	return res
}

// svcMailingEmailMessageToMailingpbEmailMessage builds a value of type
// *mailingpb.EmailMessage from a value of type *mailing.EmailMessage.
func svcMailingEmailMessageToMailingpbEmailMessage(v *mailing.EmailMessage) *mailingpb.EmailMessage {
	res := &mailingpb.EmailMessage{
		Subject: v.Subject,
		Body:    v.Body,
		IsHtml:  &v.IsHTML,
	}
	if v.To != nil {
		res.To = make([]string, len(v.To))
		for i, val := range v.To {
			res.To[i] = val
		}
	}
	if v.Cc != nil {
		res.Cc = make([]string, len(v.Cc))
		for i, val := range v.Cc {
			res.Cc[i] = val
		}
	}
	if v.Bcc != nil {
		res.Bcc = make([]string, len(v.Bcc))
		for i, val := range v.Bcc {
			res.Bcc[i] = val
		}
	}

	return res
}
