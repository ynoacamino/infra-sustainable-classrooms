// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing gRPC server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package server

import (
	"context"
	"errors"

	mailingpb "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/grpc/mailing/pb"
	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the mailingpb.MailingServer interface.
type Server struct {
	SendEmailH goagrpc.UnaryHandler
	mailingpb.UnimplementedMailingServer
}

// New instantiates the server struct with the mailing service endpoints.
func New(e *mailing.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		SendEmailH: NewSendEmailHandler(e.SendEmail, uh),
	}
}

// NewSendEmailHandler creates a gRPC handler which serves the "mailing"
// service "SendEmail" endpoint.
func NewSendEmailHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeSendEmailRequest, EncodeSendEmailResponse)
	}
	return h
}

// SendEmail implements the "SendEmail" method in mailingpb.MailingServer
// interface.
func (s *Server) SendEmail(ctx context.Context, message *mailingpb.SendEmailRequest) (*mailingpb.SendEmailResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "SendEmail")
	ctx = context.WithValue(ctx, goa.ServiceKey, "mailing")
	resp, err := s.SendEmailH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_input":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "email_send_failed":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			case "smtp_connection_failed":
				return nil, goagrpc.NewStatusError(codes.Unavailable, err, goagrpc.NewErrorResponse(err))
			case "service_unavailable":
				return nil, goagrpc.NewStatusError(codes.Unavailable, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*mailingpb.SendEmailResponse), nil
}
