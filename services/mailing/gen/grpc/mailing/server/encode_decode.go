// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing gRPC server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package server

import (
	"context"

	mailingpb "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/grpc/mailing/pb"
	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeSendEmailResponse encodes responses from the "mailing" service
// "SendEmail" endpoint.
func EncodeSendEmailResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*mailing.EmailResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("mailing", "SendEmail", "*mailing.EmailResponse", v)
	}
	resp := NewProtoSendEmailResponse(result)
	return resp, nil
}

// DecodeSendEmailRequest decodes requests sent to "mailing" service
// "SendEmail" endpoint.
func DecodeSendEmailRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *mailingpb.SendEmailRequest
		ok      bool
	)
	{
		if message, ok = v.(*mailingpb.SendEmailRequest); !ok {
			return nil, goagrpc.ErrInvalidType("mailing", "SendEmail", "*mailingpb.SendEmailRequest", v)
		}
		if err := ValidateSendEmailRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *mailing.SendEmailPayload
	{
		payload = NewSendEmailPayload(message)
	}
	return payload, nil
}
