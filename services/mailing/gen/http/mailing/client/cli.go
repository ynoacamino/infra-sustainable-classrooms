// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	"encoding/json"
	"fmt"

	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goa "goa.design/goa/v3/pkg"
)

// BuildSendEmailPayload builds the payload for the mailing SendEmail endpoint
// from CLI flags.
func BuildSendEmailPayload(mailingSendEmailBody string) (*mailing.SendEmailPayload, error) {
	var err error
	var body SendEmailRequestBody
	{
		err = json.Unmarshal([]byte(mailingSendEmailBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": {\n         \"bcc\": [\n            \"bcc@example.com\"\n         ],\n         \"body\": \"Hello! Welcome to our platform. We\\'re excited to have you on board.\",\n         \"cc\": [\n            \"cc@example.com\"\n         ],\n         \"is_html\": true,\n         \"subject\": \"Welcome to our platform!\",\n         \"to\": [\n            \"user@example.com\",\n            \"admin@example.com\"\n         ]\n      }\n   }'")
		}
		if body.Email == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
		}
		if body.Email != nil {
			if err2 := ValidateEmailMessageRequestBody(body.Email); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &mailing.SendEmailPayload{}
	if body.Email != nil {
		v.Email = marshalEmailMessageRequestBodyToMailingEmailMessage(body.Email)
	}

	return v, nil
}
