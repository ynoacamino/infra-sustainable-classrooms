// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goahttp "goa.design/goa/v3/http"
)

// BuildSendEmailRequest instantiates a HTTP request object with method and
// path set to call the "mailing" service "SendEmail" endpoint
func (c *Client) BuildSendEmailRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendEmailMailingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("mailing", "SendEmail", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendEmailRequest returns an encoder for requests sent to the mailing
// SendEmail server.
func EncodeSendEmailRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*mailing.SendEmailPayload)
		if !ok {
			return goahttp.ErrInvalidType("mailing", "SendEmail", "*mailing.SendEmailPayload", v)
		}
		body := NewSendEmailRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("mailing", "SendEmail", err)
		}
		return nil
	}
}

// DecodeSendEmailResponse returns a decoder for responses returned by the
// mailing SendEmail endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSendEmailResponse may return the following errors:
//   - "email_send_failed" (type mailing.EmailSendFailed): http.StatusInternalServerError
//   - "invalid_input" (type mailing.InvalidInput): http.StatusBadRequest
//   - "smtp_connection_failed" (type mailing.SMTPConnectionFailed): http.StatusServiceUnavailable
//   - "service_unavailable" (type mailing.ServiceUnavailable): http.StatusServiceUnavailable
//   - error: internal error
func DecodeSendEmailResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendEmailResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing", "SendEmail", err)
			}
			err = ValidateSendEmailResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("mailing", "SendEmail", err)
			}
			res := NewSendEmailEmailResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing", "SendEmail", err)
			}
			return nil, NewSendEmailEmailSendFailed(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("mailing", "SendEmail", err)
			}
			return nil, NewSendEmailInvalidInput(body)
		case http.StatusServiceUnavailable:
			en := resp.Header.Get("goa-error")
			switch en {
			case "smtp_connection_failed":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mailing", "SendEmail", err)
				}
				return nil, NewSendEmailSMTPConnectionFailed(body)
			case "service_unavailable":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("mailing", "SendEmail", err)
				}
				return nil, NewSendEmailServiceUnavailable(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("mailing", "SendEmail", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("mailing", "SendEmail", resp.StatusCode, string(body))
		}
	}
}

// marshalMailingEmailMessageToEmailMessageRequestBody builds a value of type
// *EmailMessageRequestBody from a value of type *mailing.EmailMessage.
func marshalMailingEmailMessageToEmailMessageRequestBody(v *mailing.EmailMessage) *EmailMessageRequestBody {
	res := &EmailMessageRequestBody{
		Subject: v.Subject,
		Body:    v.Body,
		IsHTML:  v.IsHTML,
	}
	if v.To != nil {
		res.To = make([]string, len(v.To))
		for i, val := range v.To {
			res.To[i] = val
		}
	} else {
		res.To = []string{}
	}
	if v.Cc != nil {
		res.Cc = make([]string, len(v.Cc))
		for i, val := range v.Cc {
			res.Cc[i] = val
		}
	}
	if v.Bcc != nil {
		res.Bcc = make([]string, len(v.Bcc))
		for i, val := range v.Bcc {
			res.Bcc[i] = val
		}
	}
	{
		var zero bool
		if res.IsHTML == zero {
			res.IsHTML = false
		}
	}

	return res
}

// marshalEmailMessageRequestBodyToMailingEmailMessage builds a value of type
// *mailing.EmailMessage from a value of type *EmailMessageRequestBody.
func marshalEmailMessageRequestBodyToMailingEmailMessage(v *EmailMessageRequestBody) *mailing.EmailMessage {
	res := &mailing.EmailMessage{
		Subject: v.Subject,
		Body:    v.Body,
		IsHTML:  v.IsHTML,
	}
	if v.To != nil {
		res.To = make([]string, len(v.To))
		for i, val := range v.To {
			res.To[i] = val
		}
	} else {
		res.To = []string{}
	}
	if v.Cc != nil {
		res.Cc = make([]string, len(v.Cc))
		for i, val := range v.Cc {
			res.Cc[i] = val
		}
	}
	if v.Bcc != nil {
		res.Bcc = make([]string, len(v.Bcc))
		for i, val := range v.Bcc {
			res.Bcc[i] = val
		}
	}
	{
		var zero bool
		if res.IsHTML == zero {
			res.IsHTML = false
		}
	}

	return res
}
