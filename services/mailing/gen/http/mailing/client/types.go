// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package client

import (
	"unicode/utf8"

	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goa "goa.design/goa/v3/pkg"
)

// SendEmailRequestBody is the type of the "mailing" service "SendEmail"
// endpoint HTTP request body.
type SendEmailRequestBody struct {
	// Email message to send
	Email *EmailMessageRequestBody `form:"email" json:"email" xml:"email"`
}

// SendEmailResponseBody is the type of the "mailing" service "SendEmail"
// endpoint HTTP response body.
type SendEmailResponseBody struct {
	// Whether the email was sent successfully
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Message ID from the SMTP server
	MessageID *string `form:"message_id,omitempty" json:"message_id,omitempty" xml:"message_id,omitempty"`
}

// EmailMessageRequestBody is used to define fields on request body types.
type EmailMessageRequestBody struct {
	// Recipient email addresses
	To []string `form:"to" json:"to" xml:"to"`
	// Carbon copy email addresses
	Cc []string `form:"cc,omitempty" json:"cc,omitempty" xml:"cc,omitempty"`
	// Blind carbon copy email addresses
	Bcc []string `form:"bcc,omitempty" json:"bcc,omitempty" xml:"bcc,omitempty"`
	// Email subject
	Subject string `form:"subject" json:"subject" xml:"subject"`
	// Email body content
	Body string `form:"body" json:"body" xml:"body"`
	// Whether the body content is HTML
	IsHTML bool `form:"is_html" json:"is_html" xml:"is_html"`
}

// NewSendEmailRequestBody builds the HTTP request body from the payload of the
// "SendEmail" endpoint of the "mailing" service.
func NewSendEmailRequestBody(p *mailing.SendEmailPayload) *SendEmailRequestBody {
	body := &SendEmailRequestBody{}
	if p.Email != nil {
		body.Email = marshalMailingEmailMessageToEmailMessageRequestBody(p.Email)
	}
	return body
}

// NewSendEmailEmailResponseOK builds a "mailing" service "SendEmail" endpoint
// result from a HTTP "OK" response.
func NewSendEmailEmailResponseOK(body *SendEmailResponseBody) *mailing.EmailResponse {
	v := &mailing.EmailResponse{
		Success:   *body.Success,
		Message:   *body.Message,
		MessageID: body.MessageID,
	}

	return v
}

// NewSendEmailEmailSendFailed builds a mailing service SendEmail endpoint
// email_send_failed error.
func NewSendEmailEmailSendFailed(body string) mailing.EmailSendFailed {
	v := mailing.EmailSendFailed(body)

	return v
}

// NewSendEmailInvalidInput builds a mailing service SendEmail endpoint
// invalid_input error.
func NewSendEmailInvalidInput(body string) mailing.InvalidInput {
	v := mailing.InvalidInput(body)

	return v
}

// NewSendEmailSMTPConnectionFailed builds a mailing service SendEmail endpoint
// smtp_connection_failed error.
func NewSendEmailSMTPConnectionFailed(body string) mailing.SMTPConnectionFailed {
	v := mailing.SMTPConnectionFailed(body)

	return v
}

// NewSendEmailServiceUnavailable builds a mailing service SendEmail endpoint
// service_unavailable error.
func NewSendEmailServiceUnavailable(body string) mailing.ServiceUnavailable {
	v := mailing.ServiceUnavailable(body)

	return v
}

// ValidateSendEmailResponseBody runs the validations defined on
// SendEmailResponseBody
func ValidateSendEmailResponseBody(body *SendEmailResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateEmailMessageRequestBody runs the validations defined on
// EmailMessageRequestBody
func ValidateEmailMessageRequestBody(body *EmailMessageRequestBody) (err error) {
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if len(body.To) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.to", body.To, len(body.To), 1, true))
	}
	if utf8.RuneCountInString(body.Subject) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject", body.Subject, utf8.RuneCountInString(body.Subject), 1, true))
	}
	if utf8.RuneCountInString(body.Subject) > 200 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.subject", body.Subject, utf8.RuneCountInString(body.Subject), 200, false))
	}
	if utf8.RuneCountInString(body.Body) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.body", body.Body, utf8.RuneCountInString(body.Body), 1, true))
	}
	return
}
