// Code generated by goa v3.21.1, DO NOT EDIT.
//
// mailing HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/design/api
// -o ./services/mailing/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	mailing "github.com/ynoacamino/infra-sustainable-classrooms/services/mailing/gen/mailing"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSendEmailResponse returns an encoder for responses returned by the
// mailing SendEmail endpoint.
func EncodeSendEmailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*mailing.EmailResponse)
		enc := encoder(ctx, w)
		body := NewSendEmailResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSendEmailRequest returns a decoder for requests sent to the mailing
// SendEmail endpoint.
func DecodeSendEmailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body SendEmailRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendEmailRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendEmailPayload(&body)

		return payload, nil
	}
}

// EncodeSendEmailError returns an encoder for errors returned by the SendEmail
// mailing endpoint.
func EncodeSendEmailError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "email_send_failed":
			var res mailing.EmailSendFailed
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "invalid_input":
			var res mailing.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "smtp_connection_failed":
			var res mailing.SMTPConnectionFailed
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		case "service_unavailable":
			var res mailing.ServiceUnavailable
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalEmailMessageRequestBodyToMailingEmailMessage builds a value of type
// *mailing.EmailMessage from a value of type *EmailMessageRequestBody.
func unmarshalEmailMessageRequestBodyToMailingEmailMessage(v *EmailMessageRequestBody) *mailing.EmailMessage {
	res := &mailing.EmailMessage{
		Subject: *v.Subject,
		Body:    *v.Body,
	}
	if v.IsHTML != nil {
		res.IsHTML = *v.IsHTML
	}
	res.To = make([]string, len(v.To))
	for i, val := range v.To {
		res.To[i] = val
	}
	if v.Cc != nil {
		res.Cc = make([]string, len(v.Cc))
		for i, val := range v.Cc {
			res.Cc[i] = val
		}
	}
	if v.Bcc != nil {
		res.Bcc = make([]string, len(v.Bcc))
		for i, val := range v.Bcc {
			res.Bcc[i] = val
		}
	}
	if v.IsHTML == nil {
		res.IsHTML = false
	}

	return res
}
