// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package knowledge

import (
	"context"
)

// Knowledge microservice for simple test forms
type Service interface {
	// Create a new test form
	CreateTest(context.Context, *CreateTestPayload) (res *SimpleResponse, err error)
	// Get my created tests
	GetMyTests(context.Context, *GetMyTestsPayload) (res *TestsResponse, err error)
	// Get a test by ID
	GetTestByID(context.Context, *GetTestByIDPayload) (res *TestResponse, err error)
	// Update test title
	UpdateTest(context.Context, *UpdateTestPayload) (res *SimpleResponse, err error)
	// Delete a test
	DeleteTest(context.Context, *DeleteTestPayload) (res *SimpleResponse, err error)
	// Get questions for a test
	GetTestQuestions(context.Context, *GetTestQuestionsPayload) (res *QuestionsResponse, err error)
	// Add a question to a test
	AddQuestion(context.Context, *AddQuestionPayload) (res *SimpleResponse, err error)
	// Get a question by ID
	GetQuestionByID(context.Context, *GetQuestionByIDPayload) (res *QuestionResponse, err error)
	// Update a question
	UpdateQuestion(context.Context, *UpdateQuestionPayload) (res *SimpleResponse, err error)
	// Delete a question
	DeleteQuestion(context.Context, *DeleteQuestionPayload) (res *SimpleResponse, err error)
	// Get available tests for students
	GetAvailableTests(context.Context, *GetAvailableTestsPayload) (res *TestsResponse, err error)
	// Get test form for taking
	GetTestForm(context.Context, *GetTestFormPayload) (res *FormResponse, err error)
	// Submit test answers
	SubmitTest(context.Context, *SubmitTestPayload) (res *SubmitResponse, err error)
	// Get my test submissions
	GetMySubmissions(context.Context, *GetMySubmissionsPayload) (res *SubmissionsResponse, err error)
	// Get a submission by ID
	GetSubmissionByID(context.Context, *GetSubmissionByIDPayload) (res *SubmissionResponse, err error)
	// Get detailed submission result
	GetSubmissionResult(context.Context, *GetSubmissionResultPayload) (res *SubmissionResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "knowledge"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "knowledge"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [16]string{"CreateTest", "GetMyTests", "GetTestById", "UpdateTest", "DeleteTest", "GetTestQuestions", "AddQuestion", "GetQuestionById", "UpdateQuestion", "DeleteQuestion", "GetAvailableTests", "GetTestForm", "SubmitTest", "GetMySubmissions", "GetSubmissionById", "GetSubmissionResult"}

// AddQuestionPayload is the payload type of the knowledge service AddQuestion
// method.
type AddQuestionPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// Question text
	QuestionText string
	// Option A
	OptionA string
	// Option B
	OptionB string
	// Option C
	OptionC string
	// Option D
	OptionD string
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int
}

// Answer submission
type Answer struct {
	// Question ID
	QuestionID int64
	// Selected answer (0=A, 1=B, 2=C, 3=D)
	SelectedAnswer int
}

// CreateTestPayload is the payload type of the knowledge service CreateTest
// method.
type CreateTestPayload struct {
	// Session token
	SessionToken string
	// Test title
	Title string
}

// DeleteQuestionPayload is the payload type of the knowledge service
// DeleteQuestion method.
type DeleteQuestionPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// Question ID
	QuestionID int64
}

// DeleteTestPayload is the payload type of the knowledge service DeleteTest
// method.
type DeleteTestPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
}

// FormResponse is the result type of the knowledge service GetTestForm method.
type FormResponse struct {
	// Test info
	Test *Test
	// Questions
	Questions []*QuestionForm
}

// GetAvailableTestsPayload is the payload type of the knowledge service
// GetAvailableTests method.
type GetAvailableTestsPayload struct {
	// Session token
	SessionToken string
}

// GetMySubmissionsPayload is the payload type of the knowledge service
// GetMySubmissions method.
type GetMySubmissionsPayload struct {
	// Session token
	SessionToken string
}

// GetMyTestsPayload is the payload type of the knowledge service GetMyTests
// method.
type GetMyTestsPayload struct {
	// Session token
	SessionToken string
}

// GetQuestionByIDPayload is the payload type of the knowledge service
// GetQuestionById method.
type GetQuestionByIDPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// Question ID
	QuestionID int64
}

// GetSubmissionByIDPayload is the payload type of the knowledge service
// GetSubmissionById method.
type GetSubmissionByIDPayload struct {
	// Session token
	SessionToken string
	// Submission ID
	SubmissionID int64
}

// GetSubmissionResultPayload is the payload type of the knowledge service
// GetSubmissionResult method.
type GetSubmissionResultPayload struct {
	// Session token
	SessionToken string
	// Submission ID
	SubmissionID int64
}

// GetTestByIDPayload is the payload type of the knowledge service GetTestById
// method.
type GetTestByIDPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
}

// GetTestFormPayload is the payload type of the knowledge service GetTestForm
// method.
type GetTestFormPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
}

// GetTestQuestionsPayload is the payload type of the knowledge service
// GetTestQuestions method.
type GetTestQuestionsPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
}

// Question information
type Question struct {
	// Question ID
	ID int64
	// Test ID
	TestID int64
	// Question text
	QuestionText string
	// Option A
	OptionA string
	// Option B
	OptionB string
	// Option C
	OptionC string
	// Option D
	OptionD string
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int
	// Question order
	QuestionOrder int
}

// Question for form taking (without correct answer)
type QuestionForm struct {
	// Question ID
	ID int64
	// Question text
	QuestionText string
	// Option A
	OptionA string
	// Option B
	OptionB string
	// Option C
	OptionC string
	// Option D
	OptionD string
	// Question order
	QuestionOrder int
}

// QuestionResponse is the result type of the knowledge service GetQuestionById
// method.
type QuestionResponse struct {
	// Question information
	Question *Question
}

// Question result with user answer
type QuestionResult struct {
	// Question info
	Question *Question
	// User selected answer
	SelectedAnswer int
	// Whether answer was correct
	IsCorrect bool
}

// QuestionsResponse is the result type of the knowledge service
// GetTestQuestions method.
type QuestionsResponse struct {
	// Questions
	Questions []*Question
}

// SimpleResponse is the result type of the knowledge service CreateTest method.
type SimpleResponse struct {
	// Operation success status
	Success bool
	// Response message
	Message string
}

// Test submission
type Submission struct {
	// Submission ID
	ID int64
	// Test ID
	TestID int64
	// Test title
	TestTitle string
	// Score percentage
	Score float64
	// Submission timestamp
	SubmittedAt int64
}

// SubmissionResponse is the result type of the knowledge service
// GetSubmissionById method.
type SubmissionResponse struct {
	// Submission information
	Submission *Submission
}

// SubmissionResult is the result type of the knowledge service
// GetSubmissionResult method.
type SubmissionResult struct {
	// Submission info
	Submission *Submission
	// Question results
	Questions []*QuestionResult
}

// SubmissionsResponse is the result type of the knowledge service
// GetMySubmissions method.
type SubmissionsResponse struct {
	// Submissions
	Submissions []*Submission
}

// SubmitResponse is the result type of the knowledge service SubmitTest method.
type SubmitResponse struct {
	// Success status
	Success bool
	// Response message
	Message string
	// Submission ID
	SubmissionID int64
	// Score percentage
	Score float64
}

// SubmitTestPayload is the payload type of the knowledge service SubmitTest
// method.
type SubmitTestPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// Answer submissions
	Answers []*Answer
}

// Test/Form information
type Test struct {
	// Test ID
	ID int64
	// Test title
	Title string
	// Creator user ID
	CreatedBy int64
	// Creation timestamp
	CreatedAt int64
	// Number of questions
	QuestionCount *int
}

// TestResponse is the result type of the knowledge service GetTestById method.
type TestResponse struct {
	// Test information
	Test *Test
}

// TestsResponse is the result type of the knowledge service GetMyTests method.
type TestsResponse struct {
	// Tests
	Tests []*Test
}

// UpdateQuestionPayload is the payload type of the knowledge service
// UpdateQuestion method.
type UpdateQuestionPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// Question ID
	QuestionID int64
	// Question text
	QuestionText string
	// Option A
	OptionA string
	// Option B
	OptionB string
	// Option C
	OptionC string
	// Option D
	OptionD string
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int
}

// UpdateTestPayload is the payload type of the knowledge service UpdateTest
// method.
type UpdateTestPayload struct {
	// Session token
	SessionToken string
	// Test ID
	TestID int64
	// New title
	Title string
}

// Invalid input
type InvalidInput string

// Question not found
type QuestionNotFound string

// Submission not found
type SubmissionNotFound string

// Test already submitted by user
type TestAlreadySubmitted string

// Test not found
type TestNotFound string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e QuestionNotFound) Error() string {
	return "Question not found"
}

// ErrorName returns "question_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e QuestionNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "question_not_found".
func (e QuestionNotFound) GoaErrorName() string {
	return "question_not_found"
}

// Error returns an error description.
func (e SubmissionNotFound) Error() string {
	return "Submission not found"
}

// ErrorName returns "submission_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e SubmissionNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "submission_not_found".
func (e SubmissionNotFound) GoaErrorName() string {
	return "submission_not_found"
}

// Error returns an error description.
func (e TestAlreadySubmitted) Error() string {
	return "Test already submitted by user"
}

// ErrorName returns "test_already_submitted".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e TestAlreadySubmitted) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "test_already_submitted".
func (e TestAlreadySubmitted) GoaErrorName() string {
	return "test_already_submitted"
}

// Error returns an error description.
func (e TestNotFound) Error() string {
	return "Test not found"
}

// ErrorName returns "test_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e TestNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "test_not_found".
func (e TestNotFound) GoaErrorName() string {
	return "test_not_found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
