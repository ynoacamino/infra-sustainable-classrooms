// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge endpoints
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package knowledge

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "knowledge" service endpoints.
type Endpoints struct {
	CreateTest          goa.Endpoint
	GetMyTests          goa.Endpoint
	GetTestByID         goa.Endpoint
	UpdateTest          goa.Endpoint
	DeleteTest          goa.Endpoint
	GetTestQuestions    goa.Endpoint
	AddQuestion         goa.Endpoint
	GetQuestionByID     goa.Endpoint
	UpdateQuestion      goa.Endpoint
	DeleteQuestion      goa.Endpoint
	GetAvailableTests   goa.Endpoint
	GetTestForm         goa.Endpoint
	SubmitTest          goa.Endpoint
	GetMySubmissions    goa.Endpoint
	GetSubmissionByID   goa.Endpoint
	GetSubmissionResult goa.Endpoint
}

// NewEndpoints wraps the methods of the "knowledge" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		CreateTest:          NewCreateTestEndpoint(s),
		GetMyTests:          NewGetMyTestsEndpoint(s),
		GetTestByID:         NewGetTestByIDEndpoint(s),
		UpdateTest:          NewUpdateTestEndpoint(s),
		DeleteTest:          NewDeleteTestEndpoint(s),
		GetTestQuestions:    NewGetTestQuestionsEndpoint(s),
		AddQuestion:         NewAddQuestionEndpoint(s),
		GetQuestionByID:     NewGetQuestionByIDEndpoint(s),
		UpdateQuestion:      NewUpdateQuestionEndpoint(s),
		DeleteQuestion:      NewDeleteQuestionEndpoint(s),
		GetAvailableTests:   NewGetAvailableTestsEndpoint(s),
		GetTestForm:         NewGetTestFormEndpoint(s),
		SubmitTest:          NewSubmitTestEndpoint(s),
		GetMySubmissions:    NewGetMySubmissionsEndpoint(s),
		GetSubmissionByID:   NewGetSubmissionByIDEndpoint(s),
		GetSubmissionResult: NewGetSubmissionResultEndpoint(s),
	}
}

// Use applies the given middleware to all the "knowledge" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateTest = m(e.CreateTest)
	e.GetMyTests = m(e.GetMyTests)
	e.GetTestByID = m(e.GetTestByID)
	e.UpdateTest = m(e.UpdateTest)
	e.DeleteTest = m(e.DeleteTest)
	e.GetTestQuestions = m(e.GetTestQuestions)
	e.AddQuestion = m(e.AddQuestion)
	e.GetQuestionByID = m(e.GetQuestionByID)
	e.UpdateQuestion = m(e.UpdateQuestion)
	e.DeleteQuestion = m(e.DeleteQuestion)
	e.GetAvailableTests = m(e.GetAvailableTests)
	e.GetTestForm = m(e.GetTestForm)
	e.SubmitTest = m(e.SubmitTest)
	e.GetMySubmissions = m(e.GetMySubmissions)
	e.GetSubmissionByID = m(e.GetSubmissionByID)
	e.GetSubmissionResult = m(e.GetSubmissionResult)
}

// NewCreateTestEndpoint returns an endpoint function that calls the method
// "CreateTest" of service "knowledge".
func NewCreateTestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateTestPayload)
		return s.CreateTest(ctx, p)
	}
}

// NewGetMyTestsEndpoint returns an endpoint function that calls the method
// "GetMyTests" of service "knowledge".
func NewGetMyTestsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMyTestsPayload)
		return s.GetMyTests(ctx, p)
	}
}

// NewGetTestByIDEndpoint returns an endpoint function that calls the method
// "GetTestById" of service "knowledge".
func NewGetTestByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTestByIDPayload)
		return s.GetTestByID(ctx, p)
	}
}

// NewUpdateTestEndpoint returns an endpoint function that calls the method
// "UpdateTest" of service "knowledge".
func NewUpdateTestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateTestPayload)
		return s.UpdateTest(ctx, p)
	}
}

// NewDeleteTestEndpoint returns an endpoint function that calls the method
// "DeleteTest" of service "knowledge".
func NewDeleteTestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteTestPayload)
		return s.DeleteTest(ctx, p)
	}
}

// NewGetTestQuestionsEndpoint returns an endpoint function that calls the
// method "GetTestQuestions" of service "knowledge".
func NewGetTestQuestionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTestQuestionsPayload)
		return s.GetTestQuestions(ctx, p)
	}
}

// NewAddQuestionEndpoint returns an endpoint function that calls the method
// "AddQuestion" of service "knowledge".
func NewAddQuestionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddQuestionPayload)
		return s.AddQuestion(ctx, p)
	}
}

// NewGetQuestionByIDEndpoint returns an endpoint function that calls the
// method "GetQuestionById" of service "knowledge".
func NewGetQuestionByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetQuestionByIDPayload)
		return s.GetQuestionByID(ctx, p)
	}
}

// NewUpdateQuestionEndpoint returns an endpoint function that calls the method
// "UpdateQuestion" of service "knowledge".
func NewUpdateQuestionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateQuestionPayload)
		return s.UpdateQuestion(ctx, p)
	}
}

// NewDeleteQuestionEndpoint returns an endpoint function that calls the method
// "DeleteQuestion" of service "knowledge".
func NewDeleteQuestionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteQuestionPayload)
		return s.DeleteQuestion(ctx, p)
	}
}

// NewGetAvailableTestsEndpoint returns an endpoint function that calls the
// method "GetAvailableTests" of service "knowledge".
func NewGetAvailableTestsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetAvailableTestsPayload)
		return s.GetAvailableTests(ctx, p)
	}
}

// NewGetTestFormEndpoint returns an endpoint function that calls the method
// "GetTestForm" of service "knowledge".
func NewGetTestFormEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTestFormPayload)
		return s.GetTestForm(ctx, p)
	}
}

// NewSubmitTestEndpoint returns an endpoint function that calls the method
// "SubmitTest" of service "knowledge".
func NewSubmitTestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SubmitTestPayload)
		return s.SubmitTest(ctx, p)
	}
}

// NewGetMySubmissionsEndpoint returns an endpoint function that calls the
// method "GetMySubmissions" of service "knowledge".
func NewGetMySubmissionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetMySubmissionsPayload)
		return s.GetMySubmissions(ctx, p)
	}
}

// NewGetSubmissionByIDEndpoint returns an endpoint function that calls the
// method "GetSubmissionById" of service "knowledge".
func NewGetSubmissionByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSubmissionByIDPayload)
		return s.GetSubmissionByID(ctx, p)
	}
}

// NewGetSubmissionResultEndpoint returns an endpoint function that calls the
// method "GetSubmissionResult" of service "knowledge".
func NewGetSubmissionResultEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSubmissionResultPayload)
		return s.GetSubmissionResult(ctx, p)
	}
}
