// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tests.sql

package knowledgedb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTest = `-- name: CreateTest :exec

INSERT INTO tests (title, created_by) VALUES ($1, $2)
`

type CreateTestParams struct {
	Title     string
	CreatedBy int64
}

// Tests queries - simplified
func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) error {
	_, err := q.db.Exec(ctx, createTest, arg.Title, arg.CreatedBy)
	return err
}

const deleteTest = `-- name: DeleteTest :exec
DELETE FROM tests WHERE id = $1
`

func (q *Queries) DeleteTest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTest, id)
	return err
}

const getAvailableTests = `-- name: GetAvailableTests :many
SELECT t.id, t.title, t.created_by, t.created_at, 
       (SELECT COUNT(*) FROM questions WHERE test_id = t.id) as question_count
FROM tests t 
WHERE t.created_by != $1 
  AND NOT EXISTS (SELECT 1 FROM test_submissions WHERE test_id = t.id AND user_id = $1)
ORDER BY t.created_at DESC
`

type GetAvailableTestsRow struct {
	ID            int64
	Title         string
	CreatedBy     int64
	CreatedAt     pgtype.Timestamptz
	QuestionCount int64
}

func (q *Queries) GetAvailableTests(ctx context.Context, createdBy int64) ([]GetAvailableTestsRow, error) {
	rows, err := q.db.Query(ctx, getAvailableTests, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAvailableTestsRow
	for rows.Next() {
		var i GetAvailableTestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.QuestionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMyTests = `-- name: GetMyTests :many
SELECT id, title, created_by, created_at FROM tests WHERE created_by = $1 ORDER BY created_at DESC
`

func (q *Queries) GetMyTests(ctx context.Context, createdBy int64) ([]Test, error) {
	rows, err := q.db.Query(ctx, getMyTests, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestById = `-- name: GetTestById :one
SELECT id, title, created_by, created_at FROM tests WHERE id = $1
`

func (q *Queries) GetTestById(ctx context.Context, id int64) (Test, error) {
	row := q.db.QueryRow(ctx, getTestById, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updateTest = `-- name: UpdateTest :exec
UPDATE tests SET title = $2 WHERE id = $1
`

type UpdateTestParams struct {
	ID    int64
	Title string
}

func (q *Queries) UpdateTest(ctx context.Context, arg UpdateTestParams) error {
	_, err := q.db.Exec(ctx, updateTest, arg.ID, arg.Title)
	return err
}
