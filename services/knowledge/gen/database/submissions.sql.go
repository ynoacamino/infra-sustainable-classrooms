// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: submissions.sql

package knowledgedb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserCompletedTest = `-- name: CheckUserCompletedTest :one
SELECT EXISTS(
    SELECT 1 FROM test_submissions 
    WHERE user_id = $1 AND test_id = $2
)
`

type CheckUserCompletedTestParams struct {
	UserID int64
	TestID int64
}

func (q *Queries) CheckUserCompletedTest(ctx context.Context, arg CheckUserCompletedTestParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserCompletedTest, arg.UserID, arg.TestID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createSubmission = `-- name: CreateSubmission :one

INSERT INTO test_submissions (test_id, user_id, score)
VALUES ($1, $2, $3)
RETURNING id, test_id, user_id, score, submitted_at
`

type CreateSubmissionParams struct {
	TestID int64
	UserID int64
	Score  pgtype.Numeric
}

// Submissions queries - simplified
func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (TestSubmission, error) {
	row := q.db.QueryRow(ctx, createSubmission, arg.TestID, arg.UserID, arg.Score)
	var i TestSubmission
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.UserID,
		&i.Score,
		&i.SubmittedAt,
	)
	return i, err
}

const getSubmissionById = `-- name: GetSubmissionById :one
SELECT id, test_id, user_id, score, submitted_at FROM test_submissions WHERE id = $1
`

func (q *Queries) GetSubmissionById(ctx context.Context, id int64) (TestSubmission, error) {
	row := q.db.QueryRow(ctx, getSubmissionById, id)
	var i TestSubmission
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.UserID,
		&i.Score,
		&i.SubmittedAt,
	)
	return i, err
}

const getUserSubmissions = `-- name: GetUserSubmissions :many
SELECT 
    ts.id, ts.test_id, ts.user_id, ts.score, ts.submitted_at,
    t.title as test_title
FROM test_submissions ts
JOIN tests t ON ts.test_id = t.id
WHERE ts.user_id = $1
ORDER BY ts.submitted_at DESC
`

type GetUserSubmissionsRow struct {
	ID          int64
	TestID      int64
	UserID      int64
	Score       pgtype.Numeric
	SubmittedAt pgtype.Timestamptz
	TestTitle   string
}

func (q *Queries) GetUserSubmissions(ctx context.Context, userID int64) ([]GetUserSubmissionsRow, error) {
	rows, err := q.db.Query(ctx, getUserSubmissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSubmissionsRow
	for rows.Next() {
		var i GetUserSubmissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.UserID,
			&i.Score,
			&i.SubmittedAt,
			&i.TestTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
