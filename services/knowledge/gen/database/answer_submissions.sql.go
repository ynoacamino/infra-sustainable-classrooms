// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: answer_submissions.sql

package knowledgedb

import (
	"context"
)

const createAnswerSubmission = `-- name: CreateAnswerSubmission :exec

INSERT INTO answer_submissions (
    submission_id,
    question_id,
    selected_answer,
    is_correct
) VALUES ($1, $2, $3, $4)
`

type CreateAnswerSubmissionParams struct {
	SubmissionID   int64
	QuestionID     int64
	SelectedAnswer int32
	IsCorrect      bool
}

// Answer submissions queries - simplified
func (q *Queries) CreateAnswerSubmission(ctx context.Context, arg CreateAnswerSubmissionParams) error {
	_, err := q.db.Exec(ctx, createAnswerSubmission,
		arg.SubmissionID,
		arg.QuestionID,
		arg.SelectedAnswer,
		arg.IsCorrect,
	)
	return err
}

const getAnswersBySubmission = `-- name: GetAnswersBySubmission :many
SELECT 
    a.id, a.submission_id, a.question_id, a.selected_answer, a.is_correct,
    q.question_text,
    q.option_a,
    q.option_b,
    q.option_c,
    q.option_d,
    q.correct_answer
FROM answer_submissions a
JOIN questions q ON a.question_id = q.id
WHERE a.submission_id = $1
ORDER BY q.question_order ASC
`

type GetAnswersBySubmissionRow struct {
	ID             int64
	SubmissionID   int64
	QuestionID     int64
	SelectedAnswer int32
	IsCorrect      bool
	QuestionText   string
	OptionA        string
	OptionB        string
	OptionC        string
	OptionD        string
	CorrectAnswer  int32
}

func (q *Queries) GetAnswersBySubmission(ctx context.Context, submissionID int64) ([]GetAnswersBySubmissionRow, error) {
	rows, err := q.db.Query(ctx, getAnswersBySubmission, submissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnswersBySubmissionRow
	for rows.Next() {
		var i GetAnswersBySubmissionRow
		if err := rows.Scan(
			&i.ID,
			&i.SubmissionID,
			&i.QuestionID,
			&i.SelectedAnswer,
			&i.IsCorrect,
			&i.QuestionText,
			&i.OptionA,
			&i.OptionB,
			&i.OptionC,
			&i.OptionD,
			&i.CorrectAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
