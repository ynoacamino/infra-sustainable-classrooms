// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package server

import (
	knowledge "github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/gen/knowledge"
	goa "goa.design/goa/v3/pkg"
)

// CreateTestRequestBody is the type of the "knowledge" service "CreateTest"
// endpoint HTTP request body.
type CreateTestRequestBody struct {
	// Test title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// UpdateTestRequestBody is the type of the "knowledge" service "UpdateTest"
// endpoint HTTP request body.
type UpdateTestRequestBody struct {
	// New title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// AddQuestionRequestBody is the type of the "knowledge" service "AddQuestion"
// endpoint HTTP request body.
type AddQuestionRequestBody struct {
	// Question text
	QuestionText *string `form:"question_text,omitempty" json:"question_text,omitempty" xml:"question_text,omitempty"`
	// Option A
	OptionA *string `form:"option_a,omitempty" json:"option_a,omitempty" xml:"option_a,omitempty"`
	// Option B
	OptionB *string `form:"option_b,omitempty" json:"option_b,omitempty" xml:"option_b,omitempty"`
	// Option C
	OptionC *string `form:"option_c,omitempty" json:"option_c,omitempty" xml:"option_c,omitempty"`
	// Option D
	OptionD *string `form:"option_d,omitempty" json:"option_d,omitempty" xml:"option_d,omitempty"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer *int `form:"correct_answer,omitempty" json:"correct_answer,omitempty" xml:"correct_answer,omitempty"`
}

// UpdateQuestionRequestBody is the type of the "knowledge" service
// "UpdateQuestion" endpoint HTTP request body.
type UpdateQuestionRequestBody struct {
	// Question text
	QuestionText *string `form:"question_text,omitempty" json:"question_text,omitempty" xml:"question_text,omitempty"`
	// Option A
	OptionA *string `form:"option_a,omitempty" json:"option_a,omitempty" xml:"option_a,omitempty"`
	// Option B
	OptionB *string `form:"option_b,omitempty" json:"option_b,omitempty" xml:"option_b,omitempty"`
	// Option C
	OptionC *string `form:"option_c,omitempty" json:"option_c,omitempty" xml:"option_c,omitempty"`
	// Option D
	OptionD *string `form:"option_d,omitempty" json:"option_d,omitempty" xml:"option_d,omitempty"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer *int `form:"correct_answer,omitempty" json:"correct_answer,omitempty" xml:"correct_answer,omitempty"`
}

// SubmitTestRequestBody is the type of the "knowledge" service "SubmitTest"
// endpoint HTTP request body.
type SubmitTestRequestBody struct {
	// Answer submissions
	Answers []*AnswerRequestBody `form:"answers,omitempty" json:"answers,omitempty" xml:"answers,omitempty"`
}

// CreateTestResponseBody is the type of the "knowledge" service "CreateTest"
// endpoint HTTP response body.
type CreateTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetMyTestsResponseBody is the type of the "knowledge" service "GetMyTests"
// endpoint HTTP response body.
type GetMyTestsResponseBody struct {
	// Tests
	Tests []*TestResponseBody `form:"tests" json:"tests" xml:"tests"`
}

// GetTestByIDResponseBody is the type of the "knowledge" service "GetTestById"
// endpoint HTTP response body.
type GetTestByIDResponseBody struct {
	// Test information
	Test *TestResponseBody `form:"test" json:"test" xml:"test"`
}

// UpdateTestResponseBody is the type of the "knowledge" service "UpdateTest"
// endpoint HTTP response body.
type UpdateTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteTestResponseBody is the type of the "knowledge" service "DeleteTest"
// endpoint HTTP response body.
type DeleteTestResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetTestQuestionsResponseBody is the type of the "knowledge" service
// "GetTestQuestions" endpoint HTTP response body.
type GetTestQuestionsResponseBody struct {
	// Questions
	Questions []*QuestionResponseBody `form:"questions" json:"questions" xml:"questions"`
}

// AddQuestionResponseBody is the type of the "knowledge" service "AddQuestion"
// endpoint HTTP response body.
type AddQuestionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetQuestionByIDResponseBody is the type of the "knowledge" service
// "GetQuestionById" endpoint HTTP response body.
type GetQuestionByIDResponseBody struct {
	// Question information
	Question *QuestionResponseBody `form:"question" json:"question" xml:"question"`
}

// UpdateQuestionResponseBody is the type of the "knowledge" service
// "UpdateQuestion" endpoint HTTP response body.
type UpdateQuestionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteQuestionResponseBody is the type of the "knowledge" service
// "DeleteQuestion" endpoint HTTP response body.
type DeleteQuestionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetAvailableTestsResponseBody is the type of the "knowledge" service
// "GetAvailableTests" endpoint HTTP response body.
type GetAvailableTestsResponseBody struct {
	// Tests
	Tests []*TestResponseBody `form:"tests" json:"tests" xml:"tests"`
}

// GetTestFormResponseBody is the type of the "knowledge" service "GetTestForm"
// endpoint HTTP response body.
type GetTestFormResponseBody struct {
	// Test info
	Test *TestResponseBody `form:"test" json:"test" xml:"test"`
	// Questions
	Questions []*QuestionFormResponseBody `form:"questions" json:"questions" xml:"questions"`
}

// SubmitTestResponseBody is the type of the "knowledge" service "SubmitTest"
// endpoint HTTP response body.
type SubmitTestResponseBody struct {
	// Success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Submission ID
	SubmissionID int64 `form:"submission_id" json:"submission_id" xml:"submission_id"`
	// Score percentage
	Score float64 `form:"score" json:"score" xml:"score"`
}

// GetMySubmissionsResponseBody is the type of the "knowledge" service
// "GetMySubmissions" endpoint HTTP response body.
type GetMySubmissionsResponseBody struct {
	// Submissions
	Submissions []*SubmissionResponseBody `form:"submissions" json:"submissions" xml:"submissions"`
}

// GetSubmissionByIDResponseBody is the type of the "knowledge" service
// "GetSubmissionById" endpoint HTTP response body.
type GetSubmissionByIDResponseBody struct {
	// Submission information
	Submission *SubmissionResponseBody `form:"submission" json:"submission" xml:"submission"`
}

// GetSubmissionResultResponseBody is the type of the "knowledge" service
// "GetSubmissionResult" endpoint HTTP response body.
type GetSubmissionResultResponseBody struct {
	// Submission info
	Submission *SubmissionResponseBody `form:"submission" json:"submission" xml:"submission"`
	// Question results
	Questions []*QuestionResultResponseBody `form:"questions" json:"questions" xml:"questions"`
}

// TestResponseBody is used to define fields on response body types.
type TestResponseBody struct {
	// Test ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Test title
	Title string `form:"title" json:"title" xml:"title"`
	// Creator user ID
	CreatedBy int64 `form:"created_by" json:"created_by" xml:"created_by"`
	// Creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Number of questions
	QuestionCount *int `form:"question_count,omitempty" json:"question_count,omitempty" xml:"question_count,omitempty"`
}

// QuestionResponseBody is used to define fields on response body types.
type QuestionResponseBody struct {
	// Question ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Test ID
	TestID int64 `form:"test_id" json:"test_id" xml:"test_id"`
	// Question text
	QuestionText string `form:"question_text" json:"question_text" xml:"question_text"`
	// Option A
	OptionA string `form:"option_a" json:"option_a" xml:"option_a"`
	// Option B
	OptionB string `form:"option_b" json:"option_b" xml:"option_b"`
	// Option C
	OptionC string `form:"option_c" json:"option_c" xml:"option_c"`
	// Option D
	OptionD string `form:"option_d" json:"option_d" xml:"option_d"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int `form:"correct_answer" json:"correct_answer" xml:"correct_answer"`
	// Question order
	QuestionOrder int `form:"question_order" json:"question_order" xml:"question_order"`
}

// QuestionFormResponseBody is used to define fields on response body types.
type QuestionFormResponseBody struct {
	// Question ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Question text
	QuestionText string `form:"question_text" json:"question_text" xml:"question_text"`
	// Option A
	OptionA string `form:"option_a" json:"option_a" xml:"option_a"`
	// Option B
	OptionB string `form:"option_b" json:"option_b" xml:"option_b"`
	// Option C
	OptionC string `form:"option_c" json:"option_c" xml:"option_c"`
	// Option D
	OptionD string `form:"option_d" json:"option_d" xml:"option_d"`
	// Question order
	QuestionOrder int `form:"question_order" json:"question_order" xml:"question_order"`
}

// SubmissionResponseBody is used to define fields on response body types.
type SubmissionResponseBody struct {
	// Submission ID
	ID int64 `form:"id" json:"id" xml:"id"`
	// Test ID
	TestID int64 `form:"test_id" json:"test_id" xml:"test_id"`
	// Test title
	TestTitle string `form:"test_title" json:"test_title" xml:"test_title"`
	// Score percentage
	Score float64 `form:"score" json:"score" xml:"score"`
	// Submission timestamp
	SubmittedAt int64 `form:"submitted_at" json:"submitted_at" xml:"submitted_at"`
}

// QuestionResultResponseBody is used to define fields on response body types.
type QuestionResultResponseBody struct {
	// Question info
	Question *QuestionResponseBody `form:"question" json:"question" xml:"question"`
	// User selected answer
	SelectedAnswer int `form:"selected_answer" json:"selected_answer" xml:"selected_answer"`
	// Whether answer was correct
	IsCorrect bool `form:"is_correct" json:"is_correct" xml:"is_correct"`
}

// AnswerRequestBody is used to define fields on request body types.
type AnswerRequestBody struct {
	// Question ID
	QuestionID *int64 `form:"question_id,omitempty" json:"question_id,omitempty" xml:"question_id,omitempty"`
	// Selected answer (0=A, 1=B, 2=C, 3=D)
	SelectedAnswer *int `form:"selected_answer,omitempty" json:"selected_answer,omitempty" xml:"selected_answer,omitempty"`
}

// NewCreateTestResponseBody builds the HTTP response body from the result of
// the "CreateTest" endpoint of the "knowledge" service.
func NewCreateTestResponseBody(res *knowledge.SimpleResponse) *CreateTestResponseBody {
	body := &CreateTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetMyTestsResponseBody builds the HTTP response body from the result of
// the "GetMyTests" endpoint of the "knowledge" service.
func NewGetMyTestsResponseBody(res *knowledge.TestsResponse) *GetMyTestsResponseBody {
	body := &GetMyTestsResponseBody{}
	if res.Tests != nil {
		body.Tests = make([]*TestResponseBody, len(res.Tests))
		for i, val := range res.Tests {
			body.Tests[i] = marshalKnowledgeTestToTestResponseBody(val)
		}
	} else {
		body.Tests = []*TestResponseBody{}
	}
	return body
}

// NewGetTestByIDResponseBody builds the HTTP response body from the result of
// the "GetTestById" endpoint of the "knowledge" service.
func NewGetTestByIDResponseBody(res *knowledge.TestResponse) *GetTestByIDResponseBody {
	body := &GetTestByIDResponseBody{}
	if res.Test != nil {
		body.Test = marshalKnowledgeTestToTestResponseBody(res.Test)
	}
	return body
}

// NewUpdateTestResponseBody builds the HTTP response body from the result of
// the "UpdateTest" endpoint of the "knowledge" service.
func NewUpdateTestResponseBody(res *knowledge.SimpleResponse) *UpdateTestResponseBody {
	body := &UpdateTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteTestResponseBody builds the HTTP response body from the result of
// the "DeleteTest" endpoint of the "knowledge" service.
func NewDeleteTestResponseBody(res *knowledge.SimpleResponse) *DeleteTestResponseBody {
	body := &DeleteTestResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetTestQuestionsResponseBody builds the HTTP response body from the
// result of the "GetTestQuestions" endpoint of the "knowledge" service.
func NewGetTestQuestionsResponseBody(res *knowledge.QuestionsResponse) *GetTestQuestionsResponseBody {
	body := &GetTestQuestionsResponseBody{}
	if res.Questions != nil {
		body.Questions = make([]*QuestionResponseBody, len(res.Questions))
		for i, val := range res.Questions {
			body.Questions[i] = marshalKnowledgeQuestionToQuestionResponseBody(val)
		}
	} else {
		body.Questions = []*QuestionResponseBody{}
	}
	return body
}

// NewAddQuestionResponseBody builds the HTTP response body from the result of
// the "AddQuestion" endpoint of the "knowledge" service.
func NewAddQuestionResponseBody(res *knowledge.SimpleResponse) *AddQuestionResponseBody {
	body := &AddQuestionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetQuestionByIDResponseBody builds the HTTP response body from the result
// of the "GetQuestionById" endpoint of the "knowledge" service.
func NewGetQuestionByIDResponseBody(res *knowledge.QuestionResponse) *GetQuestionByIDResponseBody {
	body := &GetQuestionByIDResponseBody{}
	if res.Question != nil {
		body.Question = marshalKnowledgeQuestionToQuestionResponseBody(res.Question)
	}
	return body
}

// NewUpdateQuestionResponseBody builds the HTTP response body from the result
// of the "UpdateQuestion" endpoint of the "knowledge" service.
func NewUpdateQuestionResponseBody(res *knowledge.SimpleResponse) *UpdateQuestionResponseBody {
	body := &UpdateQuestionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteQuestionResponseBody builds the HTTP response body from the result
// of the "DeleteQuestion" endpoint of the "knowledge" service.
func NewDeleteQuestionResponseBody(res *knowledge.SimpleResponse) *DeleteQuestionResponseBody {
	body := &DeleteQuestionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetAvailableTestsResponseBody builds the HTTP response body from the
// result of the "GetAvailableTests" endpoint of the "knowledge" service.
func NewGetAvailableTestsResponseBody(res *knowledge.TestsResponse) *GetAvailableTestsResponseBody {
	body := &GetAvailableTestsResponseBody{}
	if res.Tests != nil {
		body.Tests = make([]*TestResponseBody, len(res.Tests))
		for i, val := range res.Tests {
			body.Tests[i] = marshalKnowledgeTestToTestResponseBody(val)
		}
	} else {
		body.Tests = []*TestResponseBody{}
	}
	return body
}

// NewGetTestFormResponseBody builds the HTTP response body from the result of
// the "GetTestForm" endpoint of the "knowledge" service.
func NewGetTestFormResponseBody(res *knowledge.FormResponse) *GetTestFormResponseBody {
	body := &GetTestFormResponseBody{}
	if res.Test != nil {
		body.Test = marshalKnowledgeTestToTestResponseBody(res.Test)
	}
	if res.Questions != nil {
		body.Questions = make([]*QuestionFormResponseBody, len(res.Questions))
		for i, val := range res.Questions {
			body.Questions[i] = marshalKnowledgeQuestionFormToQuestionFormResponseBody(val)
		}
	} else {
		body.Questions = []*QuestionFormResponseBody{}
	}
	return body
}

// NewSubmitTestResponseBody builds the HTTP response body from the result of
// the "SubmitTest" endpoint of the "knowledge" service.
func NewSubmitTestResponseBody(res *knowledge.SubmitResponse) *SubmitTestResponseBody {
	body := &SubmitTestResponseBody{
		Success:      res.Success,
		Message:      res.Message,
		SubmissionID: res.SubmissionID,
		Score:        res.Score,
	}
	return body
}

// NewGetMySubmissionsResponseBody builds the HTTP response body from the
// result of the "GetMySubmissions" endpoint of the "knowledge" service.
func NewGetMySubmissionsResponseBody(res *knowledge.SubmissionsResponse) *GetMySubmissionsResponseBody {
	body := &GetMySubmissionsResponseBody{}
	if res.Submissions != nil {
		body.Submissions = make([]*SubmissionResponseBody, len(res.Submissions))
		for i, val := range res.Submissions {
			body.Submissions[i] = marshalKnowledgeSubmissionToSubmissionResponseBody(val)
		}
	} else {
		body.Submissions = []*SubmissionResponseBody{}
	}
	return body
}

// NewGetSubmissionByIDResponseBody builds the HTTP response body from the
// result of the "GetSubmissionById" endpoint of the "knowledge" service.
func NewGetSubmissionByIDResponseBody(res *knowledge.SubmissionResponse) *GetSubmissionByIDResponseBody {
	body := &GetSubmissionByIDResponseBody{}
	if res.Submission != nil {
		body.Submission = marshalKnowledgeSubmissionToSubmissionResponseBody(res.Submission)
	}
	return body
}

// NewGetSubmissionResultResponseBody builds the HTTP response body from the
// result of the "GetSubmissionResult" endpoint of the "knowledge" service.
func NewGetSubmissionResultResponseBody(res *knowledge.SubmissionResult) *GetSubmissionResultResponseBody {
	body := &GetSubmissionResultResponseBody{}
	if res.Submission != nil {
		body.Submission = marshalKnowledgeSubmissionToSubmissionResponseBody(res.Submission)
	}
	if res.Questions != nil {
		body.Questions = make([]*QuestionResultResponseBody, len(res.Questions))
		for i, val := range res.Questions {
			body.Questions[i] = marshalKnowledgeQuestionResultToQuestionResultResponseBody(val)
		}
	} else {
		body.Questions = []*QuestionResultResponseBody{}
	}
	return body
}

// NewCreateTestPayload builds a knowledge service CreateTest endpoint payload.
func NewCreateTestPayload(body *CreateTestRequestBody, sessionToken string) *knowledge.CreateTestPayload {
	v := &knowledge.CreateTestPayload{
		Title: *body.Title,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetMyTestsPayload builds a knowledge service GetMyTests endpoint payload.
func NewGetMyTestsPayload(sessionToken string) *knowledge.GetMyTestsPayload {
	v := &knowledge.GetMyTestsPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetTestByIDPayload builds a knowledge service GetTestById endpoint
// payload.
func NewGetTestByIDPayload(testID int64, sessionToken string) *knowledge.GetTestByIDPayload {
	v := &knowledge.GetTestByIDPayload{}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateTestPayload builds a knowledge service UpdateTest endpoint payload.
func NewUpdateTestPayload(body *UpdateTestRequestBody, testID int64, sessionToken string) *knowledge.UpdateTestPayload {
	v := &knowledge.UpdateTestPayload{
		Title: *body.Title,
	}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewDeleteTestPayload builds a knowledge service DeleteTest endpoint payload.
func NewDeleteTestPayload(testID int64, sessionToken string) *knowledge.DeleteTestPayload {
	v := &knowledge.DeleteTestPayload{}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewGetTestQuestionsPayload builds a knowledge service GetTestQuestions
// endpoint payload.
func NewGetTestQuestionsPayload(testID int64, sessionToken string) *knowledge.GetTestQuestionsPayload {
	v := &knowledge.GetTestQuestionsPayload{}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewAddQuestionPayload builds a knowledge service AddQuestion endpoint
// payload.
func NewAddQuestionPayload(body *AddQuestionRequestBody, testID int64, sessionToken string) *knowledge.AddQuestionPayload {
	v := &knowledge.AddQuestionPayload{
		QuestionText:  *body.QuestionText,
		OptionA:       *body.OptionA,
		OptionB:       *body.OptionB,
		OptionC:       *body.OptionC,
		OptionD:       *body.OptionD,
		CorrectAnswer: *body.CorrectAnswer,
	}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewGetQuestionByIDPayload builds a knowledge service GetQuestionById
// endpoint payload.
func NewGetQuestionByIDPayload(testID int64, questionID int64, sessionToken string) *knowledge.GetQuestionByIDPayload {
	v := &knowledge.GetQuestionByIDPayload{}
	v.TestID = testID
	v.QuestionID = questionID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateQuestionPayload builds a knowledge service UpdateQuestion endpoint
// payload.
func NewUpdateQuestionPayload(body *UpdateQuestionRequestBody, testID int64, questionID int64, sessionToken string) *knowledge.UpdateQuestionPayload {
	v := &knowledge.UpdateQuestionPayload{
		QuestionText:  *body.QuestionText,
		OptionA:       *body.OptionA,
		OptionB:       *body.OptionB,
		OptionC:       *body.OptionC,
		OptionD:       *body.OptionD,
		CorrectAnswer: *body.CorrectAnswer,
	}
	v.TestID = testID
	v.QuestionID = questionID
	v.SessionToken = sessionToken

	return v
}

// NewDeleteQuestionPayload builds a knowledge service DeleteQuestion endpoint
// payload.
func NewDeleteQuestionPayload(testID int64, questionID int64, sessionToken string) *knowledge.DeleteQuestionPayload {
	v := &knowledge.DeleteQuestionPayload{}
	v.TestID = testID
	v.QuestionID = questionID
	v.SessionToken = sessionToken

	return v
}

// NewGetAvailableTestsPayload builds a knowledge service GetAvailableTests
// endpoint payload.
func NewGetAvailableTestsPayload(sessionToken string) *knowledge.GetAvailableTestsPayload {
	v := &knowledge.GetAvailableTestsPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetTestFormPayload builds a knowledge service GetTestForm endpoint
// payload.
func NewGetTestFormPayload(testID int64, sessionToken string) *knowledge.GetTestFormPayload {
	v := &knowledge.GetTestFormPayload{}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewSubmitTestPayload builds a knowledge service SubmitTest endpoint payload.
func NewSubmitTestPayload(body *SubmitTestRequestBody, testID int64, sessionToken string) *knowledge.SubmitTestPayload {
	v := &knowledge.SubmitTestPayload{}
	v.Answers = make([]*knowledge.Answer, len(body.Answers))
	for i, val := range body.Answers {
		v.Answers[i] = unmarshalAnswerRequestBodyToKnowledgeAnswer(val)
	}
	v.TestID = testID
	v.SessionToken = sessionToken

	return v
}

// NewGetMySubmissionsPayload builds a knowledge service GetMySubmissions
// endpoint payload.
func NewGetMySubmissionsPayload(sessionToken string) *knowledge.GetMySubmissionsPayload {
	v := &knowledge.GetMySubmissionsPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetSubmissionByIDPayload builds a knowledge service GetSubmissionById
// endpoint payload.
func NewGetSubmissionByIDPayload(submissionID int64, sessionToken string) *knowledge.GetSubmissionByIDPayload {
	v := &knowledge.GetSubmissionByIDPayload{}
	v.SubmissionID = submissionID
	v.SessionToken = sessionToken

	return v
}

// NewGetSubmissionResultPayload builds a knowledge service GetSubmissionResult
// endpoint payload.
func NewGetSubmissionResultPayload(submissionID int64, sessionToken string) *knowledge.GetSubmissionResultPayload {
	v := &knowledge.GetSubmissionResultPayload{}
	v.SubmissionID = submissionID
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateTestRequestBody runs the validations defined on
// CreateTestRequestBody
func ValidateCreateTestRequestBody(body *CreateTestRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}

// ValidateUpdateTestRequestBody runs the validations defined on
// UpdateTestRequestBody
func ValidateUpdateTestRequestBody(body *UpdateTestRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}

// ValidateAddQuestionRequestBody runs the validations defined on
// AddQuestionRequestBody
func ValidateAddQuestionRequestBody(body *AddQuestionRequestBody) (err error) {
	if body.QuestionText == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_text", "body"))
	}
	if body.OptionA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_a", "body"))
	}
	if body.OptionB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_b", "body"))
	}
	if body.OptionC == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_c", "body"))
	}
	if body.OptionD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_d", "body"))
	}
	if body.CorrectAnswer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("correct_answer", "body"))
	}
	return
}

// ValidateUpdateQuestionRequestBody runs the validations defined on
// UpdateQuestionRequestBody
func ValidateUpdateQuestionRequestBody(body *UpdateQuestionRequestBody) (err error) {
	if body.QuestionText == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_text", "body"))
	}
	if body.OptionA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_a", "body"))
	}
	if body.OptionB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_b", "body"))
	}
	if body.OptionC == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_c", "body"))
	}
	if body.OptionD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_d", "body"))
	}
	if body.CorrectAnswer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("correct_answer", "body"))
	}
	return
}

// ValidateSubmitTestRequestBody runs the validations defined on
// SubmitTestRequestBody
func ValidateSubmitTestRequestBody(body *SubmitTestRequestBody) (err error) {
	if body.Answers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("answers", "body"))
	}
	for _, e := range body.Answers {
		if e != nil {
			if err2 := ValidateAnswerRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAnswerRequestBody runs the validations defined on AnswerRequestBody
func ValidateAnswerRequestBody(body *AnswerRequestBody) (err error) {
	if body.QuestionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_id", "body"))
	}
	if body.SelectedAnswer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("selected_answer", "body"))
	}
	return
}
