// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge HTTP server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package server

import (
	"context"
	"net/http"

	knowledge "github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/gen/knowledge"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the knowledge service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	CreateTest          http.Handler
	GetMyTests          http.Handler
	GetTestByID         http.Handler
	UpdateTest          http.Handler
	DeleteTest          http.Handler
	GetTestQuestions    http.Handler
	AddQuestion         http.Handler
	GetQuestionByID     http.Handler
	UpdateQuestion      http.Handler
	DeleteQuestion      http.Handler
	GetAvailableTests   http.Handler
	GetTestForm         http.Handler
	SubmitTest          http.Handler
	GetMySubmissions    http.Handler
	GetSubmissionByID   http.Handler
	GetSubmissionResult http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the knowledge service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *knowledge.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateTest", "POST", "/api/knowledge/tests"},
			{"GetMyTests", "GET", "/api/knowledge/tests/my"},
			{"GetTestByID", "GET", "/api/knowledge/tests/{test_id}"},
			{"UpdateTest", "PUT", "/api/knowledge/tests/{test_id}"},
			{"DeleteTest", "DELETE", "/api/knowledge/tests/{test_id}"},
			{"GetTestQuestions", "GET", "/api/knowledge/tests/{test_id}/questions"},
			{"AddQuestion", "POST", "/api/knowledge/tests/{test_id}/questions"},
			{"GetQuestionByID", "GET", "/api/knowledge/tests/{test_id}/questions/{question_id}"},
			{"UpdateQuestion", "PUT", "/api/knowledge/tests/{test_id}/questions/{question_id}"},
			{"DeleteQuestion", "DELETE", "/api/knowledge/tests/{test_id}/questions/{question_id}"},
			{"GetAvailableTests", "GET", "/api/knowledge/tests/available"},
			{"GetTestForm", "GET", "/api/knowledge/tests/{test_id}/form"},
			{"SubmitTest", "POST", "/api/knowledge/tests/{test_id}/submit"},
			{"GetMySubmissions", "GET", "/api/knowledge/submissions/my"},
			{"GetSubmissionByID", "GET", "/api/knowledge/submissions/{submission_id}"},
			{"GetSubmissionResult", "GET", "/api/knowledge/submissions/{submission_id}/result"},
		},
		CreateTest:          NewCreateTestHandler(e.CreateTest, mux, decoder, encoder, errhandler, formatter),
		GetMyTests:          NewGetMyTestsHandler(e.GetMyTests, mux, decoder, encoder, errhandler, formatter),
		GetTestByID:         NewGetTestByIDHandler(e.GetTestByID, mux, decoder, encoder, errhandler, formatter),
		UpdateTest:          NewUpdateTestHandler(e.UpdateTest, mux, decoder, encoder, errhandler, formatter),
		DeleteTest:          NewDeleteTestHandler(e.DeleteTest, mux, decoder, encoder, errhandler, formatter),
		GetTestQuestions:    NewGetTestQuestionsHandler(e.GetTestQuestions, mux, decoder, encoder, errhandler, formatter),
		AddQuestion:         NewAddQuestionHandler(e.AddQuestion, mux, decoder, encoder, errhandler, formatter),
		GetQuestionByID:     NewGetQuestionByIDHandler(e.GetQuestionByID, mux, decoder, encoder, errhandler, formatter),
		UpdateQuestion:      NewUpdateQuestionHandler(e.UpdateQuestion, mux, decoder, encoder, errhandler, formatter),
		DeleteQuestion:      NewDeleteQuestionHandler(e.DeleteQuestion, mux, decoder, encoder, errhandler, formatter),
		GetAvailableTests:   NewGetAvailableTestsHandler(e.GetAvailableTests, mux, decoder, encoder, errhandler, formatter),
		GetTestForm:         NewGetTestFormHandler(e.GetTestForm, mux, decoder, encoder, errhandler, formatter),
		SubmitTest:          NewSubmitTestHandler(e.SubmitTest, mux, decoder, encoder, errhandler, formatter),
		GetMySubmissions:    NewGetMySubmissionsHandler(e.GetMySubmissions, mux, decoder, encoder, errhandler, formatter),
		GetSubmissionByID:   NewGetSubmissionByIDHandler(e.GetSubmissionByID, mux, decoder, encoder, errhandler, formatter),
		GetSubmissionResult: NewGetSubmissionResultHandler(e.GetSubmissionResult, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "knowledge" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateTest = m(s.CreateTest)
	s.GetMyTests = m(s.GetMyTests)
	s.GetTestByID = m(s.GetTestByID)
	s.UpdateTest = m(s.UpdateTest)
	s.DeleteTest = m(s.DeleteTest)
	s.GetTestQuestions = m(s.GetTestQuestions)
	s.AddQuestion = m(s.AddQuestion)
	s.GetQuestionByID = m(s.GetQuestionByID)
	s.UpdateQuestion = m(s.UpdateQuestion)
	s.DeleteQuestion = m(s.DeleteQuestion)
	s.GetAvailableTests = m(s.GetAvailableTests)
	s.GetTestForm = m(s.GetTestForm)
	s.SubmitTest = m(s.SubmitTest)
	s.GetMySubmissions = m(s.GetMySubmissions)
	s.GetSubmissionByID = m(s.GetSubmissionByID)
	s.GetSubmissionResult = m(s.GetSubmissionResult)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return knowledge.MethodNames[:] }

// Mount configures the mux to serve the knowledge endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateTestHandler(mux, h.CreateTest)
	MountGetMyTestsHandler(mux, h.GetMyTests)
	MountGetTestByIDHandler(mux, h.GetTestByID)
	MountUpdateTestHandler(mux, h.UpdateTest)
	MountDeleteTestHandler(mux, h.DeleteTest)
	MountGetTestQuestionsHandler(mux, h.GetTestQuestions)
	MountAddQuestionHandler(mux, h.AddQuestion)
	MountGetQuestionByIDHandler(mux, h.GetQuestionByID)
	MountUpdateQuestionHandler(mux, h.UpdateQuestion)
	MountDeleteQuestionHandler(mux, h.DeleteQuestion)
	MountGetAvailableTestsHandler(mux, h.GetAvailableTests)
	MountGetTestFormHandler(mux, h.GetTestForm)
	MountSubmitTestHandler(mux, h.SubmitTest)
	MountGetMySubmissionsHandler(mux, h.GetMySubmissions)
	MountGetSubmissionByIDHandler(mux, h.GetSubmissionByID)
	MountGetSubmissionResultHandler(mux, h.GetSubmissionResult)
}

// Mount configures the mux to serve the knowledge endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateTestHandler configures the mux to serve the "knowledge" service
// "CreateTest" endpoint.
func MountCreateTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/knowledge/tests", f)
}

// NewCreateTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "knowledge" service "CreateTest" endpoint.
func NewCreateTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTestRequest(mux, decoder)
		encodeResponse = EncodeCreateTestResponse(encoder)
		encodeError    = EncodeCreateTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMyTestsHandler configures the mux to serve the "knowledge" service
// "GetMyTests" endpoint.
func MountGetMyTestsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/my", f)
}

// NewGetMyTestsHandler creates a HTTP handler which loads the HTTP request and
// calls the "knowledge" service "GetMyTests" endpoint.
func NewGetMyTestsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMyTestsRequest(mux, decoder)
		encodeResponse = EncodeGetMyTestsResponse(encoder)
		encodeError    = EncodeGetMyTestsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetMyTests")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTestByIDHandler configures the mux to serve the "knowledge" service
// "GetTestById" endpoint.
func MountGetTestByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/{test_id}", f)
}

// NewGetTestByIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "knowledge" service "GetTestById" endpoint.
func NewGetTestByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTestByIDRequest(mux, decoder)
		encodeResponse = EncodeGetTestByIDResponse(encoder)
		encodeError    = EncodeGetTestByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTestById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateTestHandler configures the mux to serve the "knowledge" service
// "UpdateTest" endpoint.
func MountUpdateTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/knowledge/tests/{test_id}", f)
}

// NewUpdateTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "knowledge" service "UpdateTest" endpoint.
func NewUpdateTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTestRequest(mux, decoder)
		encodeResponse = EncodeUpdateTestResponse(encoder)
		encodeError    = EncodeUpdateTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTestHandler configures the mux to serve the "knowledge" service
// "DeleteTest" endpoint.
func MountDeleteTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/knowledge/tests/{test_id}", f)
}

// NewDeleteTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "knowledge" service "DeleteTest" endpoint.
func NewDeleteTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTestRequest(mux, decoder)
		encodeResponse = EncodeDeleteTestResponse(encoder)
		encodeError    = EncodeDeleteTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTestQuestionsHandler configures the mux to serve the "knowledge"
// service "GetTestQuestions" endpoint.
func MountGetTestQuestionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/{test_id}/questions", f)
}

// NewGetTestQuestionsHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetTestQuestions" endpoint.
func NewGetTestQuestionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTestQuestionsRequest(mux, decoder)
		encodeResponse = EncodeGetTestQuestionsResponse(encoder)
		encodeError    = EncodeGetTestQuestionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTestQuestions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddQuestionHandler configures the mux to serve the "knowledge" service
// "AddQuestion" endpoint.
func MountAddQuestionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/knowledge/tests/{test_id}/questions", f)
}

// NewAddQuestionHandler creates a HTTP handler which loads the HTTP request
// and calls the "knowledge" service "AddQuestion" endpoint.
func NewAddQuestionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddQuestionRequest(mux, decoder)
		encodeResponse = EncodeAddQuestionResponse(encoder)
		encodeError    = EncodeAddQuestionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "AddQuestion")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetQuestionByIDHandler configures the mux to serve the "knowledge"
// service "GetQuestionById" endpoint.
func MountGetQuestionByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/{test_id}/questions/{question_id}", f)
}

// NewGetQuestionByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetQuestionById" endpoint.
func NewGetQuestionByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetQuestionByIDRequest(mux, decoder)
		encodeResponse = EncodeGetQuestionByIDResponse(encoder)
		encodeError    = EncodeGetQuestionByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetQuestionById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateQuestionHandler configures the mux to serve the "knowledge"
// service "UpdateQuestion" endpoint.
func MountUpdateQuestionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/knowledge/tests/{test_id}/questions/{question_id}", f)
}

// NewUpdateQuestionHandler creates a HTTP handler which loads the HTTP request
// and calls the "knowledge" service "UpdateQuestion" endpoint.
func NewUpdateQuestionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateQuestionRequest(mux, decoder)
		encodeResponse = EncodeUpdateQuestionResponse(encoder)
		encodeError    = EncodeUpdateQuestionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateQuestion")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteQuestionHandler configures the mux to serve the "knowledge"
// service "DeleteQuestion" endpoint.
func MountDeleteQuestionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/knowledge/tests/{test_id}/questions/{question_id}", f)
}

// NewDeleteQuestionHandler creates a HTTP handler which loads the HTTP request
// and calls the "knowledge" service "DeleteQuestion" endpoint.
func NewDeleteQuestionHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteQuestionRequest(mux, decoder)
		encodeResponse = EncodeDeleteQuestionResponse(encoder)
		encodeError    = EncodeDeleteQuestionError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteQuestion")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAvailableTestsHandler configures the mux to serve the "knowledge"
// service "GetAvailableTests" endpoint.
func MountGetAvailableTestsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/available", f)
}

// NewGetAvailableTestsHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetAvailableTests" endpoint.
func NewGetAvailableTestsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAvailableTestsRequest(mux, decoder)
		encodeResponse = EncodeGetAvailableTestsResponse(encoder)
		encodeError    = EncodeGetAvailableTestsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAvailableTests")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTestFormHandler configures the mux to serve the "knowledge" service
// "GetTestForm" endpoint.
func MountGetTestFormHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/tests/{test_id}/form", f)
}

// NewGetTestFormHandler creates a HTTP handler which loads the HTTP request
// and calls the "knowledge" service "GetTestForm" endpoint.
func NewGetTestFormHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTestFormRequest(mux, decoder)
		encodeResponse = EncodeGetTestFormResponse(encoder)
		encodeError    = EncodeGetTestFormError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTestForm")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSubmitTestHandler configures the mux to serve the "knowledge" service
// "SubmitTest" endpoint.
func MountSubmitTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/knowledge/tests/{test_id}/submit", f)
}

// NewSubmitTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "knowledge" service "SubmitTest" endpoint.
func NewSubmitTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSubmitTestRequest(mux, decoder)
		encodeResponse = EncodeSubmitTestResponse(encoder)
		encodeError    = EncodeSubmitTestError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SubmitTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMySubmissionsHandler configures the mux to serve the "knowledge"
// service "GetMySubmissions" endpoint.
func MountGetMySubmissionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/submissions/my", f)
}

// NewGetMySubmissionsHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetMySubmissions" endpoint.
func NewGetMySubmissionsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMySubmissionsRequest(mux, decoder)
		encodeResponse = EncodeGetMySubmissionsResponse(encoder)
		encodeError    = EncodeGetMySubmissionsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetMySubmissions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSubmissionByIDHandler configures the mux to serve the "knowledge"
// service "GetSubmissionById" endpoint.
func MountGetSubmissionByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/submissions/{submission_id}", f)
}

// NewGetSubmissionByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetSubmissionById" endpoint.
func NewGetSubmissionByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSubmissionByIDRequest(mux, decoder)
		encodeResponse = EncodeGetSubmissionByIDResponse(encoder)
		encodeError    = EncodeGetSubmissionByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetSubmissionById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSubmissionResultHandler configures the mux to serve the "knowledge"
// service "GetSubmissionResult" endpoint.
func MountGetSubmissionResultHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/knowledge/submissions/{submission_id}/result", f)
}

// NewGetSubmissionResultHandler creates a HTTP handler which loads the HTTP
// request and calls the "knowledge" service "GetSubmissionResult" endpoint.
func NewGetSubmissionResultHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSubmissionResultRequest(mux, decoder)
		encodeResponse = EncodeGetSubmissionResultResponse(encoder)
		encodeError    = EncodeGetSubmissionResultError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetSubmissionResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "knowledge")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
