// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	knowledge "github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/gen/knowledge"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateTestRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "CreateTest" endpoint
func (c *Client) BuildCreateTestRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTestKnowledgePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "CreateTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTestRequest returns an encoder for requests sent to the
// knowledge CreateTest server.
func EncodeCreateTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.CreateTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "CreateTest", "*knowledge.CreateTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateTestRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("knowledge", "CreateTest", err)
		}
		return nil
	}
}

// DecodeCreateTestResponse returns a decoder for responses returned by the
// knowledge CreateTest endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreateTestResponse may return the following errors:
//   - "invalid_input" (type knowledge.InvalidInput): http.StatusBadRequest
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "CreateTest", err)
			}
			err = ValidateCreateTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "CreateTest", err)
			}
			res := NewCreateTestSimpleResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "CreateTest", err)
			}
			return nil, NewCreateTestInvalidInput(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "CreateTest", err)
			}
			return nil, NewCreateTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "CreateTest", resp.StatusCode, string(body))
		}
	}
}

// BuildGetMyTestsRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "GetMyTests" endpoint
func (c *Client) BuildGetMyTestsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetMyTestsKnowledgePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetMyTests", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetMyTestsRequest returns an encoder for requests sent to the
// knowledge GetMyTests server.
func EncodeGetMyTestsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetMyTestsPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetMyTests", "*knowledge.GetMyTestsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetMyTestsResponse returns a decoder for responses returned by the
// knowledge GetMyTests endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetMyTestsResponse may return the following errors:
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetMyTestsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetMyTestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetMyTests", err)
			}
			err = ValidateGetMyTestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetMyTests", err)
			}
			res := NewGetMyTestsTestsResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetMyTests", err)
			}
			return nil, NewGetMyTestsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetMyTests", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTestByIDRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "GetTestById" endpoint
func (c *Client) BuildGetTestByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.GetTestByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetTestById", "*knowledge.GetTestByIDPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTestByIDKnowledgePath(testID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetTestById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTestByIDRequest returns an encoder for requests sent to the
// knowledge GetTestById server.
func EncodeGetTestByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetTestByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetTestById", "*knowledge.GetTestByIDPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetTestByIDResponse returns a decoder for responses returned by the
// knowledge GetTestById endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetTestByIDResponse may return the following errors:
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTestByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTestByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestById", err)
			}
			err = ValidateGetTestByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetTestById", err)
			}
			res := NewGetTestByIDTestResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestById", err)
			}
			return nil, NewGetTestByIDTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestById", err)
			}
			return nil, NewGetTestByIDUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetTestById", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTestRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "UpdateTest" endpoint
func (c *Client) BuildUpdateTestRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.UpdateTestPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "UpdateTest", "*knowledge.UpdateTestPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTestKnowledgePath(testID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "UpdateTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTestRequest returns an encoder for requests sent to the
// knowledge UpdateTest server.
func EncodeUpdateTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.UpdateTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "UpdateTest", "*knowledge.UpdateTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateTestRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("knowledge", "UpdateTest", err)
		}
		return nil
	}
}

// DecodeUpdateTestResponse returns a decoder for responses returned by the
// knowledge UpdateTest endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateTestResponse may return the following errors:
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "UpdateTest", err)
			}
			err = ValidateUpdateTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "UpdateTest", err)
			}
			res := NewUpdateTestSimpleResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "UpdateTest", err)
			}
			return nil, NewUpdateTestTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "UpdateTest", err)
			}
			return nil, NewUpdateTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "UpdateTest", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTestRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "DeleteTest" endpoint
func (c *Client) BuildDeleteTestRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.DeleteTestPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "DeleteTest", "*knowledge.DeleteTestPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTestKnowledgePath(testID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "DeleteTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTestRequest returns an encoder for requests sent to the
// knowledge DeleteTest server.
func EncodeDeleteTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.DeleteTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "DeleteTest", "*knowledge.DeleteTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteTestResponse returns a decoder for responses returned by the
// knowledge DeleteTest endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteTestResponse may return the following errors:
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "DeleteTest", err)
			}
			err = ValidateDeleteTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "DeleteTest", err)
			}
			res := NewDeleteTestSimpleResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "DeleteTest", err)
			}
			return nil, NewDeleteTestTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "DeleteTest", err)
			}
			return nil, NewDeleteTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "DeleteTest", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTestQuestionsRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "GetTestQuestions" endpoint
func (c *Client) BuildGetTestQuestionsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.GetTestQuestionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetTestQuestions", "*knowledge.GetTestQuestionsPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTestQuestionsKnowledgePath(testID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetTestQuestions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTestQuestionsRequest returns an encoder for requests sent to the
// knowledge GetTestQuestions server.
func EncodeGetTestQuestionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetTestQuestionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetTestQuestions", "*knowledge.GetTestQuestionsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetTestQuestionsResponse returns a decoder for responses returned by
// the knowledge GetTestQuestions endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetTestQuestionsResponse may return the following errors:
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTestQuestionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTestQuestionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestQuestions", err)
			}
			err = ValidateGetTestQuestionsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetTestQuestions", err)
			}
			res := NewGetTestQuestionsQuestionsResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestQuestions", err)
			}
			return nil, NewGetTestQuestionsTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestQuestions", err)
			}
			return nil, NewGetTestQuestionsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetTestQuestions", resp.StatusCode, string(body))
		}
	}
}

// BuildAddQuestionRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "AddQuestion" endpoint
func (c *Client) BuildAddQuestionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.AddQuestionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "AddQuestion", "*knowledge.AddQuestionPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddQuestionKnowledgePath(testID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "AddQuestion", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddQuestionRequest returns an encoder for requests sent to the
// knowledge AddQuestion server.
func EncodeAddQuestionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.AddQuestionPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "AddQuestion", "*knowledge.AddQuestionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewAddQuestionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("knowledge", "AddQuestion", err)
		}
		return nil
	}
}

// DecodeAddQuestionResponse returns a decoder for responses returned by the
// knowledge AddQuestion endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeAddQuestionResponse may return the following errors:
//   - "invalid_input" (type knowledge.InvalidInput): http.StatusBadRequest
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeAddQuestionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddQuestionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "AddQuestion", err)
			}
			err = ValidateAddQuestionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "AddQuestion", err)
			}
			res := NewAddQuestionSimpleResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "AddQuestion", err)
			}
			return nil, NewAddQuestionInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "AddQuestion", err)
			}
			return nil, NewAddQuestionTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "AddQuestion", err)
			}
			return nil, NewAddQuestionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "AddQuestion", resp.StatusCode, string(body))
		}
	}
}

// BuildGetQuestionByIDRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "GetQuestionById" endpoint
func (c *Client) BuildGetQuestionByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID     int64
		questionID int64
	)
	{
		p, ok := v.(*knowledge.GetQuestionByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetQuestionById", "*knowledge.GetQuestionByIDPayload", v)
		}
		testID = p.TestID
		questionID = p.QuestionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetQuestionByIDKnowledgePath(testID, questionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetQuestionById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetQuestionByIDRequest returns an encoder for requests sent to the
// knowledge GetQuestionById server.
func EncodeGetQuestionByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetQuestionByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetQuestionById", "*knowledge.GetQuestionByIDPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetQuestionByIDResponse returns a decoder for responses returned by
// the knowledge GetQuestionById endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetQuestionByIDResponse may return the following errors:
//   - "question_not_found" (type knowledge.QuestionNotFound): http.StatusNotFound
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetQuestionByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetQuestionByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetQuestionById", err)
			}
			err = ValidateGetQuestionByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetQuestionById", err)
			}
			res := NewGetQuestionByIDQuestionResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			en := resp.Header.Get("goa-error")
			switch en {
			case "question_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "GetQuestionById", err)
				}
				return nil, NewGetQuestionByIDQuestionNotFound(body)
			case "test_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "GetQuestionById", err)
				}
				return nil, NewGetQuestionByIDTestNotFound(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("knowledge", "GetQuestionById", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetQuestionById", err)
			}
			return nil, NewGetQuestionByIDUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetQuestionById", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateQuestionRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "UpdateQuestion" endpoint
func (c *Client) BuildUpdateQuestionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID     int64
		questionID int64
	)
	{
		p, ok := v.(*knowledge.UpdateQuestionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "UpdateQuestion", "*knowledge.UpdateQuestionPayload", v)
		}
		testID = p.TestID
		questionID = p.QuestionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateQuestionKnowledgePath(testID, questionID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "UpdateQuestion", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateQuestionRequest returns an encoder for requests sent to the
// knowledge UpdateQuestion server.
func EncodeUpdateQuestionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.UpdateQuestionPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "UpdateQuestion", "*knowledge.UpdateQuestionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateQuestionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("knowledge", "UpdateQuestion", err)
		}
		return nil
	}
}

// DecodeUpdateQuestionResponse returns a decoder for responses returned by the
// knowledge UpdateQuestion endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateQuestionResponse may return the following errors:
//   - "question_not_found" (type knowledge.QuestionNotFound): http.StatusNotFound
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateQuestionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateQuestionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "UpdateQuestion", err)
			}
			err = ValidateUpdateQuestionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "UpdateQuestion", err)
			}
			res := NewUpdateQuestionSimpleResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			en := resp.Header.Get("goa-error")
			switch en {
			case "question_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "UpdateQuestion", err)
				}
				return nil, NewUpdateQuestionQuestionNotFound(body)
			case "test_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "UpdateQuestion", err)
				}
				return nil, NewUpdateQuestionTestNotFound(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("knowledge", "UpdateQuestion", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "UpdateQuestion", err)
			}
			return nil, NewUpdateQuestionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "UpdateQuestion", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteQuestionRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "DeleteQuestion" endpoint
func (c *Client) BuildDeleteQuestionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID     int64
		questionID int64
	)
	{
		p, ok := v.(*knowledge.DeleteQuestionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "DeleteQuestion", "*knowledge.DeleteQuestionPayload", v)
		}
		testID = p.TestID
		questionID = p.QuestionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteQuestionKnowledgePath(testID, questionID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "DeleteQuestion", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteQuestionRequest returns an encoder for requests sent to the
// knowledge DeleteQuestion server.
func EncodeDeleteQuestionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.DeleteQuestionPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "DeleteQuestion", "*knowledge.DeleteQuestionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteQuestionResponse returns a decoder for responses returned by the
// knowledge DeleteQuestion endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeleteQuestionResponse may return the following errors:
//   - "question_not_found" (type knowledge.QuestionNotFound): http.StatusNotFound
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteQuestionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteQuestionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "DeleteQuestion", err)
			}
			err = ValidateDeleteQuestionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "DeleteQuestion", err)
			}
			res := NewDeleteQuestionSimpleResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			en := resp.Header.Get("goa-error")
			switch en {
			case "question_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "DeleteQuestion", err)
				}
				return nil, NewDeleteQuestionQuestionNotFound(body)
			case "test_not_found":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("knowledge", "DeleteQuestion", err)
				}
				return nil, NewDeleteQuestionTestNotFound(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("knowledge", "DeleteQuestion", resp.StatusCode, string(body))
			}
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "DeleteQuestion", err)
			}
			return nil, NewDeleteQuestionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "DeleteQuestion", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAvailableTestsRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "GetAvailableTests" endpoint
func (c *Client) BuildGetAvailableTestsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAvailableTestsKnowledgePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetAvailableTests", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAvailableTestsRequest returns an encoder for requests sent to the
// knowledge GetAvailableTests server.
func EncodeGetAvailableTestsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetAvailableTestsPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetAvailableTests", "*knowledge.GetAvailableTestsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetAvailableTestsResponse returns a decoder for responses returned by
// the knowledge GetAvailableTests endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAvailableTestsResponse may return the following errors:
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAvailableTestsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAvailableTestsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetAvailableTests", err)
			}
			err = ValidateGetAvailableTestsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetAvailableTests", err)
			}
			res := NewGetAvailableTestsTestsResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetAvailableTests", err)
			}
			return nil, NewGetAvailableTestsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetAvailableTests", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTestFormRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "GetTestForm" endpoint
func (c *Client) BuildGetTestFormRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.GetTestFormPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetTestForm", "*knowledge.GetTestFormPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTestFormKnowledgePath(testID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetTestForm", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTestFormRequest returns an encoder for requests sent to the
// knowledge GetTestForm server.
func EncodeGetTestFormRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetTestFormPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetTestForm", "*knowledge.GetTestFormPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetTestFormResponse returns a decoder for responses returned by the
// knowledge GetTestForm endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetTestFormResponse may return the following errors:
//   - "test_already_submitted" (type knowledge.TestAlreadySubmitted): http.StatusConflict
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetTestFormResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTestFormResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestForm", err)
			}
			err = ValidateGetTestFormResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetTestForm", err)
			}
			res := NewGetTestFormFormResponseOK(&body)
			return res, nil
		case http.StatusConflict:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestForm", err)
			}
			return nil, NewGetTestFormTestAlreadySubmitted(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestForm", err)
			}
			return nil, NewGetTestFormTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetTestForm", err)
			}
			return nil, NewGetTestFormUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetTestForm", resp.StatusCode, string(body))
		}
	}
}

// BuildSubmitTestRequest instantiates a HTTP request object with method and
// path set to call the "knowledge" service "SubmitTest" endpoint
func (c *Client) BuildSubmitTestRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		testID int64
	)
	{
		p, ok := v.(*knowledge.SubmitTestPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "SubmitTest", "*knowledge.SubmitTestPayload", v)
		}
		testID = p.TestID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubmitTestKnowledgePath(testID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "SubmitTest", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubmitTestRequest returns an encoder for requests sent to the
// knowledge SubmitTest server.
func EncodeSubmitTestRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.SubmitTestPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "SubmitTest", "*knowledge.SubmitTestPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewSubmitTestRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("knowledge", "SubmitTest", err)
		}
		return nil
	}
}

// DecodeSubmitTestResponse returns a decoder for responses returned by the
// knowledge SubmitTest endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeSubmitTestResponse may return the following errors:
//   - "invalid_input" (type knowledge.InvalidInput): http.StatusBadRequest
//   - "test_already_submitted" (type knowledge.TestAlreadySubmitted): http.StatusConflict
//   - "test_not_found" (type knowledge.TestNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeSubmitTestResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SubmitTestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "SubmitTest", err)
			}
			err = ValidateSubmitTestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "SubmitTest", err)
			}
			res := NewSubmitTestSubmitResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "SubmitTest", err)
			}
			return nil, NewSubmitTestInvalidInput(body)
		case http.StatusConflict:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "SubmitTest", err)
			}
			return nil, NewSubmitTestTestAlreadySubmitted(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "SubmitTest", err)
			}
			return nil, NewSubmitTestTestNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "SubmitTest", err)
			}
			return nil, NewSubmitTestUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "SubmitTest", resp.StatusCode, string(body))
		}
	}
}

// BuildGetMySubmissionsRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "GetMySubmissions" endpoint
func (c *Client) BuildGetMySubmissionsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetMySubmissionsKnowledgePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetMySubmissions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetMySubmissionsRequest returns an encoder for requests sent to the
// knowledge GetMySubmissions server.
func EncodeGetMySubmissionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetMySubmissionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetMySubmissions", "*knowledge.GetMySubmissionsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetMySubmissionsResponse returns a decoder for responses returned by
// the knowledge GetMySubmissions endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetMySubmissionsResponse may return the following errors:
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetMySubmissionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetMySubmissionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetMySubmissions", err)
			}
			err = ValidateGetMySubmissionsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetMySubmissions", err)
			}
			res := NewGetMySubmissionsSubmissionsResponseOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetMySubmissions", err)
			}
			return nil, NewGetMySubmissionsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetMySubmissions", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSubmissionByIDRequest instantiates a HTTP request object with method
// and path set to call the "knowledge" service "GetSubmissionById" endpoint
func (c *Client) BuildGetSubmissionByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		submissionID int64
	)
	{
		p, ok := v.(*knowledge.GetSubmissionByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetSubmissionById", "*knowledge.GetSubmissionByIDPayload", v)
		}
		submissionID = p.SubmissionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSubmissionByIDKnowledgePath(submissionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetSubmissionById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSubmissionByIDRequest returns an encoder for requests sent to the
// knowledge GetSubmissionById server.
func EncodeGetSubmissionByIDRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetSubmissionByIDPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetSubmissionById", "*knowledge.GetSubmissionByIDPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetSubmissionByIDResponse returns a decoder for responses returned by
// the knowledge GetSubmissionById endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetSubmissionByIDResponse may return the following errors:
//   - "submission_not_found" (type knowledge.SubmissionNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetSubmissionByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSubmissionByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionById", err)
			}
			err = ValidateGetSubmissionByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetSubmissionById", err)
			}
			res := NewGetSubmissionByIDSubmissionResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionById", err)
			}
			return nil, NewGetSubmissionByIDSubmissionNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionById", err)
			}
			return nil, NewGetSubmissionByIDUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetSubmissionById", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSubmissionResultRequest instantiates a HTTP request object with
// method and path set to call the "knowledge" service "GetSubmissionResult"
// endpoint
func (c *Client) BuildGetSubmissionResultRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		submissionID int64
	)
	{
		p, ok := v.(*knowledge.GetSubmissionResultPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("knowledge", "GetSubmissionResult", "*knowledge.GetSubmissionResultPayload", v)
		}
		submissionID = p.SubmissionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSubmissionResultKnowledgePath(submissionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("knowledge", "GetSubmissionResult", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSubmissionResultRequest returns an encoder for requests sent to the
// knowledge GetSubmissionResult server.
func EncodeGetSubmissionResultRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*knowledge.GetSubmissionResultPayload)
		if !ok {
			return goahttp.ErrInvalidType("knowledge", "GetSubmissionResult", "*knowledge.GetSubmissionResultPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetSubmissionResultResponse returns a decoder for responses returned
// by the knowledge GetSubmissionResult endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetSubmissionResultResponse may return the following errors:
//   - "submission_not_found" (type knowledge.SubmissionNotFound): http.StatusNotFound
//   - "unauthorized" (type knowledge.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetSubmissionResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSubmissionResultResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionResult", err)
			}
			err = ValidateGetSubmissionResultResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("knowledge", "GetSubmissionResult", err)
			}
			res := NewGetSubmissionResultSubmissionResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionResult", err)
			}
			return nil, NewGetSubmissionResultSubmissionNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("knowledge", "GetSubmissionResult", err)
			}
			return nil, NewGetSubmissionResultUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("knowledge", "GetSubmissionResult", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTestResponseBodyToKnowledgeTest builds a value of type
// *knowledge.Test from a value of type *TestResponseBody.
func unmarshalTestResponseBodyToKnowledgeTest(v *TestResponseBody) *knowledge.Test {
	res := &knowledge.Test{
		ID:            *v.ID,
		Title:         *v.Title,
		CreatedBy:     *v.CreatedBy,
		CreatedAt:     *v.CreatedAt,
		QuestionCount: v.QuestionCount,
	}

	return res
}

// unmarshalQuestionResponseBodyToKnowledgeQuestion builds a value of type
// *knowledge.Question from a value of type *QuestionResponseBody.
func unmarshalQuestionResponseBodyToKnowledgeQuestion(v *QuestionResponseBody) *knowledge.Question {
	res := &knowledge.Question{
		ID:            *v.ID,
		TestID:        *v.TestID,
		QuestionText:  *v.QuestionText,
		OptionA:       *v.OptionA,
		OptionB:       *v.OptionB,
		OptionC:       *v.OptionC,
		OptionD:       *v.OptionD,
		CorrectAnswer: *v.CorrectAnswer,
		QuestionOrder: *v.QuestionOrder,
	}

	return res
}

// unmarshalQuestionFormResponseBodyToKnowledgeQuestionForm builds a value of
// type *knowledge.QuestionForm from a value of type *QuestionFormResponseBody.
func unmarshalQuestionFormResponseBodyToKnowledgeQuestionForm(v *QuestionFormResponseBody) *knowledge.QuestionForm {
	res := &knowledge.QuestionForm{
		ID:            *v.ID,
		QuestionText:  *v.QuestionText,
		OptionA:       *v.OptionA,
		OptionB:       *v.OptionB,
		OptionC:       *v.OptionC,
		OptionD:       *v.OptionD,
		QuestionOrder: *v.QuestionOrder,
	}

	return res
}

// marshalKnowledgeAnswerToAnswerRequestBody builds a value of type
// *AnswerRequestBody from a value of type *knowledge.Answer.
func marshalKnowledgeAnswerToAnswerRequestBody(v *knowledge.Answer) *AnswerRequestBody {
	res := &AnswerRequestBody{
		QuestionID:     v.QuestionID,
		SelectedAnswer: v.SelectedAnswer,
	}

	return res
}

// marshalAnswerRequestBodyToKnowledgeAnswer builds a value of type
// *knowledge.Answer from a value of type *AnswerRequestBody.
func marshalAnswerRequestBodyToKnowledgeAnswer(v *AnswerRequestBody) *knowledge.Answer {
	res := &knowledge.Answer{
		QuestionID:     v.QuestionID,
		SelectedAnswer: v.SelectedAnswer,
	}

	return res
}

// unmarshalSubmissionResponseBodyToKnowledgeSubmission builds a value of type
// *knowledge.Submission from a value of type *SubmissionResponseBody.
func unmarshalSubmissionResponseBodyToKnowledgeSubmission(v *SubmissionResponseBody) *knowledge.Submission {
	res := &knowledge.Submission{
		ID:          *v.ID,
		TestID:      *v.TestID,
		TestTitle:   *v.TestTitle,
		Score:       *v.Score,
		SubmittedAt: *v.SubmittedAt,
	}

	return res
}

// unmarshalQuestionResultResponseBodyToKnowledgeQuestionResult builds a value
// of type *knowledge.QuestionResult from a value of type
// *QuestionResultResponseBody.
func unmarshalQuestionResultResponseBodyToKnowledgeQuestionResult(v *QuestionResultResponseBody) *knowledge.QuestionResult {
	res := &knowledge.QuestionResult{
		SelectedAnswer: *v.SelectedAnswer,
		IsCorrect:      *v.IsCorrect,
	}
	res.Question = unmarshalQuestionResponseBodyToKnowledgeQuestion(v.Question)

	return res
}
