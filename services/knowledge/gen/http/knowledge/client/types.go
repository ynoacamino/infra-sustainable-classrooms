// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package client

import (
	knowledge "github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/gen/knowledge"
	goa "goa.design/goa/v3/pkg"
)

// CreateTestRequestBody is the type of the "knowledge" service "CreateTest"
// endpoint HTTP request body.
type CreateTestRequestBody struct {
	// Test title
	Title string `form:"title" json:"title" xml:"title"`
}

// UpdateTestRequestBody is the type of the "knowledge" service "UpdateTest"
// endpoint HTTP request body.
type UpdateTestRequestBody struct {
	// New title
	Title string `form:"title" json:"title" xml:"title"`
}

// AddQuestionRequestBody is the type of the "knowledge" service "AddQuestion"
// endpoint HTTP request body.
type AddQuestionRequestBody struct {
	// Question text
	QuestionText string `form:"question_text" json:"question_text" xml:"question_text"`
	// Option A
	OptionA string `form:"option_a" json:"option_a" xml:"option_a"`
	// Option B
	OptionB string `form:"option_b" json:"option_b" xml:"option_b"`
	// Option C
	OptionC string `form:"option_c" json:"option_c" xml:"option_c"`
	// Option D
	OptionD string `form:"option_d" json:"option_d" xml:"option_d"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int `form:"correct_answer" json:"correct_answer" xml:"correct_answer"`
}

// UpdateQuestionRequestBody is the type of the "knowledge" service
// "UpdateQuestion" endpoint HTTP request body.
type UpdateQuestionRequestBody struct {
	// Question text
	QuestionText string `form:"question_text" json:"question_text" xml:"question_text"`
	// Option A
	OptionA string `form:"option_a" json:"option_a" xml:"option_a"`
	// Option B
	OptionB string `form:"option_b" json:"option_b" xml:"option_b"`
	// Option C
	OptionC string `form:"option_c" json:"option_c" xml:"option_c"`
	// Option D
	OptionD string `form:"option_d" json:"option_d" xml:"option_d"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer int `form:"correct_answer" json:"correct_answer" xml:"correct_answer"`
}

// SubmitTestRequestBody is the type of the "knowledge" service "SubmitTest"
// endpoint HTTP request body.
type SubmitTestRequestBody struct {
	// Answer submissions
	Answers []*AnswerRequestBody `form:"answers" json:"answers" xml:"answers"`
}

// CreateTestResponseBody is the type of the "knowledge" service "CreateTest"
// endpoint HTTP response body.
type CreateTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetMyTestsResponseBody is the type of the "knowledge" service "GetMyTests"
// endpoint HTTP response body.
type GetMyTestsResponseBody struct {
	// Tests
	Tests []*TestResponseBody `form:"tests,omitempty" json:"tests,omitempty" xml:"tests,omitempty"`
}

// GetTestByIDResponseBody is the type of the "knowledge" service "GetTestById"
// endpoint HTTP response body.
type GetTestByIDResponseBody struct {
	// Test information
	Test *TestResponseBody `form:"test,omitempty" json:"test,omitempty" xml:"test,omitempty"`
}

// UpdateTestResponseBody is the type of the "knowledge" service "UpdateTest"
// endpoint HTTP response body.
type UpdateTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteTestResponseBody is the type of the "knowledge" service "DeleteTest"
// endpoint HTTP response body.
type DeleteTestResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetTestQuestionsResponseBody is the type of the "knowledge" service
// "GetTestQuestions" endpoint HTTP response body.
type GetTestQuestionsResponseBody struct {
	// Questions
	Questions []*QuestionResponseBody `form:"questions,omitempty" json:"questions,omitempty" xml:"questions,omitempty"`
}

// AddQuestionResponseBody is the type of the "knowledge" service "AddQuestion"
// endpoint HTTP response body.
type AddQuestionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetQuestionByIDResponseBody is the type of the "knowledge" service
// "GetQuestionById" endpoint HTTP response body.
type GetQuestionByIDResponseBody struct {
	// Question information
	Question *QuestionResponseBody `form:"question,omitempty" json:"question,omitempty" xml:"question,omitempty"`
}

// UpdateQuestionResponseBody is the type of the "knowledge" service
// "UpdateQuestion" endpoint HTTP response body.
type UpdateQuestionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteQuestionResponseBody is the type of the "knowledge" service
// "DeleteQuestion" endpoint HTTP response body.
type DeleteQuestionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetAvailableTestsResponseBody is the type of the "knowledge" service
// "GetAvailableTests" endpoint HTTP response body.
type GetAvailableTestsResponseBody struct {
	// Tests
	Tests []*TestResponseBody `form:"tests,omitempty" json:"tests,omitempty" xml:"tests,omitempty"`
}

// GetTestFormResponseBody is the type of the "knowledge" service "GetTestForm"
// endpoint HTTP response body.
type GetTestFormResponseBody struct {
	// Test info
	Test *TestResponseBody `form:"test,omitempty" json:"test,omitempty" xml:"test,omitempty"`
	// Questions
	Questions []*QuestionFormResponseBody `form:"questions,omitempty" json:"questions,omitempty" xml:"questions,omitempty"`
}

// SubmitTestResponseBody is the type of the "knowledge" service "SubmitTest"
// endpoint HTTP response body.
type SubmitTestResponseBody struct {
	// Success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Submission ID
	SubmissionID *int64 `form:"submission_id,omitempty" json:"submission_id,omitempty" xml:"submission_id,omitempty"`
	// Score percentage
	Score *float64 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// GetMySubmissionsResponseBody is the type of the "knowledge" service
// "GetMySubmissions" endpoint HTTP response body.
type GetMySubmissionsResponseBody struct {
	// Submissions
	Submissions []*SubmissionResponseBody `form:"submissions,omitempty" json:"submissions,omitempty" xml:"submissions,omitempty"`
}

// GetSubmissionByIDResponseBody is the type of the "knowledge" service
// "GetSubmissionById" endpoint HTTP response body.
type GetSubmissionByIDResponseBody struct {
	// Submission information
	Submission *SubmissionResponseBody `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
}

// GetSubmissionResultResponseBody is the type of the "knowledge" service
// "GetSubmissionResult" endpoint HTTP response body.
type GetSubmissionResultResponseBody struct {
	// Submission info
	Submission *SubmissionResponseBody `form:"submission,omitempty" json:"submission,omitempty" xml:"submission,omitempty"`
	// Question results
	Questions []*QuestionResultResponseBody `form:"questions,omitempty" json:"questions,omitempty" xml:"questions,omitempty"`
}

// TestResponseBody is used to define fields on response body types.
type TestResponseBody struct {
	// Test ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Test title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Creator user ID
	CreatedBy *int64 `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// Creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Number of questions
	QuestionCount *int `form:"question_count,omitempty" json:"question_count,omitempty" xml:"question_count,omitempty"`
}

// QuestionResponseBody is used to define fields on response body types.
type QuestionResponseBody struct {
	// Question ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Test ID
	TestID *int64 `form:"test_id,omitempty" json:"test_id,omitempty" xml:"test_id,omitempty"`
	// Question text
	QuestionText *string `form:"question_text,omitempty" json:"question_text,omitempty" xml:"question_text,omitempty"`
	// Option A
	OptionA *string `form:"option_a,omitempty" json:"option_a,omitempty" xml:"option_a,omitempty"`
	// Option B
	OptionB *string `form:"option_b,omitempty" json:"option_b,omitempty" xml:"option_b,omitempty"`
	// Option C
	OptionC *string `form:"option_c,omitempty" json:"option_c,omitempty" xml:"option_c,omitempty"`
	// Option D
	OptionD *string `form:"option_d,omitempty" json:"option_d,omitempty" xml:"option_d,omitempty"`
	// Correct answer (0=A, 1=B, 2=C, 3=D)
	CorrectAnswer *int `form:"correct_answer,omitempty" json:"correct_answer,omitempty" xml:"correct_answer,omitempty"`
	// Question order
	QuestionOrder *int `form:"question_order,omitempty" json:"question_order,omitempty" xml:"question_order,omitempty"`
}

// QuestionFormResponseBody is used to define fields on response body types.
type QuestionFormResponseBody struct {
	// Question ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Question text
	QuestionText *string `form:"question_text,omitempty" json:"question_text,omitempty" xml:"question_text,omitempty"`
	// Option A
	OptionA *string `form:"option_a,omitempty" json:"option_a,omitempty" xml:"option_a,omitempty"`
	// Option B
	OptionB *string `form:"option_b,omitempty" json:"option_b,omitempty" xml:"option_b,omitempty"`
	// Option C
	OptionC *string `form:"option_c,omitempty" json:"option_c,omitempty" xml:"option_c,omitempty"`
	// Option D
	OptionD *string `form:"option_d,omitempty" json:"option_d,omitempty" xml:"option_d,omitempty"`
	// Question order
	QuestionOrder *int `form:"question_order,omitempty" json:"question_order,omitempty" xml:"question_order,omitempty"`
}

// AnswerRequestBody is used to define fields on request body types.
type AnswerRequestBody struct {
	// Question ID
	QuestionID int64 `form:"question_id" json:"question_id" xml:"question_id"`
	// Selected answer (0=A, 1=B, 2=C, 3=D)
	SelectedAnswer int `form:"selected_answer" json:"selected_answer" xml:"selected_answer"`
}

// SubmissionResponseBody is used to define fields on response body types.
type SubmissionResponseBody struct {
	// Submission ID
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Test ID
	TestID *int64 `form:"test_id,omitempty" json:"test_id,omitempty" xml:"test_id,omitempty"`
	// Test title
	TestTitle *string `form:"test_title,omitempty" json:"test_title,omitempty" xml:"test_title,omitempty"`
	// Score percentage
	Score *float64 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Submission timestamp
	SubmittedAt *int64 `form:"submitted_at,omitempty" json:"submitted_at,omitempty" xml:"submitted_at,omitempty"`
}

// QuestionResultResponseBody is used to define fields on response body types.
type QuestionResultResponseBody struct {
	// Question info
	Question *QuestionResponseBody `form:"question,omitempty" json:"question,omitempty" xml:"question,omitempty"`
	// User selected answer
	SelectedAnswer *int `form:"selected_answer,omitempty" json:"selected_answer,omitempty" xml:"selected_answer,omitempty"`
	// Whether answer was correct
	IsCorrect *bool `form:"is_correct,omitempty" json:"is_correct,omitempty" xml:"is_correct,omitempty"`
}

// NewCreateTestRequestBody builds the HTTP request body from the payload of
// the "CreateTest" endpoint of the "knowledge" service.
func NewCreateTestRequestBody(p *knowledge.CreateTestPayload) *CreateTestRequestBody {
	body := &CreateTestRequestBody{
		Title: p.Title,
	}
	return body
}

// NewUpdateTestRequestBody builds the HTTP request body from the payload of
// the "UpdateTest" endpoint of the "knowledge" service.
func NewUpdateTestRequestBody(p *knowledge.UpdateTestPayload) *UpdateTestRequestBody {
	body := &UpdateTestRequestBody{
		Title: p.Title,
	}
	return body
}

// NewAddQuestionRequestBody builds the HTTP request body from the payload of
// the "AddQuestion" endpoint of the "knowledge" service.
func NewAddQuestionRequestBody(p *knowledge.AddQuestionPayload) *AddQuestionRequestBody {
	body := &AddQuestionRequestBody{
		QuestionText:  p.QuestionText,
		OptionA:       p.OptionA,
		OptionB:       p.OptionB,
		OptionC:       p.OptionC,
		OptionD:       p.OptionD,
		CorrectAnswer: p.CorrectAnswer,
	}
	return body
}

// NewUpdateQuestionRequestBody builds the HTTP request body from the payload
// of the "UpdateQuestion" endpoint of the "knowledge" service.
func NewUpdateQuestionRequestBody(p *knowledge.UpdateQuestionPayload) *UpdateQuestionRequestBody {
	body := &UpdateQuestionRequestBody{
		QuestionText:  p.QuestionText,
		OptionA:       p.OptionA,
		OptionB:       p.OptionB,
		OptionC:       p.OptionC,
		OptionD:       p.OptionD,
		CorrectAnswer: p.CorrectAnswer,
	}
	return body
}

// NewSubmitTestRequestBody builds the HTTP request body from the payload of
// the "SubmitTest" endpoint of the "knowledge" service.
func NewSubmitTestRequestBody(p *knowledge.SubmitTestPayload) *SubmitTestRequestBody {
	body := &SubmitTestRequestBody{}
	if p.Answers != nil {
		body.Answers = make([]*AnswerRequestBody, len(p.Answers))
		for i, val := range p.Answers {
			body.Answers[i] = marshalKnowledgeAnswerToAnswerRequestBody(val)
		}
	} else {
		body.Answers = []*AnswerRequestBody{}
	}
	return body
}

// NewCreateTestSimpleResponseCreated builds a "knowledge" service "CreateTest"
// endpoint result from a HTTP "Created" response.
func NewCreateTestSimpleResponseCreated(body *CreateTestResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateTestInvalidInput builds a knowledge service CreateTest endpoint
// invalid_input error.
func NewCreateTestInvalidInput(body string) knowledge.InvalidInput {
	v := knowledge.InvalidInput(body)

	return v
}

// NewCreateTestUnauthorized builds a knowledge service CreateTest endpoint
// unauthorized error.
func NewCreateTestUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetMyTestsTestsResponseOK builds a "knowledge" service "GetMyTests"
// endpoint result from a HTTP "OK" response.
func NewGetMyTestsTestsResponseOK(body *GetMyTestsResponseBody) *knowledge.TestsResponse {
	v := &knowledge.TestsResponse{}
	v.Tests = make([]*knowledge.Test, len(body.Tests))
	for i, val := range body.Tests {
		v.Tests[i] = unmarshalTestResponseBodyToKnowledgeTest(val)
	}

	return v
}

// NewGetMyTestsUnauthorized builds a knowledge service GetMyTests endpoint
// unauthorized error.
func NewGetMyTestsUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetTestByIDTestResponseOK builds a "knowledge" service "GetTestById"
// endpoint result from a HTTP "OK" response.
func NewGetTestByIDTestResponseOK(body *GetTestByIDResponseBody) *knowledge.TestResponse {
	v := &knowledge.TestResponse{}
	v.Test = unmarshalTestResponseBodyToKnowledgeTest(body.Test)

	return v
}

// NewGetTestByIDTestNotFound builds a knowledge service GetTestById endpoint
// test_not_found error.
func NewGetTestByIDTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewGetTestByIDUnauthorized builds a knowledge service GetTestById endpoint
// unauthorized error.
func NewGetTestByIDUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewUpdateTestSimpleResponseOK builds a "knowledge" service "UpdateTest"
// endpoint result from a HTTP "OK" response.
func NewUpdateTestSimpleResponseOK(body *UpdateTestResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateTestTestNotFound builds a knowledge service UpdateTest endpoint
// test_not_found error.
func NewUpdateTestTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewUpdateTestUnauthorized builds a knowledge service UpdateTest endpoint
// unauthorized error.
func NewUpdateTestUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewDeleteTestSimpleResponseOK builds a "knowledge" service "DeleteTest"
// endpoint result from a HTTP "OK" response.
func NewDeleteTestSimpleResponseOK(body *DeleteTestResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteTestTestNotFound builds a knowledge service DeleteTest endpoint
// test_not_found error.
func NewDeleteTestTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewDeleteTestUnauthorized builds a knowledge service DeleteTest endpoint
// unauthorized error.
func NewDeleteTestUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetTestQuestionsQuestionsResponseOK builds a "knowledge" service
// "GetTestQuestions" endpoint result from a HTTP "OK" response.
func NewGetTestQuestionsQuestionsResponseOK(body *GetTestQuestionsResponseBody) *knowledge.QuestionsResponse {
	v := &knowledge.QuestionsResponse{}
	v.Questions = make([]*knowledge.Question, len(body.Questions))
	for i, val := range body.Questions {
		v.Questions[i] = unmarshalQuestionResponseBodyToKnowledgeQuestion(val)
	}

	return v
}

// NewGetTestQuestionsTestNotFound builds a knowledge service GetTestQuestions
// endpoint test_not_found error.
func NewGetTestQuestionsTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewGetTestQuestionsUnauthorized builds a knowledge service GetTestQuestions
// endpoint unauthorized error.
func NewGetTestQuestionsUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewAddQuestionSimpleResponseCreated builds a "knowledge" service
// "AddQuestion" endpoint result from a HTTP "Created" response.
func NewAddQuestionSimpleResponseCreated(body *AddQuestionResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewAddQuestionInvalidInput builds a knowledge service AddQuestion endpoint
// invalid_input error.
func NewAddQuestionInvalidInput(body string) knowledge.InvalidInput {
	v := knowledge.InvalidInput(body)

	return v
}

// NewAddQuestionTestNotFound builds a knowledge service AddQuestion endpoint
// test_not_found error.
func NewAddQuestionTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewAddQuestionUnauthorized builds a knowledge service AddQuestion endpoint
// unauthorized error.
func NewAddQuestionUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetQuestionByIDQuestionResponseOK builds a "knowledge" service
// "GetQuestionById" endpoint result from a HTTP "OK" response.
func NewGetQuestionByIDQuestionResponseOK(body *GetQuestionByIDResponseBody) *knowledge.QuestionResponse {
	v := &knowledge.QuestionResponse{}
	v.Question = unmarshalQuestionResponseBodyToKnowledgeQuestion(body.Question)

	return v
}

// NewGetQuestionByIDQuestionNotFound builds a knowledge service
// GetQuestionById endpoint question_not_found error.
func NewGetQuestionByIDQuestionNotFound(body string) knowledge.QuestionNotFound {
	v := knowledge.QuestionNotFound(body)

	return v
}

// NewGetQuestionByIDTestNotFound builds a knowledge service GetQuestionById
// endpoint test_not_found error.
func NewGetQuestionByIDTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewGetQuestionByIDUnauthorized builds a knowledge service GetQuestionById
// endpoint unauthorized error.
func NewGetQuestionByIDUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewUpdateQuestionSimpleResponseOK builds a "knowledge" service
// "UpdateQuestion" endpoint result from a HTTP "OK" response.
func NewUpdateQuestionSimpleResponseOK(body *UpdateQuestionResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateQuestionQuestionNotFound builds a knowledge service UpdateQuestion
// endpoint question_not_found error.
func NewUpdateQuestionQuestionNotFound(body string) knowledge.QuestionNotFound {
	v := knowledge.QuestionNotFound(body)

	return v
}

// NewUpdateQuestionTestNotFound builds a knowledge service UpdateQuestion
// endpoint test_not_found error.
func NewUpdateQuestionTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewUpdateQuestionUnauthorized builds a knowledge service UpdateQuestion
// endpoint unauthorized error.
func NewUpdateQuestionUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewDeleteQuestionSimpleResponseOK builds a "knowledge" service
// "DeleteQuestion" endpoint result from a HTTP "OK" response.
func NewDeleteQuestionSimpleResponseOK(body *DeleteQuestionResponseBody) *knowledge.SimpleResponse {
	v := &knowledge.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteQuestionQuestionNotFound builds a knowledge service DeleteQuestion
// endpoint question_not_found error.
func NewDeleteQuestionQuestionNotFound(body string) knowledge.QuestionNotFound {
	v := knowledge.QuestionNotFound(body)

	return v
}

// NewDeleteQuestionTestNotFound builds a knowledge service DeleteQuestion
// endpoint test_not_found error.
func NewDeleteQuestionTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewDeleteQuestionUnauthorized builds a knowledge service DeleteQuestion
// endpoint unauthorized error.
func NewDeleteQuestionUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetAvailableTestsTestsResponseOK builds a "knowledge" service
// "GetAvailableTests" endpoint result from a HTTP "OK" response.
func NewGetAvailableTestsTestsResponseOK(body *GetAvailableTestsResponseBody) *knowledge.TestsResponse {
	v := &knowledge.TestsResponse{}
	v.Tests = make([]*knowledge.Test, len(body.Tests))
	for i, val := range body.Tests {
		v.Tests[i] = unmarshalTestResponseBodyToKnowledgeTest(val)
	}

	return v
}

// NewGetAvailableTestsUnauthorized builds a knowledge service
// GetAvailableTests endpoint unauthorized error.
func NewGetAvailableTestsUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetTestFormFormResponseOK builds a "knowledge" service "GetTestForm"
// endpoint result from a HTTP "OK" response.
func NewGetTestFormFormResponseOK(body *GetTestFormResponseBody) *knowledge.FormResponse {
	v := &knowledge.FormResponse{}
	v.Test = unmarshalTestResponseBodyToKnowledgeTest(body.Test)
	v.Questions = make([]*knowledge.QuestionForm, len(body.Questions))
	for i, val := range body.Questions {
		v.Questions[i] = unmarshalQuestionFormResponseBodyToKnowledgeQuestionForm(val)
	}

	return v
}

// NewGetTestFormTestAlreadySubmitted builds a knowledge service GetTestForm
// endpoint test_already_submitted error.
func NewGetTestFormTestAlreadySubmitted(body string) knowledge.TestAlreadySubmitted {
	v := knowledge.TestAlreadySubmitted(body)

	return v
}

// NewGetTestFormTestNotFound builds a knowledge service GetTestForm endpoint
// test_not_found error.
func NewGetTestFormTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewGetTestFormUnauthorized builds a knowledge service GetTestForm endpoint
// unauthorized error.
func NewGetTestFormUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewSubmitTestSubmitResponseOK builds a "knowledge" service "SubmitTest"
// endpoint result from a HTTP "OK" response.
func NewSubmitTestSubmitResponseOK(body *SubmitTestResponseBody) *knowledge.SubmitResponse {
	v := &knowledge.SubmitResponse{
		Success:      *body.Success,
		Message:      *body.Message,
		SubmissionID: *body.SubmissionID,
		Score:        *body.Score,
	}

	return v
}

// NewSubmitTestInvalidInput builds a knowledge service SubmitTest endpoint
// invalid_input error.
func NewSubmitTestInvalidInput(body string) knowledge.InvalidInput {
	v := knowledge.InvalidInput(body)

	return v
}

// NewSubmitTestTestAlreadySubmitted builds a knowledge service SubmitTest
// endpoint test_already_submitted error.
func NewSubmitTestTestAlreadySubmitted(body string) knowledge.TestAlreadySubmitted {
	v := knowledge.TestAlreadySubmitted(body)

	return v
}

// NewSubmitTestTestNotFound builds a knowledge service SubmitTest endpoint
// test_not_found error.
func NewSubmitTestTestNotFound(body string) knowledge.TestNotFound {
	v := knowledge.TestNotFound(body)

	return v
}

// NewSubmitTestUnauthorized builds a knowledge service SubmitTest endpoint
// unauthorized error.
func NewSubmitTestUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetMySubmissionsSubmissionsResponseOK builds a "knowledge" service
// "GetMySubmissions" endpoint result from a HTTP "OK" response.
func NewGetMySubmissionsSubmissionsResponseOK(body *GetMySubmissionsResponseBody) *knowledge.SubmissionsResponse {
	v := &knowledge.SubmissionsResponse{}
	v.Submissions = make([]*knowledge.Submission, len(body.Submissions))
	for i, val := range body.Submissions {
		v.Submissions[i] = unmarshalSubmissionResponseBodyToKnowledgeSubmission(val)
	}

	return v
}

// NewGetMySubmissionsUnauthorized builds a knowledge service GetMySubmissions
// endpoint unauthorized error.
func NewGetMySubmissionsUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetSubmissionByIDSubmissionResponseOK builds a "knowledge" service
// "GetSubmissionById" endpoint result from a HTTP "OK" response.
func NewGetSubmissionByIDSubmissionResponseOK(body *GetSubmissionByIDResponseBody) *knowledge.SubmissionResponse {
	v := &knowledge.SubmissionResponse{}
	v.Submission = unmarshalSubmissionResponseBodyToKnowledgeSubmission(body.Submission)

	return v
}

// NewGetSubmissionByIDSubmissionNotFound builds a knowledge service
// GetSubmissionById endpoint submission_not_found error.
func NewGetSubmissionByIDSubmissionNotFound(body string) knowledge.SubmissionNotFound {
	v := knowledge.SubmissionNotFound(body)

	return v
}

// NewGetSubmissionByIDUnauthorized builds a knowledge service
// GetSubmissionById endpoint unauthorized error.
func NewGetSubmissionByIDUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// NewGetSubmissionResultSubmissionResultOK builds a "knowledge" service
// "GetSubmissionResult" endpoint result from a HTTP "OK" response.
func NewGetSubmissionResultSubmissionResultOK(body *GetSubmissionResultResponseBody) *knowledge.SubmissionResult {
	v := &knowledge.SubmissionResult{}
	v.Submission = unmarshalSubmissionResponseBodyToKnowledgeSubmission(body.Submission)
	v.Questions = make([]*knowledge.QuestionResult, len(body.Questions))
	for i, val := range body.Questions {
		v.Questions[i] = unmarshalQuestionResultResponseBodyToKnowledgeQuestionResult(val)
	}

	return v
}

// NewGetSubmissionResultSubmissionNotFound builds a knowledge service
// GetSubmissionResult endpoint submission_not_found error.
func NewGetSubmissionResultSubmissionNotFound(body string) knowledge.SubmissionNotFound {
	v := knowledge.SubmissionNotFound(body)

	return v
}

// NewGetSubmissionResultUnauthorized builds a knowledge service
// GetSubmissionResult endpoint unauthorized error.
func NewGetSubmissionResultUnauthorized(body string) knowledge.Unauthorized {
	v := knowledge.Unauthorized(body)

	return v
}

// ValidateCreateTestResponseBody runs the validations defined on
// CreateTestResponseBody
func ValidateCreateTestResponseBody(body *CreateTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetMyTestsResponseBody runs the validations defined on
// GetMyTestsResponseBody
func ValidateGetMyTestsResponseBody(body *GetMyTestsResponseBody) (err error) {
	if body.Tests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tests", "body"))
	}
	for _, e := range body.Tests {
		if e != nil {
			if err2 := ValidateTestResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTestByIDResponseBody runs the validations defined on
// GetTestByIdResponseBody
func ValidateGetTestByIDResponseBody(body *GetTestByIDResponseBody) (err error) {
	if body.Test == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test", "body"))
	}
	if body.Test != nil {
		if err2 := ValidateTestResponseBody(body.Test); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateTestResponseBody runs the validations defined on
// UpdateTestResponseBody
func ValidateUpdateTestResponseBody(body *UpdateTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTestResponseBody runs the validations defined on
// DeleteTestResponseBody
func ValidateDeleteTestResponseBody(body *DeleteTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetTestQuestionsResponseBody runs the validations defined on
// GetTestQuestionsResponseBody
func ValidateGetTestQuestionsResponseBody(body *GetTestQuestionsResponseBody) (err error) {
	if body.Questions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("questions", "body"))
	}
	for _, e := range body.Questions {
		if e != nil {
			if err2 := ValidateQuestionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAddQuestionResponseBody runs the validations defined on
// AddQuestionResponseBody
func ValidateAddQuestionResponseBody(body *AddQuestionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetQuestionByIDResponseBody runs the validations defined on
// GetQuestionByIdResponseBody
func ValidateGetQuestionByIDResponseBody(body *GetQuestionByIDResponseBody) (err error) {
	if body.Question == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question", "body"))
	}
	if body.Question != nil {
		if err2 := ValidateQuestionResponseBody(body.Question); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateQuestionResponseBody runs the validations defined on
// UpdateQuestionResponseBody
func ValidateUpdateQuestionResponseBody(body *UpdateQuestionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteQuestionResponseBody runs the validations defined on
// DeleteQuestionResponseBody
func ValidateDeleteQuestionResponseBody(body *DeleteQuestionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetAvailableTestsResponseBody runs the validations defined on
// GetAvailableTestsResponseBody
func ValidateGetAvailableTestsResponseBody(body *GetAvailableTestsResponseBody) (err error) {
	if body.Tests == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tests", "body"))
	}
	for _, e := range body.Tests {
		if e != nil {
			if err2 := ValidateTestResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetTestFormResponseBody runs the validations defined on
// GetTestFormResponseBody
func ValidateGetTestFormResponseBody(body *GetTestFormResponseBody) (err error) {
	if body.Test == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test", "body"))
	}
	if body.Questions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("questions", "body"))
	}
	if body.Test != nil {
		if err2 := ValidateTestResponseBody(body.Test); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Questions {
		if e != nil {
			if err2 := ValidateQuestionFormResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubmitTestResponseBody runs the validations defined on
// SubmitTestResponseBody
func ValidateSubmitTestResponseBody(body *SubmitTestResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.SubmissionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission_id", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	return
}

// ValidateGetMySubmissionsResponseBody runs the validations defined on
// GetMySubmissionsResponseBody
func ValidateGetMySubmissionsResponseBody(body *GetMySubmissionsResponseBody) (err error) {
	if body.Submissions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submissions", "body"))
	}
	for _, e := range body.Submissions {
		if e != nil {
			if err2 := ValidateSubmissionResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetSubmissionByIDResponseBody runs the validations defined on
// GetSubmissionByIdResponseBody
func ValidateGetSubmissionByIDResponseBody(body *GetSubmissionByIDResponseBody) (err error) {
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Submission != nil {
		if err2 := ValidateSubmissionResponseBody(body.Submission); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetSubmissionResultResponseBody runs the validations defined on
// GetSubmissionResultResponseBody
func ValidateGetSubmissionResultResponseBody(body *GetSubmissionResultResponseBody) (err error) {
	if body.Submission == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submission", "body"))
	}
	if body.Questions == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("questions", "body"))
	}
	if body.Submission != nil {
		if err2 := ValidateSubmissionResponseBody(body.Submission); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range body.Questions {
		if e != nil {
			if err2 := ValidateQuestionResultResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTestResponseBody runs the validations defined on TestResponseBody
func ValidateTestResponseBody(body *TestResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_by", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateQuestionResponseBody runs the validations defined on
// QuestionResponseBody
func ValidateQuestionResponseBody(body *QuestionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TestID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_id", "body"))
	}
	if body.QuestionText == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_text", "body"))
	}
	if body.OptionA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_a", "body"))
	}
	if body.OptionB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_b", "body"))
	}
	if body.OptionC == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_c", "body"))
	}
	if body.OptionD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_d", "body"))
	}
	if body.CorrectAnswer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("correct_answer", "body"))
	}
	if body.QuestionOrder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_order", "body"))
	}
	return
}

// ValidateQuestionFormResponseBody runs the validations defined on
// QuestionFormResponseBody
func ValidateQuestionFormResponseBody(body *QuestionFormResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.QuestionText == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_text", "body"))
	}
	if body.OptionA == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_a", "body"))
	}
	if body.OptionB == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_b", "body"))
	}
	if body.OptionC == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_c", "body"))
	}
	if body.OptionD == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("option_d", "body"))
	}
	if body.QuestionOrder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question_order", "body"))
	}
	return
}

// ValidateSubmissionResponseBody runs the validations defined on
// SubmissionResponseBody
func ValidateSubmissionResponseBody(body *SubmissionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TestID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_id", "body"))
	}
	if body.TestTitle == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("test_title", "body"))
	}
	if body.Score == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("score", "body"))
	}
	if body.SubmittedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("submitted_at", "body"))
	}
	return
}

// ValidateQuestionResultResponseBody runs the validations defined on
// QuestionResultResponseBody
func ValidateQuestionResultResponseBody(body *QuestionResultResponseBody) (err error) {
	if body.Question == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("question", "body"))
	}
	if body.SelectedAnswer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("selected_answer", "body"))
	}
	if body.IsCorrect == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_correct", "body"))
	}
	if body.Question != nil {
		if err2 := ValidateQuestionResponseBody(body.Question); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
