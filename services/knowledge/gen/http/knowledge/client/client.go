// Code generated by goa v3.21.1, DO NOT EDIT.
//
// knowledge client HTTP transport
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/knowledge/design/api
// -o ./services/knowledge/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the knowledge service endpoint HTTP clients.
type Client struct {
	// CreateTest Doer is the HTTP client used to make requests to the CreateTest
	// endpoint.
	CreateTestDoer goahttp.Doer

	// GetMyTests Doer is the HTTP client used to make requests to the GetMyTests
	// endpoint.
	GetMyTestsDoer goahttp.Doer

	// GetTestByID Doer is the HTTP client used to make requests to the GetTestById
	// endpoint.
	GetTestByIDDoer goahttp.Doer

	// UpdateTest Doer is the HTTP client used to make requests to the UpdateTest
	// endpoint.
	UpdateTestDoer goahttp.Doer

	// DeleteTest Doer is the HTTP client used to make requests to the DeleteTest
	// endpoint.
	DeleteTestDoer goahttp.Doer

	// GetTestQuestions Doer is the HTTP client used to make requests to the
	// GetTestQuestions endpoint.
	GetTestQuestionsDoer goahttp.Doer

	// AddQuestion Doer is the HTTP client used to make requests to the AddQuestion
	// endpoint.
	AddQuestionDoer goahttp.Doer

	// GetQuestionByID Doer is the HTTP client used to make requests to the
	// GetQuestionById endpoint.
	GetQuestionByIDDoer goahttp.Doer

	// UpdateQuestion Doer is the HTTP client used to make requests to the
	// UpdateQuestion endpoint.
	UpdateQuestionDoer goahttp.Doer

	// DeleteQuestion Doer is the HTTP client used to make requests to the
	// DeleteQuestion endpoint.
	DeleteQuestionDoer goahttp.Doer

	// GetAvailableTests Doer is the HTTP client used to make requests to the
	// GetAvailableTests endpoint.
	GetAvailableTestsDoer goahttp.Doer

	// GetTestForm Doer is the HTTP client used to make requests to the GetTestForm
	// endpoint.
	GetTestFormDoer goahttp.Doer

	// SubmitTest Doer is the HTTP client used to make requests to the SubmitTest
	// endpoint.
	SubmitTestDoer goahttp.Doer

	// GetMySubmissions Doer is the HTTP client used to make requests to the
	// GetMySubmissions endpoint.
	GetMySubmissionsDoer goahttp.Doer

	// GetSubmissionByID Doer is the HTTP client used to make requests to the
	// GetSubmissionById endpoint.
	GetSubmissionByIDDoer goahttp.Doer

	// GetSubmissionResult Doer is the HTTP client used to make requests to the
	// GetSubmissionResult endpoint.
	GetSubmissionResultDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the knowledge service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateTestDoer:          doer,
		GetMyTestsDoer:          doer,
		GetTestByIDDoer:         doer,
		UpdateTestDoer:          doer,
		DeleteTestDoer:          doer,
		GetTestQuestionsDoer:    doer,
		AddQuestionDoer:         doer,
		GetQuestionByIDDoer:     doer,
		UpdateQuestionDoer:      doer,
		DeleteQuestionDoer:      doer,
		GetAvailableTestsDoer:   doer,
		GetTestFormDoer:         doer,
		SubmitTestDoer:          doer,
		GetMySubmissionsDoer:    doer,
		GetSubmissionByIDDoer:   doer,
		GetSubmissionResultDoer: doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// CreateTest returns an endpoint that makes HTTP requests to the knowledge
// service CreateTest server.
func (c *Client) CreateTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTestRequest(c.encoder)
		decodeResponse = DecodeCreateTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "CreateTest", err)
		}
		return decodeResponse(resp)
	}
}

// GetMyTests returns an endpoint that makes HTTP requests to the knowledge
// service GetMyTests server.
func (c *Client) GetMyTests() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMyTestsRequest(c.encoder)
		decodeResponse = DecodeGetMyTestsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMyTestsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMyTestsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetMyTests", err)
		}
		return decodeResponse(resp)
	}
}

// GetTestByID returns an endpoint that makes HTTP requests to the knowledge
// service GetTestById server.
func (c *Client) GetTestByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTestByIDRequest(c.encoder)
		decodeResponse = DecodeGetTestByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTestByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTestByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetTestById", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTest returns an endpoint that makes HTTP requests to the knowledge
// service UpdateTest server.
func (c *Client) UpdateTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateTestRequest(c.encoder)
		decodeResponse = DecodeUpdateTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "UpdateTest", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTest returns an endpoint that makes HTTP requests to the knowledge
// service DeleteTest server.
func (c *Client) DeleteTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTestRequest(c.encoder)
		decodeResponse = DecodeDeleteTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "DeleteTest", err)
		}
		return decodeResponse(resp)
	}
}

// GetTestQuestions returns an endpoint that makes HTTP requests to the
// knowledge service GetTestQuestions server.
func (c *Client) GetTestQuestions() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTestQuestionsRequest(c.encoder)
		decodeResponse = DecodeGetTestQuestionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTestQuestionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTestQuestionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetTestQuestions", err)
		}
		return decodeResponse(resp)
	}
}

// AddQuestion returns an endpoint that makes HTTP requests to the knowledge
// service AddQuestion server.
func (c *Client) AddQuestion() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddQuestionRequest(c.encoder)
		decodeResponse = DecodeAddQuestionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddQuestionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddQuestionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "AddQuestion", err)
		}
		return decodeResponse(resp)
	}
}

// GetQuestionByID returns an endpoint that makes HTTP requests to the
// knowledge service GetQuestionById server.
func (c *Client) GetQuestionByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetQuestionByIDRequest(c.encoder)
		decodeResponse = DecodeGetQuestionByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetQuestionByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetQuestionByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetQuestionById", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateQuestion returns an endpoint that makes HTTP requests to the knowledge
// service UpdateQuestion server.
func (c *Client) UpdateQuestion() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateQuestionRequest(c.encoder)
		decodeResponse = DecodeUpdateQuestionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateQuestionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateQuestionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "UpdateQuestion", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteQuestion returns an endpoint that makes HTTP requests to the knowledge
// service DeleteQuestion server.
func (c *Client) DeleteQuestion() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteQuestionRequest(c.encoder)
		decodeResponse = DecodeDeleteQuestionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteQuestionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteQuestionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "DeleteQuestion", err)
		}
		return decodeResponse(resp)
	}
}

// GetAvailableTests returns an endpoint that makes HTTP requests to the
// knowledge service GetAvailableTests server.
func (c *Client) GetAvailableTests() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAvailableTestsRequest(c.encoder)
		decodeResponse = DecodeGetAvailableTestsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAvailableTestsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAvailableTestsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetAvailableTests", err)
		}
		return decodeResponse(resp)
	}
}

// GetTestForm returns an endpoint that makes HTTP requests to the knowledge
// service GetTestForm server.
func (c *Client) GetTestForm() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTestFormRequest(c.encoder)
		decodeResponse = DecodeGetTestFormResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTestFormRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTestFormDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetTestForm", err)
		}
		return decodeResponse(resp)
	}
}

// SubmitTest returns an endpoint that makes HTTP requests to the knowledge
// service SubmitTest server.
func (c *Client) SubmitTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeSubmitTestRequest(c.encoder)
		decodeResponse = DecodeSubmitTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSubmitTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SubmitTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "SubmitTest", err)
		}
		return decodeResponse(resp)
	}
}

// GetMySubmissions returns an endpoint that makes HTTP requests to the
// knowledge service GetMySubmissions server.
func (c *Client) GetMySubmissions() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetMySubmissionsRequest(c.encoder)
		decodeResponse = DecodeGetMySubmissionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetMySubmissionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetMySubmissionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetMySubmissions", err)
		}
		return decodeResponse(resp)
	}
}

// GetSubmissionByID returns an endpoint that makes HTTP requests to the
// knowledge service GetSubmissionById server.
func (c *Client) GetSubmissionByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSubmissionByIDRequest(c.encoder)
		decodeResponse = DecodeGetSubmissionByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSubmissionByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSubmissionByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetSubmissionById", err)
		}
		return decodeResponse(resp)
	}
}

// GetSubmissionResult returns an endpoint that makes HTTP requests to the
// knowledge service GetSubmissionResult server.
func (c *Client) GetSubmissionResult() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSubmissionResultRequest(c.encoder)
		decodeResponse = DecodeGetSubmissionResultResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSubmissionResultRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSubmissionResultDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("knowledge", "GetSubmissionResult", err)
		}
		return decodeResponse(resp)
	}
}
