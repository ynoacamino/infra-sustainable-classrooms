// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package server

import (
	"context"
	"errors"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	authpb "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the authpb.AuthServer interface.
type Server struct {
	ValidateUserH goagrpc.UnaryHandler
	GetUserByIDH  goagrpc.UnaryHandler
	authpb.UnimplementedAuthServer
}

// New instantiates the server struct with the auth service endpoints.
func New(e *auth.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ValidateUserH: NewValidateUserHandler(e.ValidateUser, uh),
		GetUserByIDH:  NewGetUserByIDHandler(e.GetUserByID, uh),
	}
}

// NewValidateUserHandler creates a gRPC handler which serves the "auth"
// service "ValidateUser" endpoint.
func NewValidateUserHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeValidateUserRequest, EncodeValidateUserResponse)
	}
	return h
}

// ValidateUser implements the "ValidateUser" method in authpb.AuthServer
// interface.
func (s *Server) ValidateUser(ctx context.Context, message *authpb.ValidateUserRequest) (*authpb.ValidateUserResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ValidateUser")
	ctx = context.WithValue(ctx, goa.ServiceKey, "auth")
	resp, err := s.ValidateUserH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*authpb.ValidateUserResponse), nil
}

// NewGetUserByIDHandler creates a gRPC handler which serves the "auth" service
// "GetUserByID" endpoint.
func NewGetUserByIDHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetUserByIDRequest, EncodeGetUserByIDResponse)
	}
	return h
}

// GetUserByID implements the "GetUserByID" method in authpb.AuthServer
// interface.
func (s *Server) GetUserByID(ctx context.Context, message *authpb.GetUserByIDRequest) (*authpb.GetUserByIDResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetUserByID")
	ctx = context.WithValue(ctx, goa.ServiceKey, "auth")
	resp, err := s.GetUserByIDH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "user_not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*authpb.GetUserByIDResponse), nil
}
