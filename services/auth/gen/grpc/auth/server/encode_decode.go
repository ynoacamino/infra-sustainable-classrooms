// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package server

import (
	"context"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	authpb "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeValidateUserResponse encodes responses from the "auth" service
// "ValidateUser" endpoint.
func EncodeValidateUserResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*auth.UserValidationResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "ValidateUser", "*auth.UserValidationResponse", v)
	}
	resp := NewProtoValidateUserResponse(result)
	return resp, nil
}

// DecodeValidateUserRequest decodes requests sent to "auth" service
// "ValidateUser" endpoint.
func DecodeValidateUserRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *authpb.ValidateUserRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.ValidateUserRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "ValidateUser", "*authpb.ValidateUserRequest", v)
		}
	}
	var payload *auth.ValidateUserPayload
	{
		payload = NewValidateUserPayload(message)
	}
	return payload, nil
}

// EncodeGetUserByIDResponse encodes responses from the "auth" service
// "GetUserByID" endpoint.
func EncodeGetUserByIDResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*auth.User)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "GetUserByID", "*auth.User", v)
	}
	resp := NewProtoGetUserByIDResponse(result)
	return resp, nil
}

// DecodeGetUserByIDRequest decodes requests sent to "auth" service
// "GetUserByID" endpoint.
func DecodeGetUserByIDRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *authpb.GetUserByIDRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.GetUserByIDRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "GetUserByID", "*authpb.GetUserByIDRequest", v)
		}
		if err := ValidateGetUserByIDRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *auth.GetUserByIDPayload
	{
		payload = NewGetUserByIDPayload(message)
	}
	return payload, nil
}
