// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package client

import (
	"context"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	authpb "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildValidateUserFunc builds the remote method to invoke for "auth" service
// "ValidateUser" endpoint.
func BuildValidateUserFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.ValidateUser(ctx, reqpb.(*authpb.ValidateUserRequest), opts...)
		}
		return grpccli.ValidateUser(ctx, &authpb.ValidateUserRequest{}, opts...)
	}
}

// EncodeValidateUserRequest encodes requests sent to auth ValidateUser
// endpoint.
func EncodeValidateUserRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*auth.ValidateUserPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "ValidateUser", "*auth.ValidateUserPayload", v)
	}
	return NewProtoValidateUserRequest(payload), nil
}

// DecodeValidateUserResponse decodes responses from the auth ValidateUser
// endpoint.
func DecodeValidateUserResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*authpb.ValidateUserResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "ValidateUser", "*authpb.ValidateUserResponse", v)
	}
	res := NewValidateUserResult(message)
	return res, nil
}

// BuildGetUserByIDFunc builds the remote method to invoke for "auth" service
// "GetUserByID" endpoint.
func BuildGetUserByIDFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetUserByID(ctx, reqpb.(*authpb.GetUserByIDRequest), opts...)
		}
		return grpccli.GetUserByID(ctx, &authpb.GetUserByIDRequest{}, opts...)
	}
}

// EncodeGetUserByIDRequest encodes requests sent to auth GetUserByID endpoint.
func EncodeGetUserByIDRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*auth.GetUserByIDPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "GetUserByID", "*auth.GetUserByIDPayload", v)
	}
	return NewProtoGetUserByIDRequest(payload), nil
}

// DecodeGetUserByIDResponse decodes responses from the auth GetUserByID
// endpoint.
func DecodeGetUserByIDResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*authpb.GetUserByIDResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "GetUserByID", "*authpb.GetUserByIDResponse", v)
	}
	res := NewGetUserByIDResult(message)
	return res, nil
}
