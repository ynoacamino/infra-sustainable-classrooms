// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package client

import (
	"encoding/json"
	"fmt"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	authpb "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/pb"
)

// BuildValidateUserPayload builds the payload for the auth ValidateUser
// endpoint from CLI flags.
func BuildValidateUserPayload(authValidateUserMessage string) (*auth.ValidateUserPayload, error) {
	var err error
	var message authpb.ValidateUserRequest
	{
		if authValidateUserMessage != "" {
			err = json.Unmarshal([]byte(authValidateUserMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"session_token\": \"Ut aut quo.\"\n   }'")
			}
		}
	}
	v := &auth.ValidateUserPayload{
		SessionToken: message.SessionToken,
	}

	return v, nil
}

// BuildGetUserByIDPayload builds the payload for the auth GetUserByID endpoint
// from CLI flags.
func BuildGetUserByIDPayload(authGetUserByIDMessage string) (*auth.GetUserByIDPayload, error) {
	var err error
	var message authpb.GetUserByIDRequest
	{
		if authGetUserByIDMessage != "" {
			err = json.Unmarshal([]byte(authGetUserByIDMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user_id\": 6456898094249853611\n   }'")
			}
		}
	}
	v := &auth.GetUserByIDPayload{
		UserID: message.UserId,
	}

	return v, nil
}
