// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package client

import (
	"context"

	authpb "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli authpb.AuthClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the auth service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: authpb.NewAuthClient(cc),
		opts:    opts,
	}
}

// ValidateUser calls the "ValidateUser" function in authpb.AuthClient
// interface.
func (c *Client) ValidateUser() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildValidateUserFunc(c.grpccli, c.opts...),
			EncodeValidateUserRequest,
			DecodeValidateUserResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// GetUserByID calls the "GetUserByID" function in authpb.AuthClient interface.
func (c *Client) GetUserByID() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGetUserByIDFunc(c.grpccli, c.opts...),
			EncodeGetUserByIDRequest,
			DecodeGetUserByIDResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}
