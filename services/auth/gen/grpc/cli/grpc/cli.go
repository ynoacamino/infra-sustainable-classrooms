// Code generated by goa v3.21.1, DO NOT EDIT.
//
// grpc gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package cli

import (
	"flag"
	"fmt"
	"os"

	authc "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/grpc/auth/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (validate-user|get-user-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth validate-user --message '{
      "session_token": "Ut aut quo."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authValidateUserFlags       = flag.NewFlagSet("validate-user", flag.ExitOnError)
		authValidateUserMessageFlag = authValidateUserFlags.String("message", "", "")

		authGetUserByIDFlags       = flag.NewFlagSet("get-user-by-id", flag.ExitOnError)
		authGetUserByIDMessageFlag = authGetUserByIDFlags.String("message", "", "")
	)
	authFlags.Usage = authUsage
	authValidateUserFlags.Usage = authValidateUserUsage
	authGetUserByIDFlags.Usage = authGetUserByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "validate-user":
				epf = authValidateUserFlags

			case "get-user-by-id":
				epf = authGetUserByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(cc, opts...)
			switch epn {
			case "validate-user":
				endpoint = c.ValidateUser()
				data, err = authc.BuildValidateUserPayload(*authValidateUserMessageFlag)
			case "get-user-by-id":
				endpoint = c.GetUserByID()
				data, err = authc.BuildGetUserByIDPayload(*authGetUserByIDMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Authentication microservice with OTP support
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    validate-user: Validate user session and get user information - for gRPC inter-service communication
    get-user-by-id: Get user information by user ID - for gRPC inter-service communication

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authValidateUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth validate-user -message JSON

Validate user session and get user information - for gRPC inter-service communication
    -message JSON: 

Example:
    %[1]s auth validate-user --message '{
      "session_token": "Ut aut quo."
   }'
`, os.Args[0])
}

func authGetUserByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth get-user-by-id -message JSON

Get user information by user ID - for gRPC inter-service communication
    -message JSON: 

Example:
    %[1]s auth get-user-by-id --message '{
      "user_id": 6456898094249853611
   }'
`, os.Args[0])
}
