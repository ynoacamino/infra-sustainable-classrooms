// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package authdb

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    identifier,
    totp_secret,
    is_verified,
    metadata
) VALUES (
    $1, $2, $3, $4
) RETURNING id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata
`

type CreateUserParams struct {
	Identifier string
	TotpSecret string
	IsVerified bool
	Metadata   []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Identifier,
		arg.TotpSecret,
		arg.IsVerified,
		arg.Metadata,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata FROM users
WHERE identifier = $1
`

func (q *Queries) GetUserByIdentifier(ctx context.Context, identifier string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, identifier)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT 
    COUNT(*) as total_users,
    COUNT(*) FILTER (WHERE is_verified = true) as verified_users,
    COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '24 hours') as users_last_24h
FROM users
`

type GetUserStatsRow struct {
	TotalUsers    int64
	VerifiedUsers int64
	UsersLast24h  int64
}

func (q *Queries) GetUserStats(ctx context.Context) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats)
	var i GetUserStatsRow
	err := row.Scan(&i.TotalUsers, &i.VerifiedUsers, &i.UsersLast24h)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET 
    last_login = NOW(),
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}

const updateUserMetadata = `-- name: UpdateUserMetadata :one
UPDATE users
SET 
    metadata = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata
`

type UpdateUserMetadataParams struct {
	ID       int64
	Metadata []byte
}

func (q *Queries) UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserMetadata, arg.ID, arg.Metadata)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}

const updateUserTOTPSecret = `-- name: UpdateUserTOTPSecret :one
UPDATE users
SET 
    totp_secret = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata
`

type UpdateUserTOTPSecretParams struct {
	ID         int64
	TotpSecret string
}

func (q *Queries) UpdateUserTOTPSecret(ctx context.Context, arg UpdateUserTOTPSecretParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserTOTPSecret, arg.ID, arg.TotpSecret)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :one
UPDATE users
SET 
    is_verified = true,
    updated_at = NOW()
WHERE id = $1
RETURNING id, identifier, totp_secret, is_verified, created_at, updated_at, last_login, metadata
`

func (q *Queries) VerifyUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, verifyUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.TotpSecret,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Metadata,
	)
	return i, err
}
