// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth_attempts.sql

package authdb

import (
	"context"
	"net/netip"
)

const cleanupOldAuthAttempts = `-- name: CleanupOldAuthAttempts :exec
DELETE FROM auth_attempts
WHERE attempted_at < NOW() - INTERVAL '7 days'
`

func (q *Queries) CleanupOldAuthAttempts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupOldAuthAttempts)
	return err
}

const countRecentFailedAttempts = `-- name: CountRecentFailedAttempts :one
SELECT COUNT(*) FROM auth_attempts
WHERE identifier = $1 
AND success = false 
AND attempted_at > NOW() - INTERVAL '15 minutes'
`

func (q *Queries) CountRecentFailedAttempts(ctx context.Context, identifier string) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentFailedAttempts, identifier)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countRecentFailedAttemptsByIP = `-- name: CountRecentFailedAttemptsByIP :one
SELECT COUNT(*) FROM auth_attempts
WHERE ip_address = $1 
AND success = false 
AND attempted_at > NOW() - INTERVAL '15 minutes'
`

func (q *Queries) CountRecentFailedAttemptsByIP(ctx context.Context, ipAddress netip.Addr) (int64, error) {
	row := q.db.QueryRow(ctx, countRecentFailedAttemptsByIP, ipAddress)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAuthStats = `-- name: GetAuthStats :one
SELECT 
    COUNT(*) as total_attempts,
    COUNT(*) FILTER (WHERE success = true) as successful_attempts,
    COUNT(*) FILTER (WHERE success = false) as failed_attempts,
    COUNT(*) FILTER (WHERE attempted_at > NOW() - INTERVAL '24 hours') as attempts_last_24h,
    COUNT(*) FILTER (WHERE success = true AND attempted_at > NOW() - INTERVAL '24 hours') as successful_last_24h
FROM auth_attempts
`

type GetAuthStatsRow struct {
	TotalAttempts      int64
	SuccessfulAttempts int64
	FailedAttempts     int64
	AttemptsLast24h    int64
	SuccessfulLast24h  int64
}

func (q *Queries) GetAuthStats(ctx context.Context) (GetAuthStatsRow, error) {
	row := q.db.QueryRow(ctx, getAuthStats)
	var i GetAuthStatsRow
	err := row.Scan(
		&i.TotalAttempts,
		&i.SuccessfulAttempts,
		&i.FailedAttempts,
		&i.AttemptsLast24h,
		&i.SuccessfulLast24h,
	)
	return i, err
}

const getLastSuccessfulAttempt = `-- name: GetLastSuccessfulAttempt :one
SELECT id, identifier, ip_address, attempt_type, success, attempted_at FROM auth_attempts
WHERE identifier = $1 
AND success = true 
ORDER BY attempted_at DESC 
LIMIT 1
`

func (q *Queries) GetLastSuccessfulAttempt(ctx context.Context, identifier string) (AuthAttempt, error) {
	row := q.db.QueryRow(ctx, getLastSuccessfulAttempt, identifier)
	var i AuthAttempt
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.IpAddress,
		&i.AttemptType,
		&i.Success,
		&i.AttemptedAt,
	)
	return i, err
}

const getRecentAttempts = `-- name: GetRecentAttempts :many
SELECT id, identifier, ip_address, attempt_type, success, attempted_at FROM auth_attempts
WHERE identifier = $1 
AND attempted_at > NOW() - INTERVAL '1 hour'
ORDER BY attempted_at DESC
`

func (q *Queries) GetRecentAttempts(ctx context.Context, identifier string) ([]AuthAttempt, error) {
	rows, err := q.db.Query(ctx, getRecentAttempts, identifier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthAttempt
	for rows.Next() {
		var i AuthAttempt
		if err := rows.Scan(
			&i.ID,
			&i.Identifier,
			&i.IpAddress,
			&i.AttemptType,
			&i.Success,
			&i.AttemptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentAttemptsByIP = `-- name: GetRecentAttemptsByIP :many
SELECT id, identifier, ip_address, attempt_type, success, attempted_at FROM auth_attempts
WHERE ip_address = $1 
AND attempted_at > NOW() - INTERVAL '1 hour'
ORDER BY attempted_at DESC
`

func (q *Queries) GetRecentAttemptsByIP(ctx context.Context, ipAddress netip.Addr) ([]AuthAttempt, error) {
	rows, err := q.db.Query(ctx, getRecentAttemptsByIP, ipAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthAttempt
	for rows.Next() {
		var i AuthAttempt
		if err := rows.Scan(
			&i.ID,
			&i.Identifier,
			&i.IpAddress,
			&i.AttemptType,
			&i.Success,
			&i.AttemptedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordAuthAttempt = `-- name: RecordAuthAttempt :one
INSERT INTO auth_attempts (
    identifier,
    ip_address,
    attempt_type,
    success
) VALUES (
    $1, $2, $3, $4
) RETURNING id, identifier, ip_address, attempt_type, success, attempted_at
`

type RecordAuthAttemptParams struct {
	Identifier  string
	IpAddress   netip.Addr
	AttemptType string
	Success     bool
}

func (q *Queries) RecordAuthAttempt(ctx context.Context, arg RecordAuthAttemptParams) (AuthAttempt, error) {
	row := q.db.QueryRow(ctx, recordAuthAttempt,
		arg.Identifier,
		arg.IpAddress,
		arg.AttemptType,
		arg.Success,
	)
	var i AuthAttempt
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.IpAddress,
		&i.AttemptType,
		&i.Success,
		&i.AttemptedAt,
	)
	return i, err
}
