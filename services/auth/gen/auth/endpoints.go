// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	GenerateSecret   goa.Endpoint
	VerifyTOTP       goa.Endpoint
	VerifyBackupCode goa.Endpoint
	RefreshSession   goa.Endpoint
	ValidateUser     goa.Endpoint
	GetUserByID      goa.Endpoint
	Logout           goa.Endpoint
	GetUserProfile   goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GenerateSecret:   NewGenerateSecretEndpoint(s),
		VerifyTOTP:       NewVerifyTOTPEndpoint(s),
		VerifyBackupCode: NewVerifyBackupCodeEndpoint(s),
		RefreshSession:   NewRefreshSessionEndpoint(s),
		ValidateUser:     NewValidateUserEndpoint(s),
		GetUserByID:      NewGetUserByIDEndpoint(s),
		Logout:           NewLogoutEndpoint(s),
		GetUserProfile:   NewGetUserProfileEndpoint(s),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GenerateSecret = m(e.GenerateSecret)
	e.VerifyTOTP = m(e.VerifyTOTP)
	e.VerifyBackupCode = m(e.VerifyBackupCode)
	e.RefreshSession = m(e.RefreshSession)
	e.ValidateUser = m(e.ValidateUser)
	e.GetUserByID = m(e.GetUserByID)
	e.Logout = m(e.Logout)
	e.GetUserProfile = m(e.GetUserProfile)
}

// NewGenerateSecretEndpoint returns an endpoint function that calls the method
// "GenerateSecret" of service "auth".
func NewGenerateSecretEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GenerateSecretPayload)
		return s.GenerateSecret(ctx, p)
	}
}

// NewVerifyTOTPEndpoint returns an endpoint function that calls the method
// "VerifyTOTP" of service "auth".
func NewVerifyTOTPEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*VerifyTOTPPayload)
		return s.VerifyTOTP(ctx, p)
	}
}

// NewVerifyBackupCodeEndpoint returns an endpoint function that calls the
// method "VerifyBackupCode" of service "auth".
func NewVerifyBackupCodeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*VerifyBackupCodePayload)
		return s.VerifyBackupCode(ctx, p)
	}
}

// NewRefreshSessionEndpoint returns an endpoint function that calls the method
// "RefreshSession" of service "auth".
func NewRefreshSessionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RefreshSessionPayload)
		return s.RefreshSession(ctx, p)
	}
}

// NewValidateUserEndpoint returns an endpoint function that calls the method
// "ValidateUser" of service "auth".
func NewValidateUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ValidateUserPayload)
		return s.ValidateUser(ctx, p)
	}
}

// NewGetUserByIDEndpoint returns an endpoint function that calls the method
// "GetUserByID" of service "auth".
func NewGetUserByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetUserByIDPayload)
		return s.GetUserByID(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "Logout" of service "auth".
func NewLogoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		return s.Logout(ctx, p)
	}
}

// NewGetUserProfileEndpoint returns an endpoint function that calls the method
// "GetUserProfile" of service "auth".
func NewGetUserProfileEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetUserProfilePayload)
		return s.GetUserProfile(ctx, p)
	}
}
