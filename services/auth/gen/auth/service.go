// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package auth

import (
	"context"
)

// Authentication microservice with OTP support
type Service interface {
	// Generate TOTP secret for new user registration
	GenerateSecret(context.Context, *GenerateSecretPayload) (res *TOTPSecret, err error)
	// Verify TOTP code and authenticate user
	VerifyTOTP(context.Context, *VerifyTOTPPayload) (res *AuthResponse, err error)
	// Verify backup recovery code as alternative to TOTP
	VerifyBackupCode(context.Context, *VerifyBackupCodePayload) (res *BackupCodeResponse, err error)
	// Refresh user session using existing token
	RefreshSession(context.Context, *RefreshSessionPayload) (res *SimpleResponse, err error)
	// Validate user session and get user information - for gRPC inter-service
	// communication
	ValidateUser(context.Context, *ValidateUserPayload) (res *UserValidationResponse, err error)
	// Get user information by user ID - for gRPC inter-service communication
	GetUserByID(context.Context, *GetUserByIDPayload) (res *User, err error)
	// Logout user and invalidate session
	Logout(context.Context, *LogoutPayload) (res *SimpleResponse, err error)
	// Get authenticated user profile
	GetUserProfile(context.Context, *GetUserProfilePayload) (res *User, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "auth"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"GenerateSecret", "VerifyTOTP", "VerifyBackupCode", "RefreshSession", "ValidateUser", "GetUserByID", "Logout", "GetUserProfile"}

// AuthResponse is the result type of the auth service VerifyTOTP method.
type AuthResponse struct {
	// Authentication success status
	Success bool
	// Response message
	Message string
	// User information
	User *User
	// Session token for cookie
	SessionToken string
}

// BackupCodeResponse is the result type of the auth service VerifyBackupCode
// method.
type BackupCodeResponse struct {
	// Authentication success status
	Success bool
	// Response message
	Message string
	// User information
	User *User
	// Number of remaining backup codes
	RemainingCodes int
	// Session token for cookie
	SessionToken string
}

// Device information for security purposes
type DeviceInfo struct {
	// Browser/app user agent
	UserAgent *string
	// Client IP address
	IPAddress *string
	// Unique device identifier
	DeviceID *string
	// Platform (web, ios, android)
	Platform *string
}

// GenerateSecretPayload is the payload type of the auth service GenerateSecret
// method.
type GenerateSecretPayload struct {
	// User identifier (username/email)
	Identifier string
}

// GetUserByIDPayload is the payload type of the auth service GetUserByID
// method.
type GetUserByIDPayload struct {
	// User ID to retrieve
	UserID int64
}

// GetUserProfilePayload is the payload type of the auth service GetUserProfile
// method.
type GetUserProfilePayload struct {
	// Session token for authentication
	SessionToken string
}

// LogoutPayload is the payload type of the auth service Logout method.
type LogoutPayload struct {
	// Session token to invalidate
	SessionToken string
}

// RefreshSessionPayload is the payload type of the auth service RefreshSession
// method.
type RefreshSessionPayload struct {
	// Current session token
	SessionToken string
}

// User session information
type Session struct {
	// Session unique identifier
	ID int64
	// Associated user ID
	UserID int64
	// Session creation timestamp in milliseconds
	CreatedAt int64
	// Session expiration timestamp in milliseconds
	ExpiresAt int64
	// Last access timestamp in milliseconds
	LastAccessed *int64
	// Session active status
	IsActive bool
	// Browser/app user agent
	UserAgent *string
	// Client IP address
	IPAddress *string
	// Device identifier
	DeviceID *string
	// Platform (web, ios, android)
	Platform *string
}

// SimpleResponse is the result type of the auth service RefreshSession method.
type SimpleResponse struct {
	// Operation success status
	Success bool
	// Response message
	Message string
	// Session token for cookie (when applicable)
	SessionToken *string
}

// TOTPSecret is the result type of the auth service GenerateSecret method.
type TOTPSecret struct {
	// TOTP URL in otpauth:// format for authenticator apps
	TotpURL string
	// Backup recovery codes
	BackupCodes []string
	// Service name for authenticator app
	Issuer string
}

// User is the result type of the auth service GetUserByID method.
type User struct {
	// User unique identifier
	ID int64
	// Phone number or email
	Identifier string
	// Account creation timestamp in milliseconds
	CreatedAt int64
	// Last login timestamp in milliseconds
	LastLogin *int64
	// Account verification status
	IsVerified bool
	// Additional user metadata
	Metadata map[string]string
}

// UserValidationResponse is the result type of the auth service ValidateUser
// method.
type UserValidationResponse struct {
	// Session validity status
	Valid bool
	// Complete user information if session is valid
	User *User
	// Session information if valid
	Session *Session
}

// ValidateUserPayload is the payload type of the auth service ValidateUser
// method.
type ValidateUserPayload struct {
	// Session token for validation
	SessionToken string
}

// VerifyBackupCodePayload is the payload type of the auth service
// VerifyBackupCode method.
type VerifyBackupCodePayload struct {
	// User identifier
	Identifier string
	// 8-character backup code
	BackupCode string
	// Device information for security
	DeviceInfo *DeviceInfo
}

// VerifyTOTPPayload is the payload type of the auth service VerifyTOTP method.
type VerifyTOTPPayload struct {
	// User identifier
	Identifier string
	// 6-digit TOTP code from authenticator app
	TotpCode string
	// Device information for security
	DeviceInfo *DeviceInfo
}

// Invalid input parameters
type InvalidInput string

// Invalid or expired OTP
type InvalidOtp string

// Too many requests
type RateLimited string

// Service temporarily unavailable
type ServiceUnavailable string

// Unauthorized access
type Unauthorized string

// User not found
type UserNotFound string

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input parameters"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e InvalidOtp) Error() string {
	return "Invalid or expired OTP"
}

// ErrorName returns "invalid_otp".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidOtp) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_otp".
func (e InvalidOtp) GoaErrorName() string {
	return "invalid_otp"
}

// Error returns an error description.
func (e RateLimited) Error() string {
	return "Too many requests"
}

// ErrorName returns "rate_limited".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e RateLimited) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "rate_limited".
func (e RateLimited) GoaErrorName() string {
	return "rate_limited"
}

// Error returns an error description.
func (e ServiceUnavailable) Error() string {
	return "Service temporarily unavailable"
}

// ErrorName returns "service_unavailable".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ServiceUnavailable) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service_unavailable".
func (e ServiceUnavailable) GoaErrorName() string {
	return "service_unavailable"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e UserNotFound) Error() string {
	return "User not found"
}

// ErrorName returns "user_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UserNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "user_not_found".
func (e UserNotFound) GoaErrorName() string {
	return "user_not_found"
}
