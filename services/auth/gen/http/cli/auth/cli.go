// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authc "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/http/auth/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (generate-secret|verify-totp|verify-backup-code|refresh-session|logout|get-user-profile)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth generate-secret --body '{
      "identifier": "user@example.com"
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authGenerateSecretFlags    = flag.NewFlagSet("generate-secret", flag.ExitOnError)
		authGenerateSecretBodyFlag = authGenerateSecretFlags.String("body", "REQUIRED", "")

		authVerifyTOTPFlags    = flag.NewFlagSet("verify-totp", flag.ExitOnError)
		authVerifyTOTPBodyFlag = authVerifyTOTPFlags.String("body", "REQUIRED", "")

		authVerifyBackupCodeFlags    = flag.NewFlagSet("verify-backup-code", flag.ExitOnError)
		authVerifyBackupCodeBodyFlag = authVerifyBackupCodeFlags.String("body", "REQUIRED", "")

		authRefreshSessionFlags            = flag.NewFlagSet("refresh-session", flag.ExitOnError)
		authRefreshSessionSessionTokenFlag = authRefreshSessionFlags.String("session-token", "REQUIRED", "")

		authLogoutFlags            = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutSessionTokenFlag = authLogoutFlags.String("session-token", "REQUIRED", "")

		authGetUserProfileFlags            = flag.NewFlagSet("get-user-profile", flag.ExitOnError)
		authGetUserProfileSessionTokenFlag = authGetUserProfileFlags.String("session-token", "REQUIRED", "")
	)
	authFlags.Usage = authUsage
	authGenerateSecretFlags.Usage = authGenerateSecretUsage
	authVerifyTOTPFlags.Usage = authVerifyTOTPUsage
	authVerifyBackupCodeFlags.Usage = authVerifyBackupCodeUsage
	authRefreshSessionFlags.Usage = authRefreshSessionUsage
	authLogoutFlags.Usage = authLogoutUsage
	authGetUserProfileFlags.Usage = authGetUserProfileUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "generate-secret":
				epf = authGenerateSecretFlags

			case "verify-totp":
				epf = authVerifyTOTPFlags

			case "verify-backup-code":
				epf = authVerifyBackupCodeFlags

			case "refresh-session":
				epf = authRefreshSessionFlags

			case "logout":
				epf = authLogoutFlags

			case "get-user-profile":
				epf = authGetUserProfileFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "generate-secret":
				endpoint = c.GenerateSecret()
				data, err = authc.BuildGenerateSecretPayload(*authGenerateSecretBodyFlag)
			case "verify-totp":
				endpoint = c.VerifyTOTP()
				data, err = authc.BuildVerifyTOTPPayload(*authVerifyTOTPBodyFlag)
			case "verify-backup-code":
				endpoint = c.VerifyBackupCode()
				data, err = authc.BuildVerifyBackupCodePayload(*authVerifyBackupCodeBodyFlag)
			case "refresh-session":
				endpoint = c.RefreshSession()
				data, err = authc.BuildRefreshSessionPayload(*authRefreshSessionSessionTokenFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutSessionTokenFlag)
			case "get-user-profile":
				endpoint = c.GetUserProfile()
				data, err = authc.BuildGetUserProfilePayload(*authGetUserProfileSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Authentication microservice with OTP support
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    generate-secret: Generate TOTP secret for new user registration
    verify-totp: Verify TOTP code and authenticate user
    verify-backup-code: Verify backup recovery code as alternative to TOTP
    refresh-session: Refresh user session using existing token
    logout: Logout user and invalidate session
    get-user-profile: Get authenticated user profile

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authGenerateSecretUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth generate-secret -body JSON

Generate TOTP secret for new user registration
    -body JSON: 

Example:
    %[1]s auth generate-secret --body '{
      "identifier": "user@example.com"
   }'
`, os.Args[0])
}

func authVerifyTOTPUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth verify-totp -body JSON

Verify TOTP code and authenticate user
    -body JSON: 

Example:
    %[1]s auth verify-totp --body '{
      "device_info": {
         "device_id": "Et provident ab ea alias minus.",
         "ip_address": "Debitis illo iusto maxime voluptas aliquid totam.",
         "platform": "Aut doloribus consequatur aut.",
         "user_agent": "Vel blanditiis ratione corrupti nostrum."
      },
      "identifier": "Qui laudantium voluptatem assumenda ratione rem tempora.",
      "totp_code": "123456"
   }'
`, os.Args[0])
}

func authVerifyBackupCodeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth verify-backup-code -body JSON

Verify backup recovery code as alternative to TOTP
    -body JSON: 

Example:
    %[1]s auth verify-backup-code --body '{
      "backup_code": "ABC12345",
      "device_info": {
         "device_id": "Et provident ab ea alias minus.",
         "ip_address": "Debitis illo iusto maxime voluptas aliquid totam.",
         "platform": "Aut doloribus consequatur aut.",
         "user_agent": "Vel blanditiis ratione corrupti nostrum."
      },
      "identifier": "Reprehenderit quae."
   }'
`, os.Args[0])
}

func authRefreshSessionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth refresh-session -session-token STRING

Refresh user session using existing token
    -session-token STRING: 

Example:
    %[1]s auth refresh-session --session-token "Exercitationem aut."
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -session-token STRING

Logout user and invalidate session
    -session-token STRING: 

Example:
    %[1]s auth logout --session-token "Quia amet."
`, os.Args[0])
}

func authGetUserProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth get-user-profile -session-token STRING

Get authenticated user profile
    -session-token STRING: 

Example:
    %[1]s auth get-user-profile --session-token "Eum modi qui soluta omnis totam."
`, os.Args[0])
}
