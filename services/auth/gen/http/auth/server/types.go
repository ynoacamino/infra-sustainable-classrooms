// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package server

import (
	"unicode/utf8"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// GenerateSecretRequestBody is the type of the "auth" service "GenerateSecret"
// endpoint HTTP request body.
type GenerateSecretRequestBody struct {
	// User identifier (username/email)
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
}

// VerifyTOTPRequestBody is the type of the "auth" service "VerifyTOTP"
// endpoint HTTP request body.
type VerifyTOTPRequestBody struct {
	// User identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// 6-digit TOTP code from authenticator app
	TotpCode *string `form:"totp_code,omitempty" json:"totp_code,omitempty" xml:"totp_code,omitempty"`
	// Device information for security
	DeviceInfo *DeviceInfoRequestBody `form:"device_info,omitempty" json:"device_info,omitempty" xml:"device_info,omitempty"`
}

// VerifyBackupCodeRequestBody is the type of the "auth" service
// "VerifyBackupCode" endpoint HTTP request body.
type VerifyBackupCodeRequestBody struct {
	// User identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// 8-character backup code
	BackupCode *string `form:"backup_code,omitempty" json:"backup_code,omitempty" xml:"backup_code,omitempty"`
	// Device information for security
	DeviceInfo *DeviceInfoRequestBody `form:"device_info,omitempty" json:"device_info,omitempty" xml:"device_info,omitempty"`
}

// GenerateSecretResponseBody is the type of the "auth" service
// "GenerateSecret" endpoint HTTP response body.
type GenerateSecretResponseBody struct {
	// TOTP URL in otpauth:// format for authenticator apps
	TotpURL string `form:"totp_url" json:"totp_url" xml:"totp_url"`
	// Backup recovery codes
	BackupCodes []string `form:"backup_codes" json:"backup_codes" xml:"backup_codes"`
	// Service name for authenticator app
	Issuer string `form:"issuer" json:"issuer" xml:"issuer"`
}

// VerifyTOTPResponseBody is the type of the "auth" service "VerifyTOTP"
// endpoint HTTP response body.
type VerifyTOTPResponseBody struct {
	// Authentication success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// User information
	User *UserResponseBody `form:"user" json:"user" xml:"user"`
}

// VerifyBackupCodeResponseBody is the type of the "auth" service
// "VerifyBackupCode" endpoint HTTP response body.
type VerifyBackupCodeResponseBody struct {
	// Authentication success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// User information
	User *UserResponseBody `form:"user" json:"user" xml:"user"`
	// Number of remaining backup codes
	RemainingCodes int `form:"remaining_codes" json:"remaining_codes" xml:"remaining_codes"`
}

// RefreshSessionResponseBody is the type of the "auth" service
// "RefreshSession" endpoint HTTP response body.
type RefreshSessionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// LogoutResponseBody is the type of the "auth" service "Logout" endpoint HTTP
// response body.
type LogoutResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Session token for cookie (when applicable)
	SessionToken *string `form:"session_token,omitempty" json:"session_token,omitempty" xml:"session_token,omitempty"`
}

// GetUserProfileResponseBody is the type of the "auth" service
// "GetUserProfile" endpoint HTTP response body.
type GetUserProfileResponseBody struct {
	// User unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Phone number or email
	Identifier string `form:"identifier" json:"identifier" xml:"identifier"`
	// Account creation timestamp in milliseconds
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last login timestamp in milliseconds
	LastLogin *int64 `form:"last_login,omitempty" json:"last_login,omitempty" xml:"last_login,omitempty"`
	// Account verification status
	IsVerified bool `form:"is_verified" json:"is_verified" xml:"is_verified"`
	// Additional user metadata
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// User unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Phone number or email
	Identifier string `form:"identifier" json:"identifier" xml:"identifier"`
	// Account creation timestamp in milliseconds
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last login timestamp in milliseconds
	LastLogin *int64 `form:"last_login,omitempty" json:"last_login,omitempty" xml:"last_login,omitempty"`
	// Account verification status
	IsVerified bool `form:"is_verified" json:"is_verified" xml:"is_verified"`
	// Additional user metadata
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// DeviceInfoRequestBody is used to define fields on request body types.
type DeviceInfoRequestBody struct {
	// Browser/app user agent
	UserAgent *string `form:"user_agent,omitempty" json:"user_agent,omitempty" xml:"user_agent,omitempty"`
	// Client IP address
	IPAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty" xml:"ip_address,omitempty"`
	// Unique device identifier
	DeviceID *string `form:"device_id,omitempty" json:"device_id,omitempty" xml:"device_id,omitempty"`
	// Platform (web, ios, android)
	Platform *string `form:"platform,omitempty" json:"platform,omitempty" xml:"platform,omitempty"`
}

// NewGenerateSecretResponseBody builds the HTTP response body from the result
// of the "GenerateSecret" endpoint of the "auth" service.
func NewGenerateSecretResponseBody(res *auth.TOTPSecret) *GenerateSecretResponseBody {
	body := &GenerateSecretResponseBody{
		TotpURL: res.TotpURL,
		Issuer:  res.Issuer,
	}
	if res.BackupCodes != nil {
		body.BackupCodes = make([]string, len(res.BackupCodes))
		for i, val := range res.BackupCodes {
			body.BackupCodes[i] = val
		}
	} else {
		body.BackupCodes = []string{}
	}
	return body
}

// NewVerifyTOTPResponseBody builds the HTTP response body from the result of
// the "VerifyTOTP" endpoint of the "auth" service.
func NewVerifyTOTPResponseBody(res *auth.AuthResponse) *VerifyTOTPResponseBody {
	body := &VerifyTOTPResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	if res.User != nil {
		body.User = marshalAuthUserToUserResponseBody(res.User)
	}
	return body
}

// NewVerifyBackupCodeResponseBody builds the HTTP response body from the
// result of the "VerifyBackupCode" endpoint of the "auth" service.
func NewVerifyBackupCodeResponseBody(res *auth.BackupCodeResponse) *VerifyBackupCodeResponseBody {
	body := &VerifyBackupCodeResponseBody{
		Success:        res.Success,
		Message:        res.Message,
		RemainingCodes: res.RemainingCodes,
	}
	if res.User != nil {
		body.User = marshalAuthUserToUserResponseBody(res.User)
	}
	return body
}

// NewRefreshSessionResponseBody builds the HTTP response body from the result
// of the "RefreshSession" endpoint of the "auth" service.
func NewRefreshSessionResponseBody(res *auth.SimpleResponse) *RefreshSessionResponseBody {
	body := &RefreshSessionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewLogoutResponseBody builds the HTTP response body from the result of the
// "Logout" endpoint of the "auth" service.
func NewLogoutResponseBody(res *auth.SimpleResponse) *LogoutResponseBody {
	body := &LogoutResponseBody{
		Success:      res.Success,
		Message:      res.Message,
		SessionToken: res.SessionToken,
	}
	return body
}

// NewGetUserProfileResponseBody builds the HTTP response body from the result
// of the "GetUserProfile" endpoint of the "auth" service.
func NewGetUserProfileResponseBody(res *auth.User) *GetUserProfileResponseBody {
	body := &GetUserProfileResponseBody{
		ID:         res.ID,
		Identifier: res.Identifier,
		CreatedAt:  res.CreatedAt,
		LastLogin:  res.LastLogin,
		IsVerified: res.IsVerified,
	}
	if res.Metadata != nil {
		body.Metadata = make(map[string]string, len(res.Metadata))
		for key, val := range res.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewGenerateSecretPayload builds a auth service GenerateSecret endpoint
// payload.
func NewGenerateSecretPayload(body *GenerateSecretRequestBody) *auth.GenerateSecretPayload {
	v := &auth.GenerateSecretPayload{
		Identifier: *body.Identifier,
	}

	return v
}

// NewVerifyTOTPPayload builds a auth service VerifyTOTP endpoint payload.
func NewVerifyTOTPPayload(body *VerifyTOTPRequestBody) *auth.VerifyTOTPPayload {
	v := &auth.VerifyTOTPPayload{
		Identifier: *body.Identifier,
		TotpCode:   *body.TotpCode,
	}
	if body.DeviceInfo != nil {
		v.DeviceInfo = unmarshalDeviceInfoRequestBodyToAuthDeviceInfo(body.DeviceInfo)
	}

	return v
}

// NewVerifyBackupCodePayload builds a auth service VerifyBackupCode endpoint
// payload.
func NewVerifyBackupCodePayload(body *VerifyBackupCodeRequestBody) *auth.VerifyBackupCodePayload {
	v := &auth.VerifyBackupCodePayload{
		Identifier: *body.Identifier,
		BackupCode: *body.BackupCode,
	}
	if body.DeviceInfo != nil {
		v.DeviceInfo = unmarshalDeviceInfoRequestBodyToAuthDeviceInfo(body.DeviceInfo)
	}

	return v
}

// NewRefreshSessionPayload builds a auth service RefreshSession endpoint
// payload.
func NewRefreshSessionPayload(sessionToken string) *auth.RefreshSessionPayload {
	v := &auth.RefreshSessionPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewLogoutPayload builds a auth service Logout endpoint payload.
func NewLogoutPayload(sessionToken string) *auth.LogoutPayload {
	v := &auth.LogoutPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetUserProfilePayload builds a auth service GetUserProfile endpoint
// payload.
func NewGetUserProfilePayload(sessionToken string) *auth.GetUserProfilePayload {
	v := &auth.GetUserProfilePayload{}
	v.SessionToken = sessionToken

	return v
}

// ValidateGenerateSecretRequestBody runs the validations defined on
// GenerateSecretRequestBody
func ValidateGenerateSecretRequestBody(body *GenerateSecretRequestBody) (err error) {
	if body.Identifier == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("identifier", "body"))
	}
	if body.Identifier != nil {
		if utf8.RuneCountInString(*body.Identifier) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.identifier", *body.Identifier, utf8.RuneCountInString(*body.Identifier), 3, true))
		}
	}
	if body.Identifier != nil {
		if utf8.RuneCountInString(*body.Identifier) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.identifier", *body.Identifier, utf8.RuneCountInString(*body.Identifier), 100, false))
		}
	}
	return
}

// ValidateVerifyTOTPRequestBody runs the validations defined on
// VerifyTOTPRequestBody
func ValidateVerifyTOTPRequestBody(body *VerifyTOTPRequestBody) (err error) {
	if body.Identifier == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("identifier", "body"))
	}
	if body.TotpCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totp_code", "body"))
	}
	if body.TotpCode != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.totp_code", *body.TotpCode, "^[0-9]{6}$"))
	}
	return
}

// ValidateVerifyBackupCodeRequestBody runs the validations defined on
// VerifyBackupCodeRequestBody
func ValidateVerifyBackupCodeRequestBody(body *VerifyBackupCodeRequestBody) (err error) {
	if body.Identifier == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("identifier", "body"))
	}
	if body.BackupCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("backup_code", "body"))
	}
	if body.BackupCode != nil {
		if utf8.RuneCountInString(*body.BackupCode) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.backup_code", *body.BackupCode, utf8.RuneCountInString(*body.BackupCode), 8, true))
		}
	}
	if body.BackupCode != nil {
		if utf8.RuneCountInString(*body.BackupCode) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.backup_code", *body.BackupCode, utf8.RuneCountInString(*body.BackupCode), 8, false))
		}
	}
	return
}
