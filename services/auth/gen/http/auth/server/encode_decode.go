// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGenerateSecretResponse returns an encoder for responses returned by
// the auth GenerateSecret endpoint.
func EncodeGenerateSecretResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.TOTPSecret)
		enc := encoder(ctx, w)
		body := NewGenerateSecretResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGenerateSecretRequest returns a decoder for requests sent to the auth
// GenerateSecret endpoint.
func DecodeGenerateSecretRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body GenerateSecretRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGenerateSecretRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGenerateSecretPayload(&body)

		return payload, nil
	}
}

// EncodeGenerateSecretError returns an encoder for errors returned by the
// GenerateSecret auth endpoint.
func EncodeGenerateSecretError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res auth.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "service_unavailable":
			var res auth.ServiceUnavailable
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeVerifyTOTPResponse returns an encoder for responses returned by the
// auth VerifyTOTP endpoint.
func EncodeVerifyTOTPResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.AuthResponse)
		enc := encoder(ctx, w)
		body := NewVerifyTOTPResponseBody(res)
		sessionToken := res.SessionToken
		http.SetCookie(w, &http.Cookie{
			Name:  "session",
			Value: sessionToken,
		})
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerifyTOTPRequest returns a decoder for requests sent to the auth
// VerifyTOTP endpoint.
func DecodeVerifyTOTPRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerifyTOTPRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateVerifyTOTPRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewVerifyTOTPPayload(&body)

		return payload, nil
	}
}

// EncodeVerifyTOTPError returns an encoder for errors returned by the
// VerifyTOTP auth endpoint.
func EncodeVerifyTOTPError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res auth.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_otp":
			var res auth.InvalidOtp
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "user_not_found":
			var res auth.UserNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeVerifyBackupCodeResponse returns an encoder for responses returned by
// the auth VerifyBackupCode endpoint.
func EncodeVerifyBackupCodeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.BackupCodeResponse)
		enc := encoder(ctx, w)
		body := NewVerifyBackupCodeResponseBody(res)
		sessionToken := res.SessionToken
		http.SetCookie(w, &http.Cookie{
			Name:  "session",
			Value: sessionToken,
		})
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerifyBackupCodeRequest returns a decoder for requests sent to the
// auth VerifyBackupCode endpoint.
func DecodeVerifyBackupCodeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerifyBackupCodeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateVerifyBackupCodeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewVerifyBackupCodePayload(&body)

		return payload, nil
	}
}

// EncodeVerifyBackupCodeError returns an encoder for errors returned by the
// VerifyBackupCode auth endpoint.
func EncodeVerifyBackupCodeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res auth.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_otp":
			var res auth.InvalidOtp
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "user_not_found":
			var res auth.UserNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRefreshSessionResponse returns an encoder for responses returned by
// the auth RefreshSession endpoint.
func EncodeRefreshSessionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewRefreshSessionResponseBody(res)
		if res.SessionToken != nil {
			sessionToken := *res.SessionToken
			http.SetCookie(w, &http.Cookie{
				Name:  "session",
				Value: sessionToken,
			})
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRefreshSessionRequest returns a decoder for requests sent to the auth
// RefreshSession endpoint.
func DecodeRefreshSessionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken string
			err          error
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewRefreshSessionPayload(sessionToken)

		return payload, nil
	}
}

// EncodeRefreshSessionError returns an encoder for errors returned by the
// RefreshSession auth endpoint.
func EncodeRefreshSessionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res auth.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLogoutResponse returns an encoder for responses returned by the auth
// Logout endpoint.
func EncodeLogoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewLogoutResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLogoutRequest returns a decoder for requests sent to the auth Logout
// endpoint.
func DecodeLogoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken string
			err          error
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewLogoutPayload(sessionToken)

		return payload, nil
	}
}

// EncodeGetUserProfileResponse returns an encoder for responses returned by
// the auth GetUserProfile endpoint.
func EncodeGetUserProfileResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*auth.User)
		enc := encoder(ctx, w)
		body := NewGetUserProfileResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserProfileRequest returns a decoder for requests sent to the auth
// GetUserProfile endpoint.
func DecodeGetUserProfileRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken string
			err          error
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserProfilePayload(sessionToken)

		return payload, nil
	}
}

// EncodeGetUserProfileError returns an encoder for errors returned by the
// GetUserProfile auth endpoint.
func EncodeGetUserProfileError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthorized":
			var res auth.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "user_not_found":
			var res auth.UserNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalDeviceInfoRequestBodyToAuthDeviceInfo builds a value of type
// *auth.DeviceInfo from a value of type *DeviceInfoRequestBody.
func unmarshalDeviceInfoRequestBodyToAuthDeviceInfo(v *DeviceInfoRequestBody) *auth.DeviceInfo {
	if v == nil {
		return nil
	}
	res := &auth.DeviceInfo{
		UserAgent: v.UserAgent,
		IPAddress: v.IPAddress,
		DeviceID:  v.DeviceID,
		Platform:  v.Platform,
	}

	return res
}

// marshalAuthUserToUserResponseBody builds a value of type *UserResponseBody
// from a value of type *auth.User.
func marshalAuthUserToUserResponseBody(v *auth.User) *UserResponseBody {
	res := &UserResponseBody{
		ID:         v.ID,
		Identifier: v.Identifier,
		CreatedAt:  v.CreatedAt,
		LastLogin:  v.LastLogin,
		IsVerified: v.IsVerified,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}
