// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	auth "github.com/ynoacamino/infra-sustainable-classrooms/services/auth/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// BuildGenerateSecretPayload builds the payload for the auth GenerateSecret
// endpoint from CLI flags.
func BuildGenerateSecretPayload(authGenerateSecretBody string) (*auth.GenerateSecretPayload, error) {
	var err error
	var body GenerateSecretRequestBody
	{
		err = json.Unmarshal([]byte(authGenerateSecretBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"identifier\": \"user@example.com\"\n   }'")
		}
		if utf8.RuneCountInString(body.Identifier) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.identifier", body.Identifier, utf8.RuneCountInString(body.Identifier), 3, true))
		}
		if utf8.RuneCountInString(body.Identifier) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.identifier", body.Identifier, utf8.RuneCountInString(body.Identifier), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &auth.GenerateSecretPayload{
		Identifier: body.Identifier,
	}

	return v, nil
}

// BuildVerifyTOTPPayload builds the payload for the auth VerifyTOTP endpoint
// from CLI flags.
func BuildVerifyTOTPPayload(authVerifyTOTPBody string) (*auth.VerifyTOTPPayload, error) {
	var err error
	var body VerifyTOTPRequestBody
	{
		err = json.Unmarshal([]byte(authVerifyTOTPBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"device_info\": {\n         \"device_id\": \"Et provident ab ea alias minus.\",\n         \"ip_address\": \"Debitis illo iusto maxime voluptas aliquid totam.\",\n         \"platform\": \"Aut doloribus consequatur aut.\",\n         \"user_agent\": \"Vel blanditiis ratione corrupti nostrum.\"\n      },\n      \"identifier\": \"Qui laudantium voluptatem assumenda ratione rem tempora.\",\n      \"totp_code\": \"123456\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.totp_code", body.TotpCode, "^[0-9]{6}$"))
		if err != nil {
			return nil, err
		}
	}
	v := &auth.VerifyTOTPPayload{
		Identifier: body.Identifier,
		TotpCode:   body.TotpCode,
	}
	if body.DeviceInfo != nil {
		v.DeviceInfo = marshalDeviceInfoRequestBodyToAuthDeviceInfo(body.DeviceInfo)
	}

	return v, nil
}

// BuildVerifyBackupCodePayload builds the payload for the auth
// VerifyBackupCode endpoint from CLI flags.
func BuildVerifyBackupCodePayload(authVerifyBackupCodeBody string) (*auth.VerifyBackupCodePayload, error) {
	var err error
	var body VerifyBackupCodeRequestBody
	{
		err = json.Unmarshal([]byte(authVerifyBackupCodeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"backup_code\": \"ABC12345\",\n      \"device_info\": {\n         \"device_id\": \"Et provident ab ea alias minus.\",\n         \"ip_address\": \"Debitis illo iusto maxime voluptas aliquid totam.\",\n         \"platform\": \"Aut doloribus consequatur aut.\",\n         \"user_agent\": \"Vel blanditiis ratione corrupti nostrum.\"\n      },\n      \"identifier\": \"Reprehenderit quae.\"\n   }'")
		}
		if utf8.RuneCountInString(body.BackupCode) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.backup_code", body.BackupCode, utf8.RuneCountInString(body.BackupCode), 8, true))
		}
		if utf8.RuneCountInString(body.BackupCode) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.backup_code", body.BackupCode, utf8.RuneCountInString(body.BackupCode), 8, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &auth.VerifyBackupCodePayload{
		Identifier: body.Identifier,
		BackupCode: body.BackupCode,
	}
	if body.DeviceInfo != nil {
		v.DeviceInfo = marshalDeviceInfoRequestBodyToAuthDeviceInfo(body.DeviceInfo)
	}

	return v, nil
}

// BuildRefreshSessionPayload builds the payload for the auth RefreshSession
// endpoint from CLI flags.
func BuildRefreshSessionPayload(authRefreshSessionSessionToken string) (*auth.RefreshSessionPayload, error) {
	var sessionToken string
	{
		sessionToken = authRefreshSessionSessionToken
	}
	v := &auth.RefreshSessionPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildLogoutPayload builds the payload for the auth Logout endpoint from CLI
// flags.
func BuildLogoutPayload(authLogoutSessionToken string) (*auth.LogoutPayload, error) {
	var sessionToken string
	{
		sessionToken = authLogoutSessionToken
	}
	v := &auth.LogoutPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetUserProfilePayload builds the payload for the auth GetUserProfile
// endpoint from CLI flags.
func BuildGetUserProfilePayload(authGetUserProfileSessionToken string) (*auth.GetUserProfilePayload, error) {
	var sessionToken string
	{
		sessionToken = authGetUserProfileSessionToken
	}
	v := &auth.GetUserProfilePayload{}
	v.SessionToken = sessionToken

	return v, nil
}
