// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth client HTTP transport
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/auth/design/api
// -o ./services/auth/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the auth service endpoint HTTP clients.
type Client struct {
	// GenerateSecret Doer is the HTTP client used to make requests to the
	// GenerateSecret endpoint.
	GenerateSecretDoer goahttp.Doer

	// VerifyTOTP Doer is the HTTP client used to make requests to the VerifyTOTP
	// endpoint.
	VerifyTOTPDoer goahttp.Doer

	// VerifyBackupCode Doer is the HTTP client used to make requests to the
	// VerifyBackupCode endpoint.
	VerifyBackupCodeDoer goahttp.Doer

	// RefreshSession Doer is the HTTP client used to make requests to the
	// RefreshSession endpoint.
	RefreshSessionDoer goahttp.Doer

	// Logout Doer is the HTTP client used to make requests to the Logout endpoint.
	LogoutDoer goahttp.Doer

	// GetUserProfile Doer is the HTTP client used to make requests to the
	// GetUserProfile endpoint.
	GetUserProfileDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GenerateSecretDoer:   doer,
		VerifyTOTPDoer:       doer,
		VerifyBackupCodeDoer: doer,
		RefreshSessionDoer:   doer,
		LogoutDoer:           doer,
		GetUserProfileDoer:   doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// GenerateSecret returns an endpoint that makes HTTP requests to the auth
// service GenerateSecret server.
func (c *Client) GenerateSecret() goa.Endpoint {
	var (
		encodeRequest  = EncodeGenerateSecretRequest(c.encoder)
		decodeResponse = DecodeGenerateSecretResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGenerateSecretRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenerateSecretDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "GenerateSecret", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyTOTP returns an endpoint that makes HTTP requests to the auth service
// VerifyTOTP server.
func (c *Client) VerifyTOTP() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyTOTPRequest(c.encoder)
		decodeResponse = DecodeVerifyTOTPResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyTOTPRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyTOTPDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "VerifyTOTP", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyBackupCode returns an endpoint that makes HTTP requests to the auth
// service VerifyBackupCode server.
func (c *Client) VerifyBackupCode() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyBackupCodeRequest(c.encoder)
		decodeResponse = DecodeVerifyBackupCodeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyBackupCodeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyBackupCodeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "VerifyBackupCode", err)
		}
		return decodeResponse(resp)
	}
}

// RefreshSession returns an endpoint that makes HTTP requests to the auth
// service RefreshSession server.
func (c *Client) RefreshSession() goa.Endpoint {
	var (
		encodeRequest  = EncodeRefreshSessionRequest(c.encoder)
		decodeResponse = DecodeRefreshSessionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRefreshSessionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RefreshSessionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "RefreshSession", err)
		}
		return decodeResponse(resp)
	}
}

// Logout returns an endpoint that makes HTTP requests to the auth service
// Logout server.
func (c *Client) Logout() goa.Endpoint {
	var (
		encodeRequest  = EncodeLogoutRequest(c.encoder)
		decodeResponse = DecodeLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LogoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "Logout", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserProfile returns an endpoint that makes HTTP requests to the auth
// service GetUserProfile server.
func (c *Client) GetUserProfile() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserProfileRequest(c.encoder)
		decodeResponse = DecodeGetUserProfileResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUserProfileRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserProfileDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("auth", "GetUserProfile", err)
		}
		return decodeResponse(resp)
	}
}
