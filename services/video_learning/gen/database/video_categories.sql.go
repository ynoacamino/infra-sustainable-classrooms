// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: video_categories.sql

package video_learningdb

import (
	"context"
)

const getAllCategories = `-- name: GetAllCategories :many
SELECT id, name, created_at, updated_at FROM video_categories ORDER BY name ASC
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]VideoCategory, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoCategory
	for rows.Next() {
		var i VideoCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, created_at, updated_at
FROM video_categories
WHERE id = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, id int64) (VideoCategory, error) {
	row := q.db.QueryRow(ctx, getCategoryById, id)
	var i VideoCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrCreateCategory = `-- name: GetOrCreateCategory :one
INSERT INTO
    video_categories (name)
VALUES ($1)
ON CONFLICT (name) DO
UPDATE
SET
    name = EXCLUDED.name
RETURNING
    id, name, created_at, updated_at
`

func (q *Queries) GetOrCreateCategory(ctx context.Context, name string) (VideoCategory, error) {
	row := q.db.QueryRow(ctx, getOrCreateCategory, name)
	var i VideoCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
