// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: video_comments.sql

package video_learningdb

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO
    video_comments (
        video_id,
        user_id,
        title,
        content
    )
VALUES ($1, $2, $3, $4)
RETURNING
    id, video_id, user_id, title, content, created_at, updated_at
`

type CreateCommentParams struct {
	VideoID int64
	UserID  int64
	Title   string
	Content string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (VideoComment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.VideoID,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i VideoComment
	err := row.Scan(
		&i.ID,
		&i.VideoID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM video_comments WHERE id = $1 AND user_id = $2
`

type DeleteCommentParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.Exec(ctx, deleteComment, arg.ID, arg.UserID)
	return err
}

const getCommentsForVideo = `-- name: GetCommentsForVideo :many
SELECT id, video_id, user_id, title, content, created_at, updated_at
FROM video_comments
WHERE
    video_id = $1
ORDER BY updated_at DESC
LIMIT $2
OFFSET
    $3
`

type GetCommentsForVideoParams struct {
	VideoID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) GetCommentsForVideo(ctx context.Context, arg GetCommentsForVideoParams) ([]VideoComment, error) {
	rows, err := q.db.Query(ctx, getCommentsForVideo, arg.VideoID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoComment
	for rows.Next() {
		var i VideoComment
		if err := rows.Scan(
			&i.ID,
			&i.VideoID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
