// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: video_tags.sql

package video_learningdb

import (
	"context"
)

const getAllTags = `-- name: GetAllTags :many
SELECT id, name, created_at, updated_at FROM video_tags ORDER BY name ASC
`

func (q *Queries) GetAllTags(ctx context.Context) ([]VideoTag, error) {
	rows, err := q.db.Query(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoTag
	for rows.Next() {
		var i VideoTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateTag = `-- name: GetOrCreateTag :one
INSERT INTO
    video_tags (name)
VALUES ($1)
ON CONFLICT (name) DO
UPDATE
SET
    name = EXCLUDED.name
RETURNING
    id, name, created_at, updated_at
`

func (q *Queries) GetOrCreateTag(ctx context.Context, name string) (VideoTag, error) {
	row := q.db.QueryRow(ctx, getOrCreateTag, name)
	var i VideoTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagById = `-- name: GetTagById :one
SELECT id, name, created_at, updated_at FROM video_tags WHERE id = $1
`

func (q *Queries) GetTagById(ctx context.Context, id int64) (VideoTag, error) {
	row := q.db.QueryRow(ctx, getTagById, id)
	var i VideoTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, created_at, updated_at FROM video_tags WHERE name = $1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (VideoTag, error) {
	row := q.db.QueryRow(ctx, getTagByName, name)
	var i VideoTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagsByVideoID = `-- name: GetTagsByVideoID :many
SELECT vt.id, vt.name, vt.created_at, vt.updated_at
FROM
    video_tags vt
    JOIN video_video_tags vvt ON vt.id = vvt.tag_id
WHERE
    vvt.video_id = $1
`

func (q *Queries) GetTagsByVideoID(ctx context.Context, videoID int64) ([]VideoTag, error) {
	rows, err := q.db.Query(ctx, getTagsByVideoID, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VideoTag
	for rows.Next() {
		var i VideoTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
