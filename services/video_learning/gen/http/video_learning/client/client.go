// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning client HTTP transport
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the video_learning service endpoint HTTP clients.
type Client struct {
	// SearchVideos Doer is the HTTP client used to make requests to the
	// SearchVideos endpoint.
	SearchVideosDoer goahttp.Doer

	// GetRecommendations Doer is the HTTP client used to make requests to the
	// GetRecommendations endpoint.
	GetRecommendationsDoer goahttp.Doer

	// GetVideo Doer is the HTTP client used to make requests to the GetVideo
	// endpoint.
	GetVideoDoer goahttp.Doer

	// GetComments Doer is the HTTP client used to make requests to the GetComments
	// endpoint.
	GetCommentsDoer goahttp.Doer

	// CreateComment Doer is the HTTP client used to make requests to the
	// CreateComment endpoint.
	CreateCommentDoer goahttp.Doer

	// GetOwnVideos Doer is the HTTP client used to make requests to the
	// GetOwnVideos endpoint.
	GetOwnVideosDoer goahttp.Doer

	// InitialUpload Doer is the HTTP client used to make requests to the
	// InitialUpload endpoint.
	InitialUploadDoer goahttp.Doer

	// CompleteUpload Doer is the HTTP client used to make requests to the
	// CompleteUpload endpoint.
	CompleteUploadDoer goahttp.Doer

	// UploadThumbnail Doer is the HTTP client used to make requests to the
	// UploadThumbnail endpoint.
	UploadThumbnailDoer goahttp.Doer

	// GetAllCategories Doer is the HTTP client used to make requests to the
	// GetAllCategories endpoint.
	GetAllCategoriesDoer goahttp.Doer

	// GetAllTags Doer is the HTTP client used to make requests to the GetAllTags
	// endpoint.
	GetAllTagsDoer goahttp.Doer

	// ToggleVideoLike Doer is the HTTP client used to make requests to the
	// ToggleVideoLike endpoint.
	ToggleVideoLikeDoer goahttp.Doer

	// DeleteVideo Doer is the HTTP client used to make requests to the DeleteVideo
	// endpoint.
	DeleteVideoDoer goahttp.Doer

	// GetVideosByCategory Doer is the HTTP client used to make requests to the
	// GetVideosByCategory endpoint.
	GetVideosByCategoryDoer goahttp.Doer

	// GetSimilarVideos Doer is the HTTP client used to make requests to the
	// GetSimilarVideos endpoint.
	GetSimilarVideosDoer goahttp.Doer

	// DeleteComment Doer is the HTTP client used to make requests to the
	// DeleteComment endpoint.
	DeleteCommentDoer goahttp.Doer

	// GetOrCreateCategory Doer is the HTTP client used to make requests to the
	// GetOrCreateCategory endpoint.
	GetOrCreateCategoryDoer goahttp.Doer

	// GetCategoryByID Doer is the HTTP client used to make requests to the
	// GetCategoryById endpoint.
	GetCategoryByIDDoer goahttp.Doer

	// GetOrCreateTag Doer is the HTTP client used to make requests to the
	// GetOrCreateTag endpoint.
	GetOrCreateTagDoer goahttp.Doer

	// GetTagByID Doer is the HTTP client used to make requests to the GetTagById
	// endpoint.
	GetTagByIDDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the video_learning service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SearchVideosDoer:        doer,
		GetRecommendationsDoer:  doer,
		GetVideoDoer:            doer,
		GetCommentsDoer:         doer,
		CreateCommentDoer:       doer,
		GetOwnVideosDoer:        doer,
		InitialUploadDoer:       doer,
		CompleteUploadDoer:      doer,
		UploadThumbnailDoer:     doer,
		GetAllCategoriesDoer:    doer,
		GetAllTagsDoer:          doer,
		ToggleVideoLikeDoer:     doer,
		DeleteVideoDoer:         doer,
		GetVideosByCategoryDoer: doer,
		GetSimilarVideosDoer:    doer,
		DeleteCommentDoer:       doer,
		GetOrCreateCategoryDoer: doer,
		GetCategoryByIDDoer:     doer,
		GetOrCreateTagDoer:      doer,
		GetTagByIDDoer:          doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// SearchVideos returns an endpoint that makes HTTP requests to the
// video_learning service SearchVideos server.
func (c *Client) SearchVideos() goa.Endpoint {
	var (
		encodeRequest  = EncodeSearchVideosRequest(c.encoder)
		decodeResponse = DecodeSearchVideosResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSearchVideosRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SearchVideosDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "SearchVideos", err)
		}
		return decodeResponse(resp)
	}
}

// GetRecommendations returns an endpoint that makes HTTP requests to the
// video_learning service GetRecommendations server.
func (c *Client) GetRecommendations() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetRecommendationsRequest(c.encoder)
		decodeResponse = DecodeGetRecommendationsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetRecommendationsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetRecommendationsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetRecommendations", err)
		}
		return decodeResponse(resp)
	}
}

// GetVideo returns an endpoint that makes HTTP requests to the video_learning
// service GetVideo server.
func (c *Client) GetVideo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetVideoRequest(c.encoder)
		decodeResponse = DecodeGetVideoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetVideoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetVideoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetVideo", err)
		}
		return decodeResponse(resp)
	}
}

// GetComments returns an endpoint that makes HTTP requests to the
// video_learning service GetComments server.
func (c *Client) GetComments() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCommentsRequest(c.encoder)
		decodeResponse = DecodeGetCommentsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCommentsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCommentsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetComments", err)
		}
		return decodeResponse(resp)
	}
}

// CreateComment returns an endpoint that makes HTTP requests to the
// video_learning service CreateComment server.
func (c *Client) CreateComment() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCommentRequest(c.encoder)
		decodeResponse = DecodeCreateCommentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCommentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCommentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "CreateComment", err)
		}
		return decodeResponse(resp)
	}
}

// GetOwnVideos returns an endpoint that makes HTTP requests to the
// video_learning service GetOwnVideos server.
func (c *Client) GetOwnVideos() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOwnVideosRequest(c.encoder)
		decodeResponse = DecodeGetOwnVideosResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOwnVideosRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOwnVideosDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetOwnVideos", err)
		}
		return decodeResponse(resp)
	}
}

// InitialUpload returns an endpoint that makes HTTP requests to the
// video_learning service InitialUpload server.
func (c *Client) InitialUpload() goa.Endpoint {
	var (
		encodeRequest  = EncodeInitialUploadRequest(c.encoder)
		decodeResponse = DecodeInitialUploadResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildInitialUploadRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.InitialUploadDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "InitialUpload", err)
		}
		return decodeResponse(resp)
	}
}

// CompleteUpload returns an endpoint that makes HTTP requests to the
// video_learning service CompleteUpload server.
func (c *Client) CompleteUpload() goa.Endpoint {
	var (
		encodeRequest  = EncodeCompleteUploadRequest(c.encoder)
		decodeResponse = DecodeCompleteUploadResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCompleteUploadRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CompleteUploadDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "CompleteUpload", err)
		}
		return decodeResponse(resp)
	}
}

// UploadThumbnail returns an endpoint that makes HTTP requests to the
// video_learning service UploadThumbnail server.
func (c *Client) UploadThumbnail() goa.Endpoint {
	var (
		encodeRequest  = EncodeUploadThumbnailRequest(c.encoder)
		decodeResponse = DecodeUploadThumbnailResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUploadThumbnailRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadThumbnailDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "UploadThumbnail", err)
		}
		return decodeResponse(resp)
	}
}

// GetAllCategories returns an endpoint that makes HTTP requests to the
// video_learning service GetAllCategories server.
func (c *Client) GetAllCategories() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAllCategoriesRequest(c.encoder)
		decodeResponse = DecodeGetAllCategoriesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAllCategoriesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllCategoriesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetAllCategories", err)
		}
		return decodeResponse(resp)
	}
}

// GetAllTags returns an endpoint that makes HTTP requests to the
// video_learning service GetAllTags server.
func (c *Client) GetAllTags() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAllTagsRequest(c.encoder)
		decodeResponse = DecodeGetAllTagsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAllTagsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllTagsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetAllTags", err)
		}
		return decodeResponse(resp)
	}
}

// ToggleVideoLike returns an endpoint that makes HTTP requests to the
// video_learning service ToggleVideoLike server.
func (c *Client) ToggleVideoLike() goa.Endpoint {
	var (
		encodeRequest  = EncodeToggleVideoLikeRequest(c.encoder)
		decodeResponse = DecodeToggleVideoLikeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildToggleVideoLikeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ToggleVideoLikeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "ToggleVideoLike", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteVideo returns an endpoint that makes HTTP requests to the
// video_learning service DeleteVideo server.
func (c *Client) DeleteVideo() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteVideoRequest(c.encoder)
		decodeResponse = DecodeDeleteVideoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteVideoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteVideoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "DeleteVideo", err)
		}
		return decodeResponse(resp)
	}
}

// GetVideosByCategory returns an endpoint that makes HTTP requests to the
// video_learning service GetVideosByCategory server.
func (c *Client) GetVideosByCategory() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetVideosByCategoryRequest(c.encoder)
		decodeResponse = DecodeGetVideosByCategoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetVideosByCategoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetVideosByCategoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetVideosByCategory", err)
		}
		return decodeResponse(resp)
	}
}

// GetSimilarVideos returns an endpoint that makes HTTP requests to the
// video_learning service GetSimilarVideos server.
func (c *Client) GetSimilarVideos() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSimilarVideosRequest(c.encoder)
		decodeResponse = DecodeGetSimilarVideosResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSimilarVideosRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSimilarVideosDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetSimilarVideos", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteComment returns an endpoint that makes HTTP requests to the
// video_learning service DeleteComment server.
func (c *Client) DeleteComment() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteCommentRequest(c.encoder)
		decodeResponse = DecodeDeleteCommentResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteCommentRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCommentDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "DeleteComment", err)
		}
		return decodeResponse(resp)
	}
}

// GetOrCreateCategory returns an endpoint that makes HTTP requests to the
// video_learning service GetOrCreateCategory server.
func (c *Client) GetOrCreateCategory() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOrCreateCategoryRequest(c.encoder)
		decodeResponse = DecodeGetOrCreateCategoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOrCreateCategoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOrCreateCategoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetOrCreateCategory", err)
		}
		return decodeResponse(resp)
	}
}

// GetCategoryByID returns an endpoint that makes HTTP requests to the
// video_learning service GetCategoryById server.
func (c *Client) GetCategoryByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCategoryByIDRequest(c.encoder)
		decodeResponse = DecodeGetCategoryByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCategoryByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCategoryByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetCategoryById", err)
		}
		return decodeResponse(resp)
	}
}

// GetOrCreateTag returns an endpoint that makes HTTP requests to the
// video_learning service GetOrCreateTag server.
func (c *Client) GetOrCreateTag() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOrCreateTagRequest(c.encoder)
		decodeResponse = DecodeGetOrCreateTagResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOrCreateTagRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOrCreateTagDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetOrCreateTag", err)
		}
		return decodeResponse(resp)
	}
}

// GetTagByID returns an endpoint that makes HTTP requests to the
// video_learning service GetTagById server.
func (c *Client) GetTagByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTagByIDRequest(c.encoder)
		decodeResponse = DecodeGetTagByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetTagByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTagByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("video_learning", "GetTagById", err)
		}
		return decodeResponse(resp)
	}
}
