// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package client

import (
	videolearning "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/video_learning"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommentRequestBody is the type of the "video_learning" service
// "CreateComment" endpoint HTTP request body.
type CreateCommentRequestBody struct {
	// Comment title
	Title string `form:"title" json:"title" xml:"title"`
	// Comment content
	Body string `form:"body" json:"body" xml:"body"`
}

// CompleteUploadRequestBody is the type of the "video_learning" service
// "CompleteUpload" endpoint HTTP request body.
type CompleteUploadRequestBody struct {
	// Video title
	Title string `form:"title" json:"title" xml:"title"`
	// Video description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Video category ID
	CategoryID int64 `form:"category_id" json:"category_id" xml:"category_id"`
	// Video tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Thumbnail object name in Minio
	ThumbnailObjectName string `form:"thumbnail_object_name" json:"thumbnail_object_name" xml:"thumbnail_object_name"`
	// Video object name in Minio
	VideoObjectName string `form:"video_object_name" json:"video_object_name" xml:"video_object_name"`
}

// GetOrCreateCategoryRequestBody is the type of the "video_learning" service
// "GetOrCreateCategory" endpoint HTTP request body.
type GetOrCreateCategoryRequestBody struct {
	// Category name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetOrCreateTagRequestBody is the type of the "video_learning" service
// "GetOrCreateTag" endpoint HTTP request body.
type GetOrCreateTagRequestBody struct {
	// Tag name
	Name string `form:"name" json:"name" xml:"name"`
}

// SearchVideosResponseBody is the type of the "video_learning" service
// "SearchVideos" endpoint HTTP response body.
type SearchVideosResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos,omitempty" json:"videos,omitempty" xml:"videos,omitempty"`
}

// GetRecommendationsResponseBody is the type of the "video_learning" service
// "GetRecommendations" endpoint HTTP response body.
type GetRecommendationsResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos,omitempty" json:"videos,omitempty" xml:"videos,omitempty"`
}

// GetVideoResponseBody is the type of the "video_learning" service "GetVideo"
// endpoint HTTP response body.
type GetVideoResponseBody struct {
	// Video unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Video title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Video description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Video author/creator
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Number of views
	Views *int `form:"views,omitempty" json:"views,omitempty" xml:"views,omitempty"`
	// Number of likes
	Likes *int `form:"likes,omitempty" json:"likes,omitempty" xml:"likes,omitempty"`
	// Minio presigned URL for video
	VideoURL *string `form:"video_url,omitempty" json:"video_url,omitempty" xml:"video_url,omitempty"`
	// Minio presigned URL for thumbnail
	ThumbnailURL *string `form:"thumbnail_url,omitempty" json:"thumbnail_url,omitempty" xml:"thumbnail_url,omitempty"`
	// Upload timestamp in milliseconds
	UploadDate *int64 `form:"upload_date,omitempty" json:"upload_date,omitempty" xml:"upload_date,omitempty"`
	// Video category
	CategoryID *int64 `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// Video tags
	TagIds []int64 `form:"tag_ids,omitempty" json:"tag_ids,omitempty" xml:"tag_ids,omitempty"`
}

// GetCommentsResponseBody is the type of the "video_learning" service
// "GetComments" endpoint HTTP response body.
type GetCommentsResponseBody struct {
	// List of comments
	Comments []*CommentResponseBody `form:"comments,omitempty" json:"comments,omitempty" xml:"comments,omitempty"`
}

// CreateCommentResponseBody is the type of the "video_learning" service
// "CreateComment" endpoint HTTP response body.
type CreateCommentResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOwnVideosResponseBody is the type of the "video_learning" service
// "GetOwnVideos" endpoint HTTP response body.
type GetOwnVideosResponseBody []*OwnVideoResponse

// InitialUploadResponseBody is the type of the "video_learning" service
// "InitialUpload" endpoint HTTP response body.
type InitialUploadResponseBody struct {
	// Minio object name
	ObjectName *string `form:"object_name,omitempty" json:"object_name,omitempty" xml:"object_name,omitempty"`
	// Presigned URL for accessing the file
	PresignedURL *string `form:"presigned_url,omitempty" json:"presigned_url,omitempty" xml:"presigned_url,omitempty"`
}

// CompleteUploadResponseBody is the type of the "video_learning" service
// "CompleteUpload" endpoint HTTP response body.
type CompleteUploadResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UploadThumbnailResponseBody is the type of the "video_learning" service
// "UploadThumbnail" endpoint HTTP response body.
type UploadThumbnailResponseBody struct {
	// Minio object name
	ObjectName *string `form:"object_name,omitempty" json:"object_name,omitempty" xml:"object_name,omitempty"`
	// Presigned URL for accessing the file
	PresignedURL *string `form:"presigned_url,omitempty" json:"presigned_url,omitempty" xml:"presigned_url,omitempty"`
}

// GetAllCategoriesResponseBody is the type of the "video_learning" service
// "GetAllCategories" endpoint HTTP response body.
type GetAllCategoriesResponseBody []*VideoCategoryResponse

// GetAllTagsResponseBody is the type of the "video_learning" service
// "GetAllTags" endpoint HTTP response body.
type GetAllTagsResponseBody []*VideoTagResponse

// ToggleVideoLikeResponseBody is the type of the "video_learning" service
// "ToggleVideoLike" endpoint HTTP response body.
type ToggleVideoLikeResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteVideoResponseBody is the type of the "video_learning" service
// "DeleteVideo" endpoint HTTP response body.
type DeleteVideoResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetVideosByCategoryResponseBody is the type of the "video_learning" service
// "GetVideosByCategory" endpoint HTTP response body.
type GetVideosByCategoryResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos,omitempty" json:"videos,omitempty" xml:"videos,omitempty"`
}

// GetSimilarVideosResponseBody is the type of the "video_learning" service
// "GetSimilarVideos" endpoint HTTP response body.
type GetSimilarVideosResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos,omitempty" json:"videos,omitempty" xml:"videos,omitempty"`
}

// DeleteCommentResponseBody is the type of the "video_learning" service
// "DeleteComment" endpoint HTTP response body.
type DeleteCommentResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrCreateCategoryResponseBody is the type of the "video_learning" service
// "GetOrCreateCategory" endpoint HTTP response body.
type GetOrCreateCategoryResponseBody struct {
	// Category unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Category name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetCategoryByIDResponseBody is the type of the "video_learning" service
// "GetCategoryById" endpoint HTTP response body.
type GetCategoryByIDResponseBody struct {
	// Category unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Category name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetOrCreateTagResponseBody is the type of the "video_learning" service
// "GetOrCreateTag" endpoint HTTP response body.
type GetOrCreateTagResponseBody struct {
	// Tag unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tag name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetTagByIDResponseBody is the type of the "video_learning" service
// "GetTagById" endpoint HTTP response body.
type GetTagByIDResponseBody struct {
	// Tag unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tag name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// VideoResponseBody is used to define fields on response body types.
type VideoResponseBody struct {
	// Video unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Video title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Video author/creator
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Number of views
	Views *int `form:"views,omitempty" json:"views,omitempty" xml:"views,omitempty"`
	// Number of likes
	Likes *int `form:"likes,omitempty" json:"likes,omitempty" xml:"likes,omitempty"`
	// Minio presigned URL for thumbnail
	ThumbnailURL *string `form:"thumbnail_url,omitempty" json:"thumbnail_url,omitempty" xml:"thumbnail_url,omitempty"`
}

// CommentResponseBody is used to define fields on response body types.
type CommentResponseBody struct {
	// Comment unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Comment author
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Comment publish date in milliseconds
	Date *int64 `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Comment title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Comment content
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	// ID of the video this comment belongs to
	VideoID *int64 `form:"video_id,omitempty" json:"video_id,omitempty" xml:"video_id,omitempty"`
}

// OwnVideoResponse is used to define fields on response body types.
type OwnVideoResponse struct {
	// Video unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Video title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Number of views
	Views *int `form:"views,omitempty" json:"views,omitempty" xml:"views,omitempty"`
	// Number of likes
	Likes *int `form:"likes,omitempty" json:"likes,omitempty" xml:"likes,omitempty"`
	// Minio presigned URL for thumbnail
	ThumbnailURL *string `form:"thumbnail_url,omitempty" json:"thumbnail_url,omitempty" xml:"thumbnail_url,omitempty"`
	// Upload timestamp in milliseconds
	UploadDate *int64 `form:"upload_date,omitempty" json:"upload_date,omitempty" xml:"upload_date,omitempty"`
}

// VideoCategoryResponse is used to define fields on response body types.
type VideoCategoryResponse struct {
	// Category unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Category name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// VideoTagResponse is used to define fields on response body types.
type VideoTagResponse struct {
	// Tag unique identifier
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tag name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCreateCommentRequestBody builds the HTTP request body from the payload of
// the "CreateComment" endpoint of the "video_learning" service.
func NewCreateCommentRequestBody(p *videolearning.CreateCommentPayload) *CreateCommentRequestBody {
	body := &CreateCommentRequestBody{
		Title: p.Title,
		Body:  p.Body,
	}
	return body
}

// NewCompleteUploadRequestBody builds the HTTP request body from the payload
// of the "CompleteUpload" endpoint of the "video_learning" service.
func NewCompleteUploadRequestBody(p *videolearning.CompleteUploadPayload) *CompleteUploadRequestBody {
	body := &CompleteUploadRequestBody{
		Title:               p.Title,
		Description:         p.Description,
		CategoryID:          p.CategoryID,
		ThumbnailObjectName: p.ThumbnailObjectName,
		VideoObjectName:     p.VideoObjectName,
	}
	if p.Tags != nil {
		body.Tags = make([]string, len(p.Tags))
		for i, val := range p.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewGetOrCreateCategoryRequestBody builds the HTTP request body from the
// payload of the "GetOrCreateCategory" endpoint of the "video_learning"
// service.
func NewGetOrCreateCategoryRequestBody(p *videolearning.GetOrCreateCategoryPayload) *GetOrCreateCategoryRequestBody {
	body := &GetOrCreateCategoryRequestBody{
		Name: p.Name,
	}
	return body
}

// NewGetOrCreateTagRequestBody builds the HTTP request body from the payload
// of the "GetOrCreateTag" endpoint of the "video_learning" service.
func NewGetOrCreateTagRequestBody(p *videolearning.GetOrCreateTagPayload) *GetOrCreateTagRequestBody {
	body := &GetOrCreateTagRequestBody{
		Name: p.Name,
	}
	return body
}

// NewSearchVideosVideoListOK builds a "video_learning" service "SearchVideos"
// endpoint result from a HTTP "OK" response.
func NewSearchVideosVideoListOK(body *SearchVideosResponseBody) *videolearning.VideoList {
	v := &videolearning.VideoList{}
	v.Videos = make([]*videolearning.Video, len(body.Videos))
	for i, val := range body.Videos {
		v.Videos[i] = unmarshalVideoResponseBodyToVideolearningVideo(val)
	}

	return v
}

// NewSearchVideosInvalidInput builds a video_learning service SearchVideos
// endpoint invalid_input error.
func NewSearchVideosInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewSearchVideosInvalidSession builds a video_learning service SearchVideos
// endpoint invalid_session error.
func NewSearchVideosInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewSearchVideosUnauthorized builds a video_learning service SearchVideos
// endpoint unauthorized error.
func NewSearchVideosUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewSearchVideosServiceUnavailable builds a video_learning service
// SearchVideos endpoint service_unavailable error.
func NewSearchVideosServiceUnavailable(body string) videolearning.ServiceUnavailable {
	v := videolearning.ServiceUnavailable(body)

	return v
}

// NewGetRecommendationsVideoListOK builds a "video_learning" service
// "GetRecommendations" endpoint result from a HTTP "OK" response.
func NewGetRecommendationsVideoListOK(body *GetRecommendationsResponseBody) *videolearning.VideoList {
	v := &videolearning.VideoList{}
	v.Videos = make([]*videolearning.Video, len(body.Videos))
	for i, val := range body.Videos {
		v.Videos[i] = unmarshalVideoResponseBodyToVideolearningVideo(val)
	}

	return v
}

// NewGetRecommendationsInvalidSession builds a video_learning service
// GetRecommendations endpoint invalid_session error.
func NewGetRecommendationsInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetRecommendationsUnauthorized builds a video_learning service
// GetRecommendations endpoint unauthorized error.
func NewGetRecommendationsUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetRecommendationsServiceUnavailable builds a video_learning service
// GetRecommendations endpoint service_unavailable error.
func NewGetRecommendationsServiceUnavailable(body string) videolearning.ServiceUnavailable {
	v := videolearning.ServiceUnavailable(body)

	return v
}

// NewGetVideoVideoDetailsOK builds a "video_learning" service "GetVideo"
// endpoint result from a HTTP "OK" response.
func NewGetVideoVideoDetailsOK(body *GetVideoResponseBody) *videolearning.VideoDetails {
	v := &videolearning.VideoDetails{
		ID:           *body.ID,
		Title:        *body.Title,
		Description:  *body.Description,
		Author:       *body.Author,
		Views:        *body.Views,
		Likes:        *body.Likes,
		VideoURL:     *body.VideoURL,
		ThumbnailURL: *body.ThumbnailURL,
		UploadDate:   *body.UploadDate,
		CategoryID:   *body.CategoryID,
	}
	v.TagIds = make([]int64, len(body.TagIds))
	for i, val := range body.TagIds {
		v.TagIds[i] = val
	}

	return v
}

// NewGetVideoInvalidInput builds a video_learning service GetVideo endpoint
// invalid_input error.
func NewGetVideoInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetVideoInvalidSession builds a video_learning service GetVideo endpoint
// invalid_session error.
func NewGetVideoInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetVideoUnauthorized builds a video_learning service GetVideo endpoint
// unauthorized error.
func NewGetVideoUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetVideoVideoNotFound builds a video_learning service GetVideo endpoint
// video_not_found error.
func NewGetVideoVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewGetCommentsCommentListOK builds a "video_learning" service "GetComments"
// endpoint result from a HTTP "OK" response.
func NewGetCommentsCommentListOK(body *GetCommentsResponseBody) *videolearning.CommentList {
	v := &videolearning.CommentList{}
	v.Comments = make([]*videolearning.Comment, len(body.Comments))
	for i, val := range body.Comments {
		v.Comments[i] = unmarshalCommentResponseBodyToVideolearningComment(val)
	}

	return v
}

// NewGetCommentsInvalidInput builds a video_learning service GetComments
// endpoint invalid_input error.
func NewGetCommentsInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetCommentsInvalidSession builds a video_learning service GetComments
// endpoint invalid_session error.
func NewGetCommentsInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetCommentsUnauthorized builds a video_learning service GetComments
// endpoint unauthorized error.
func NewGetCommentsUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetCommentsVideoNotFound builds a video_learning service GetComments
// endpoint video_not_found error.
func NewGetCommentsVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewCreateCommentSimpleResponseCreated builds a "video_learning" service
// "CreateComment" endpoint result from a HTTP "Created" response.
func NewCreateCommentSimpleResponseCreated(body *CreateCommentResponseBody) *videolearning.SimpleResponse {
	v := &videolearning.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
		ID:      body.ID,
	}

	return v
}

// NewCreateCommentInvalidInput builds a video_learning service CreateComment
// endpoint invalid_input error.
func NewCreateCommentInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewCreateCommentInvalidSession builds a video_learning service CreateComment
// endpoint invalid_session error.
func NewCreateCommentInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewCreateCommentUnauthorized builds a video_learning service CreateComment
// endpoint unauthorized error.
func NewCreateCommentUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewCreateCommentVideoNotFound builds a video_learning service CreateComment
// endpoint video_not_found error.
func NewCreateCommentVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewGetOwnVideosOwnVideoOK builds a "video_learning" service "GetOwnVideos"
// endpoint result from a HTTP "OK" response.
func NewGetOwnVideosOwnVideoOK(body []*OwnVideoResponse) []*videolearning.OwnVideo {
	v := make([]*videolearning.OwnVideo, len(body))
	for i, val := range body {
		v[i] = unmarshalOwnVideoResponseToVideolearningOwnVideo(val)
	}

	return v
}

// NewGetOwnVideosInvalidSession builds a video_learning service GetOwnVideos
// endpoint invalid_session error.
func NewGetOwnVideosInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetOwnVideosUnauthorized builds a video_learning service GetOwnVideos
// endpoint unauthorized error.
func NewGetOwnVideosUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewInitialUploadUploadResponseOK builds a "video_learning" service
// "InitialUpload" endpoint result from a HTTP "OK" response.
func NewInitialUploadUploadResponseOK(body *InitialUploadResponseBody) *videolearning.UploadResponse {
	v := &videolearning.UploadResponse{
		ObjectName:   *body.ObjectName,
		PresignedURL: body.PresignedURL,
	}

	return v
}

// NewInitialUploadInvalidInput builds a video_learning service InitialUpload
// endpoint invalid_input error.
func NewInitialUploadInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewInitialUploadInvalidSession builds a video_learning service InitialUpload
// endpoint invalid_session error.
func NewInitialUploadInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewInitialUploadUnauthorized builds a video_learning service InitialUpload
// endpoint unauthorized error.
func NewInitialUploadUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewInitialUploadUploadFailed builds a video_learning service InitialUpload
// endpoint upload_failed error.
func NewInitialUploadUploadFailed(body string) videolearning.UploadFailed {
	v := videolearning.UploadFailed(body)

	return v
}

// NewCompleteUploadSimpleResponseCreated builds a "video_learning" service
// "CompleteUpload" endpoint result from a HTTP "Created" response.
func NewCompleteUploadSimpleResponseCreated(body *CompleteUploadResponseBody) *videolearning.SimpleResponse {
	v := &videolearning.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
		ID:      body.ID,
	}

	return v
}

// NewCompleteUploadInvalidInput builds a video_learning service CompleteUpload
// endpoint invalid_input error.
func NewCompleteUploadInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewCompleteUploadInvalidSession builds a video_learning service
// CompleteUpload endpoint invalid_session error.
func NewCompleteUploadInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewCompleteUploadUnauthorized builds a video_learning service CompleteUpload
// endpoint unauthorized error.
func NewCompleteUploadUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewUploadThumbnailUploadResponseOK builds a "video_learning" service
// "UploadThumbnail" endpoint result from a HTTP "OK" response.
func NewUploadThumbnailUploadResponseOK(body *UploadThumbnailResponseBody) *videolearning.UploadResponse {
	v := &videolearning.UploadResponse{
		ObjectName:   *body.ObjectName,
		PresignedURL: body.PresignedURL,
	}

	return v
}

// NewUploadThumbnailInvalidInput builds a video_learning service
// UploadThumbnail endpoint invalid_input error.
func NewUploadThumbnailInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewUploadThumbnailInvalidSession builds a video_learning service
// UploadThumbnail endpoint invalid_session error.
func NewUploadThumbnailInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewUploadThumbnailUnauthorized builds a video_learning service
// UploadThumbnail endpoint unauthorized error.
func NewUploadThumbnailUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewUploadThumbnailUploadFailed builds a video_learning service
// UploadThumbnail endpoint upload_failed error.
func NewUploadThumbnailUploadFailed(body string) videolearning.UploadFailed {
	v := videolearning.UploadFailed(body)

	return v
}

// NewGetAllCategoriesVideoCategoryOK builds a "video_learning" service
// "GetAllCategories" endpoint result from a HTTP "OK" response.
func NewGetAllCategoriesVideoCategoryOK(body []*VideoCategoryResponse) []*videolearning.VideoCategory {
	v := make([]*videolearning.VideoCategory, len(body))
	for i, val := range body {
		v[i] = unmarshalVideoCategoryResponseToVideolearningVideoCategory(val)
	}

	return v
}

// NewGetAllCategoriesInvalidSession builds a video_learning service
// GetAllCategories endpoint invalid_session error.
func NewGetAllCategoriesInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetAllCategoriesUnauthorized builds a video_learning service
// GetAllCategories endpoint unauthorized error.
func NewGetAllCategoriesUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetAllTagsVideoTagOK builds a "video_learning" service "GetAllTags"
// endpoint result from a HTTP "OK" response.
func NewGetAllTagsVideoTagOK(body []*VideoTagResponse) []*videolearning.VideoTag {
	v := make([]*videolearning.VideoTag, len(body))
	for i, val := range body {
		v[i] = unmarshalVideoTagResponseToVideolearningVideoTag(val)
	}

	return v
}

// NewGetAllTagsInvalidSession builds a video_learning service GetAllTags
// endpoint invalid_session error.
func NewGetAllTagsInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetAllTagsUnauthorized builds a video_learning service GetAllTags
// endpoint unauthorized error.
func NewGetAllTagsUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewToggleVideoLikeSimpleResponseOK builds a "video_learning" service
// "ToggleVideoLike" endpoint result from a HTTP "OK" response.
func NewToggleVideoLikeSimpleResponseOK(body *ToggleVideoLikeResponseBody) *videolearning.SimpleResponse {
	v := &videolearning.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
		ID:      body.ID,
	}

	return v
}

// NewToggleVideoLikeInvalidInput builds a video_learning service
// ToggleVideoLike endpoint invalid_input error.
func NewToggleVideoLikeInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewToggleVideoLikeInvalidSession builds a video_learning service
// ToggleVideoLike endpoint invalid_session error.
func NewToggleVideoLikeInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewToggleVideoLikeUnauthorized builds a video_learning service
// ToggleVideoLike endpoint unauthorized error.
func NewToggleVideoLikeUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewToggleVideoLikeVideoNotFound builds a video_learning service
// ToggleVideoLike endpoint video_not_found error.
func NewToggleVideoLikeVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewDeleteVideoSimpleResponseOK builds a "video_learning" service
// "DeleteVideo" endpoint result from a HTTP "OK" response.
func NewDeleteVideoSimpleResponseOK(body *DeleteVideoResponseBody) *videolearning.SimpleResponse {
	v := &videolearning.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
		ID:      body.ID,
	}

	return v
}

// NewDeleteVideoInvalidInput builds a video_learning service DeleteVideo
// endpoint invalid_input error.
func NewDeleteVideoInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewDeleteVideoInvalidSession builds a video_learning service DeleteVideo
// endpoint invalid_session error.
func NewDeleteVideoInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewDeleteVideoUnauthorized builds a video_learning service DeleteVideo
// endpoint unauthorized error.
func NewDeleteVideoUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewDeleteVideoVideoNotFound builds a video_learning service DeleteVideo
// endpoint video_not_found error.
func NewDeleteVideoVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewGetVideosByCategoryVideoListOK builds a "video_learning" service
// "GetVideosByCategory" endpoint result from a HTTP "OK" response.
func NewGetVideosByCategoryVideoListOK(body *GetVideosByCategoryResponseBody) *videolearning.VideoList {
	v := &videolearning.VideoList{}
	v.Videos = make([]*videolearning.Video, len(body.Videos))
	for i, val := range body.Videos {
		v.Videos[i] = unmarshalVideoResponseBodyToVideolearningVideo(val)
	}

	return v
}

// NewGetVideosByCategoryInvalidInput builds a video_learning service
// GetVideosByCategory endpoint invalid_input error.
func NewGetVideosByCategoryInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetVideosByCategoryInvalidSession builds a video_learning service
// GetVideosByCategory endpoint invalid_session error.
func NewGetVideosByCategoryInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetVideosByCategoryUnauthorized builds a video_learning service
// GetVideosByCategory endpoint unauthorized error.
func NewGetVideosByCategoryUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetSimilarVideosVideoListOK builds a "video_learning" service
// "GetSimilarVideos" endpoint result from a HTTP "OK" response.
func NewGetSimilarVideosVideoListOK(body *GetSimilarVideosResponseBody) *videolearning.VideoList {
	v := &videolearning.VideoList{}
	v.Videos = make([]*videolearning.Video, len(body.Videos))
	for i, val := range body.Videos {
		v.Videos[i] = unmarshalVideoResponseBodyToVideolearningVideo(val)
	}

	return v
}

// NewGetSimilarVideosInvalidInput builds a video_learning service
// GetSimilarVideos endpoint invalid_input error.
func NewGetSimilarVideosInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetSimilarVideosInvalidSession builds a video_learning service
// GetSimilarVideos endpoint invalid_session error.
func NewGetSimilarVideosInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetSimilarVideosUnauthorized builds a video_learning service
// GetSimilarVideos endpoint unauthorized error.
func NewGetSimilarVideosUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetSimilarVideosVideoNotFound builds a video_learning service
// GetSimilarVideos endpoint video_not_found error.
func NewGetSimilarVideosVideoNotFound(body string) videolearning.VideoNotFound {
	v := videolearning.VideoNotFound(body)

	return v
}

// NewDeleteCommentSimpleResponseOK builds a "video_learning" service
// "DeleteComment" endpoint result from a HTTP "OK" response.
func NewDeleteCommentSimpleResponseOK(body *DeleteCommentResponseBody) *videolearning.SimpleResponse {
	v := &videolearning.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
		ID:      body.ID,
	}

	return v
}

// NewDeleteCommentInvalidInput builds a video_learning service DeleteComment
// endpoint invalid_input error.
func NewDeleteCommentInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewDeleteCommentInvalidSession builds a video_learning service DeleteComment
// endpoint invalid_session error.
func NewDeleteCommentInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewDeleteCommentUnauthorized builds a video_learning service DeleteComment
// endpoint unauthorized error.
func NewDeleteCommentUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewDeleteCommentPermissionDenied builds a video_learning service
// DeleteComment endpoint permission_denied error.
func NewDeleteCommentPermissionDenied(body string) videolearning.PermissionDenied {
	v := videolearning.PermissionDenied(body)

	return v
}

// NewGetOrCreateCategoryVideoCategoryCreated builds a "video_learning" service
// "GetOrCreateCategory" endpoint result from a HTTP "Created" response.
func NewGetOrCreateCategoryVideoCategoryCreated(body *GetOrCreateCategoryResponseBody) *videolearning.VideoCategory {
	v := &videolearning.VideoCategory{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewGetOrCreateCategoryInvalidInput builds a video_learning service
// GetOrCreateCategory endpoint invalid_input error.
func NewGetOrCreateCategoryInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetOrCreateCategoryInvalidSession builds a video_learning service
// GetOrCreateCategory endpoint invalid_session error.
func NewGetOrCreateCategoryInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetOrCreateCategoryUnauthorized builds a video_learning service
// GetOrCreateCategory endpoint unauthorized error.
func NewGetOrCreateCategoryUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetCategoryByIDVideoCategoryOK builds a "video_learning" service
// "GetCategoryById" endpoint result from a HTTP "OK" response.
func NewGetCategoryByIDVideoCategoryOK(body *GetCategoryByIDResponseBody) *videolearning.VideoCategory {
	v := &videolearning.VideoCategory{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewGetCategoryByIDCategoryNotFound builds a video_learning service
// GetCategoryById endpoint category_not_found error.
func NewGetCategoryByIDCategoryNotFound(body string) videolearning.CategoryNotFound {
	v := videolearning.CategoryNotFound(body)

	return v
}

// NewGetCategoryByIDInvalidInput builds a video_learning service
// GetCategoryById endpoint invalid_input error.
func NewGetCategoryByIDInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetCategoryByIDInvalidSession builds a video_learning service
// GetCategoryById endpoint invalid_session error.
func NewGetCategoryByIDInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetCategoryByIDUnauthorized builds a video_learning service
// GetCategoryById endpoint unauthorized error.
func NewGetCategoryByIDUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetOrCreateTagVideoTagCreated builds a "video_learning" service
// "GetOrCreateTag" endpoint result from a HTTP "Created" response.
func NewGetOrCreateTagVideoTagCreated(body *GetOrCreateTagResponseBody) *videolearning.VideoTag {
	v := &videolearning.VideoTag{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewGetOrCreateTagInvalidInput builds a video_learning service GetOrCreateTag
// endpoint invalid_input error.
func NewGetOrCreateTagInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetOrCreateTagInvalidSession builds a video_learning service
// GetOrCreateTag endpoint invalid_session error.
func NewGetOrCreateTagInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetOrCreateTagUnauthorized builds a video_learning service GetOrCreateTag
// endpoint unauthorized error.
func NewGetOrCreateTagUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetTagByIDVideoTagOK builds a "video_learning" service "GetTagById"
// endpoint result from a HTTP "OK" response.
func NewGetTagByIDVideoTagOK(body *GetTagByIDResponseBody) *videolearning.VideoTag {
	v := &videolearning.VideoTag{
		ID:   *body.ID,
		Name: *body.Name,
	}

	return v
}

// NewGetTagByIDInvalidInput builds a video_learning service GetTagById
// endpoint invalid_input error.
func NewGetTagByIDInvalidInput(body string) videolearning.InvalidInput {
	v := videolearning.InvalidInput(body)

	return v
}

// NewGetTagByIDInvalidSession builds a video_learning service GetTagById
// endpoint invalid_session error.
func NewGetTagByIDInvalidSession(body string) videolearning.InvalidSession {
	v := videolearning.InvalidSession(body)

	return v
}

// NewGetTagByIDUnauthorized builds a video_learning service GetTagById
// endpoint unauthorized error.
func NewGetTagByIDUnauthorized(body string) videolearning.Unauthorized {
	v := videolearning.Unauthorized(body)

	return v
}

// NewGetTagByIDTagNotFound builds a video_learning service GetTagById endpoint
// tag_not_found error.
func NewGetTagByIDTagNotFound(body string) videolearning.TagNotFound {
	v := videolearning.TagNotFound(body)

	return v
}

// ValidateSearchVideosResponseBody runs the validations defined on
// SearchVideosResponseBody
func ValidateSearchVideosResponseBody(body *SearchVideosResponseBody) (err error) {
	if body.Videos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("videos", "body"))
	}
	for _, e := range body.Videos {
		if e != nil {
			if err2 := ValidateVideoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetRecommendationsResponseBody runs the validations defined on
// GetRecommendationsResponseBody
func ValidateGetRecommendationsResponseBody(body *GetRecommendationsResponseBody) (err error) {
	if body.Videos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("videos", "body"))
	}
	for _, e := range body.Videos {
		if e != nil {
			if err2 := ValidateVideoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetVideoResponseBody runs the validations defined on
// GetVideoResponseBody
func ValidateGetVideoResponseBody(body *GetVideoResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Views == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("views", "body"))
	}
	if body.Likes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("likes", "body"))
	}
	if body.VideoURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("video_url", "body"))
	}
	if body.ThumbnailURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("thumbnail_url", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upload_date", "body"))
	}
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.TagIds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tag_ids", "body"))
	}
	return
}

// ValidateGetCommentsResponseBody runs the validations defined on
// GetCommentsResponseBody
func ValidateGetCommentsResponseBody(body *GetCommentsResponseBody) (err error) {
	if body.Comments == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("comments", "body"))
	}
	for _, e := range body.Comments {
		if e != nil {
			if err2 := ValidateCommentResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateCommentResponseBody runs the validations defined on
// CreateCommentResponseBody
func ValidateCreateCommentResponseBody(body *CreateCommentResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateInitialUploadResponseBody runs the validations defined on
// InitialUploadResponseBody
func ValidateInitialUploadResponseBody(body *InitialUploadResponseBody) (err error) {
	if body.ObjectName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_name", "body"))
	}
	return
}

// ValidateCompleteUploadResponseBody runs the validations defined on
// CompleteUploadResponseBody
func ValidateCompleteUploadResponseBody(body *CompleteUploadResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUploadThumbnailResponseBody runs the validations defined on
// UploadThumbnailResponseBody
func ValidateUploadThumbnailResponseBody(body *UploadThumbnailResponseBody) (err error) {
	if body.ObjectName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("object_name", "body"))
	}
	return
}

// ValidateToggleVideoLikeResponseBody runs the validations defined on
// ToggleVideoLikeResponseBody
func ValidateToggleVideoLikeResponseBody(body *ToggleVideoLikeResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteVideoResponseBody runs the validations defined on
// DeleteVideoResponseBody
func ValidateDeleteVideoResponseBody(body *DeleteVideoResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetVideosByCategoryResponseBody runs the validations defined on
// GetVideosByCategoryResponseBody
func ValidateGetVideosByCategoryResponseBody(body *GetVideosByCategoryResponseBody) (err error) {
	if body.Videos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("videos", "body"))
	}
	for _, e := range body.Videos {
		if e != nil {
			if err2 := ValidateVideoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetSimilarVideosResponseBody runs the validations defined on
// GetSimilarVideosResponseBody
func ValidateGetSimilarVideosResponseBody(body *GetSimilarVideosResponseBody) (err error) {
	if body.Videos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("videos", "body"))
	}
	for _, e := range body.Videos {
		if e != nil {
			if err2 := ValidateVideoResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateDeleteCommentResponseBody runs the validations defined on
// DeleteCommentResponseBody
func ValidateDeleteCommentResponseBody(body *DeleteCommentResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetOrCreateCategoryResponseBody runs the validations defined on
// GetOrCreateCategoryResponseBody
func ValidateGetOrCreateCategoryResponseBody(body *GetOrCreateCategoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetCategoryByIDResponseBody runs the validations defined on
// GetCategoryByIdResponseBody
func ValidateGetCategoryByIDResponseBody(body *GetCategoryByIDResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetOrCreateTagResponseBody runs the validations defined on
// GetOrCreateTagResponseBody
func ValidateGetOrCreateTagResponseBody(body *GetOrCreateTagResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGetTagByIDResponseBody runs the validations defined on
// GetTagByIdResponseBody
func ValidateGetTagByIDResponseBody(body *GetTagByIDResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateVideoResponseBody runs the validations defined on VideoResponseBody
func ValidateVideoResponseBody(body *VideoResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Views == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("views", "body"))
	}
	if body.Likes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("likes", "body"))
	}
	if body.ThumbnailURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("thumbnail_url", "body"))
	}
	return
}

// ValidateCommentResponseBody runs the validations defined on
// CommentResponseBody
func ValidateCommentResponseBody(body *CommentResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Date == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("date", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	if body.VideoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("video_id", "body"))
	}
	return
}

// ValidateOwnVideoResponse runs the validations defined on OwnVideoResponse
func ValidateOwnVideoResponse(body *OwnVideoResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Views == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("views", "body"))
	}
	if body.Likes == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("likes", "body"))
	}
	if body.ThumbnailURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("thumbnail_url", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("upload_date", "body"))
	}
	return
}

// ValidateVideoCategoryResponse runs the validations defined on
// VideoCategoryResponse
func ValidateVideoCategoryResponse(body *VideoCategoryResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateVideoTagResponse runs the validations defined on VideoTagResponse
func ValidateVideoTagResponse(body *VideoTagResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
