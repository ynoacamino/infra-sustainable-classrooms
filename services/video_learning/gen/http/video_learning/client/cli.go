// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package client

import (
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	videolearning "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/video_learning"
	goa "goa.design/goa/v3/pkg"
)

// BuildSearchVideosPayload builds the payload for the video_learning
// SearchVideos endpoint from CLI flags.
func BuildSearchVideosPayload(videoLearningSearchVideosQuery string, videoLearningSearchVideosCategoryID string, videoLearningSearchVideosPage string, videoLearningSearchVideosPageSize string, videoLearningSearchVideosSessionToken string) (*videolearning.SearchVideosPayload, error) {
	var err error
	var query string
	{
		query = videoLearningSearchVideosQuery
		if utf8.RuneCountInString(query) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("query", query, utf8.RuneCountInString(query), 1, true))
		}
		if utf8.RuneCountInString(query) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("query", query, utf8.RuneCountInString(query), 200, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var categoryID *int64
	{
		if videoLearningSearchVideosCategoryID != "" {
			val, err := strconv.ParseInt(videoLearningSearchVideosCategoryID, 10, 64)
			categoryID = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for categoryID, must be INT64")
			}
			if *categoryID < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", *categoryID, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var page int
	{
		if videoLearningSearchVideosPage != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningSearchVideosPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageSize int
	{
		if videoLearningSearchVideosPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningSearchVideosPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
			}
			if pageSize > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningSearchVideosSessionToken
	}
	v := &videolearning.SearchVideosPayload{}
	v.Query = query
	v.CategoryID = categoryID
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetRecommendationsPayload builds the payload for the video_learning
// GetRecommendations endpoint from CLI flags.
func BuildGetRecommendationsPayload(videoLearningGetRecommendationsAmount string, videoLearningGetRecommendationsSessionToken string) (*videolearning.GetRecommendationsPayload, error) {
	var err error
	var amount int
	{
		if videoLearningGetRecommendationsAmount != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetRecommendationsAmount, 10, strconv.IntSize)
			amount = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for amount, must be INT")
			}
			if amount < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
			}
			if amount > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetRecommendationsSessionToken
	}
	v := &videolearning.GetRecommendationsPayload{}
	v.Amount = amount
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetVideoPayload builds the payload for the video_learning GetVideo
// endpoint from CLI flags.
func BuildGetVideoPayload(videoLearningGetVideoVideoID string, videoLearningGetVideoSessionToken string) (*videolearning.GetVideoPayload, error) {
	var err error
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningGetVideoVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetVideoSessionToken
	}
	v := &videolearning.GetVideoPayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetCommentsPayload builds the payload for the video_learning
// GetComments endpoint from CLI flags.
func BuildGetCommentsPayload(videoLearningGetCommentsVideoID string, videoLearningGetCommentsPage string, videoLearningGetCommentsPageSize string, videoLearningGetCommentsSessionToken string) (*videolearning.GetCommentsPayload, error) {
	var err error
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningGetCommentsVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var page int
	{
		if videoLearningGetCommentsPage != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetCommentsPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageSize int
	{
		if videoLearningGetCommentsPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetCommentsPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
			}
			if pageSize > 50 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 50, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetCommentsSessionToken
	}
	v := &videolearning.GetCommentsPayload{}
	v.VideoID = videoID
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v, nil
}

// BuildCreateCommentPayload builds the payload for the video_learning
// CreateComment endpoint from CLI flags.
func BuildCreateCommentPayload(videoLearningCreateCommentBody string, videoLearningCreateCommentVideoID string, videoLearningCreateCommentSessionToken string) (*videolearning.CreateCommentPayload, error) {
	var err error
	var body CreateCommentRequestBody
	{
		err = json.Unmarshal([]byte(videoLearningCreateCommentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"body\": \"j7\",\n      \"title\": \"a\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
		}
		if utf8.RuneCountInString(body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 150, false))
		}
		if utf8.RuneCountInString(body.Body) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.body", body.Body, utf8.RuneCountInString(body.Body), 1, true))
		}
		if utf8.RuneCountInString(body.Body) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.body", body.Body, utf8.RuneCountInString(body.Body), 2000, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningCreateCommentVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningCreateCommentSessionToken
	}
	v := &videolearning.CreateCommentPayload{
		Title: body.Title,
		Body:  body.Body,
	}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetOwnVideosPayload builds the payload for the video_learning
// GetOwnVideos endpoint from CLI flags.
func BuildGetOwnVideosPayload(videoLearningGetOwnVideosPage string, videoLearningGetOwnVideosPageSize string, videoLearningGetOwnVideosSessionToken string) (*videolearning.GetOwnVideosPayload, error) {
	var err error
	var page int
	{
		if videoLearningGetOwnVideosPage != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetOwnVideosPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var pageSize int
	{
		if videoLearningGetOwnVideosPageSize != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetOwnVideosPageSize, 10, strconv.IntSize)
			pageSize = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for pageSize, must be INT")
			}
			if pageSize < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
			}
			if pageSize > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetOwnVideosSessionToken
	}
	v := &videolearning.GetOwnVideosPayload{}
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v, nil
}

// BuildInitialUploadPayload builds the payload for the video_learning
// InitialUpload endpoint from CLI flags.
func BuildInitialUploadPayload(videoLearningInitialUploadFilename string, videoLearningInitialUploadContentType string, videoLearningInitialUploadSessionToken string) (*videolearning.InitialUploadPayload, error) {
	var filename string
	{
		filename = videoLearningInitialUploadFilename
	}
	var contentType string
	{
		contentType = videoLearningInitialUploadContentType
	}
	var sessionToken string
	{
		sessionToken = videoLearningInitialUploadSessionToken
	}
	v := &videolearning.InitialUploadPayload{}
	v.Filename = filename
	v.ContentType = contentType
	v.SessionToken = sessionToken

	return v, nil
}

// BuildCompleteUploadPayload builds the payload for the video_learning
// CompleteUpload endpoint from CLI flags.
func BuildCompleteUploadPayload(videoLearningCompleteUploadBody string, videoLearningCompleteUploadSessionToken string) (*videolearning.CompleteUploadPayload, error) {
	var err error
	var body CompleteUploadRequestBody
	{
		err = json.Unmarshal([]byte(videoLearningCompleteUploadBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"category_id\": 8870319193588356468,\n      \"description\": \"jfy\",\n      \"tags\": [\n         \"Dolorem et officiis enim et fugit.\",\n         \"Est facilis quaerat similique libero.\",\n         \"Ducimus aut quis ut ut excepturi.\"\n      ],\n      \"thumbnail_object_name\": \"Delectus quo consectetur assumenda rerum et.\",\n      \"title\": \"mu3\",\n      \"video_object_name\": \"Exercitationem et recusandae autem.\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 1, true))
		}
		if utf8.RuneCountInString(body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 150, false))
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) > 2000 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
			}
		}
		if body.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.category_id", body.CategoryID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningCompleteUploadSessionToken
	}
	v := &videolearning.CompleteUploadPayload{
		Title:               body.Title,
		Description:         body.Description,
		CategoryID:          body.CategoryID,
		ThumbnailObjectName: body.ThumbnailObjectName,
		VideoObjectName:     body.VideoObjectName,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildUploadThumbnailPayload builds the payload for the video_learning
// UploadThumbnail endpoint from CLI flags.
func BuildUploadThumbnailPayload(videoLearningUploadThumbnailFilename string, videoLearningUploadThumbnailContentType string, videoLearningUploadThumbnailSessionToken string) (*videolearning.UploadThumbnailPayload, error) {
	var filename string
	{
		filename = videoLearningUploadThumbnailFilename
	}
	var contentType string
	{
		contentType = videoLearningUploadThumbnailContentType
	}
	var sessionToken string
	{
		sessionToken = videoLearningUploadThumbnailSessionToken
	}
	v := &videolearning.UploadThumbnailPayload{}
	v.Filename = filename
	v.ContentType = contentType
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetAllCategoriesPayload builds the payload for the video_learning
// GetAllCategories endpoint from CLI flags.
func BuildGetAllCategoriesPayload(videoLearningGetAllCategoriesSessionToken string) (*videolearning.GetAllCategoriesPayload, error) {
	var sessionToken string
	{
		sessionToken = videoLearningGetAllCategoriesSessionToken
	}
	v := &videolearning.GetAllCategoriesPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetAllTagsPayload builds the payload for the video_learning GetAllTags
// endpoint from CLI flags.
func BuildGetAllTagsPayload(videoLearningGetAllTagsSessionToken string) (*videolearning.GetAllTagsPayload, error) {
	var sessionToken string
	{
		sessionToken = videoLearningGetAllTagsSessionToken
	}
	v := &videolearning.GetAllTagsPayload{}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildToggleVideoLikePayload builds the payload for the video_learning
// ToggleVideoLike endpoint from CLI flags.
func BuildToggleVideoLikePayload(videoLearningToggleVideoLikeVideoID string, videoLearningToggleVideoLikeSessionToken string) (*videolearning.ToggleVideoLikePayload, error) {
	var err error
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningToggleVideoLikeVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningToggleVideoLikeSessionToken
	}
	v := &videolearning.ToggleVideoLikePayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildDeleteVideoPayload builds the payload for the video_learning
// DeleteVideo endpoint from CLI flags.
func BuildDeleteVideoPayload(videoLearningDeleteVideoVideoID string, videoLearningDeleteVideoSessionToken string) (*videolearning.DeleteVideoPayload, error) {
	var err error
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningDeleteVideoVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningDeleteVideoSessionToken
	}
	v := &videolearning.DeleteVideoPayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetVideosByCategoryPayload builds the payload for the video_learning
// GetVideosByCategory endpoint from CLI flags.
func BuildGetVideosByCategoryPayload(videoLearningGetVideosByCategoryCategoryID string, videoLearningGetVideosByCategoryAmount string, videoLearningGetVideosByCategorySessionToken string) (*videolearning.GetVideosByCategoryPayload, error) {
	var err error
	var categoryID int64
	{
		categoryID, err = strconv.ParseInt(videoLearningGetVideosByCategoryCategoryID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for categoryID, must be INT64")
		}
		if categoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", categoryID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var amount int
	{
		if videoLearningGetVideosByCategoryAmount != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetVideosByCategoryAmount, 10, strconv.IntSize)
			amount = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for amount, must be INT")
			}
			if amount < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
			}
			if amount > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetVideosByCategorySessionToken
	}
	v := &videolearning.GetVideosByCategoryPayload{}
	v.CategoryID = categoryID
	v.Amount = amount
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetSimilarVideosPayload builds the payload for the video_learning
// GetSimilarVideos endpoint from CLI flags.
func BuildGetSimilarVideosPayload(videoLearningGetSimilarVideosVideoID string, videoLearningGetSimilarVideosAmount string, videoLearningGetSimilarVideosSessionToken string) (*videolearning.GetSimilarVideosPayload, error) {
	var err error
	var videoID int64
	{
		videoID, err = strconv.ParseInt(videoLearningGetSimilarVideosVideoID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for videoID, must be INT64")
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var amount int
	{
		if videoLearningGetSimilarVideosAmount != "" {
			var v int64
			v, err = strconv.ParseInt(videoLearningGetSimilarVideosAmount, 10, strconv.IntSize)
			amount = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for amount, must be INT")
			}
			if amount < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
			}
			if amount > 50 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 50, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetSimilarVideosSessionToken
	}
	v := &videolearning.GetSimilarVideosPayload{}
	v.VideoID = videoID
	v.Amount = amount
	v.SessionToken = sessionToken

	return v, nil
}

// BuildDeleteCommentPayload builds the payload for the video_learning
// DeleteComment endpoint from CLI flags.
func BuildDeleteCommentPayload(videoLearningDeleteCommentCommentID string, videoLearningDeleteCommentSessionToken string) (*videolearning.DeleteCommentPayload, error) {
	var err error
	var commentID int64
	{
		commentID, err = strconv.ParseInt(videoLearningDeleteCommentCommentID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for commentID, must be INT64")
		}
		if commentID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("comment_id", commentID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningDeleteCommentSessionToken
	}
	v := &videolearning.DeleteCommentPayload{}
	v.CommentID = commentID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetOrCreateCategoryPayload builds the payload for the video_learning
// GetOrCreateCategory endpoint from CLI flags.
func BuildGetOrCreateCategoryPayload(videoLearningGetOrCreateCategoryBody string, videoLearningGetOrCreateCategorySessionToken string) (*videolearning.GetOrCreateCategoryPayload, error) {
	var err error
	var body GetOrCreateCategoryRequestBody
	{
		err = json.Unmarshal([]byte(videoLearningGetOrCreateCategoryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"g7\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
		}
		if utf8.RuneCountInString(body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetOrCreateCategorySessionToken
	}
	v := &videolearning.GetOrCreateCategoryPayload{
		Name: body.Name,
	}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetCategoryByIDPayload builds the payload for the video_learning
// GetCategoryById endpoint from CLI flags.
func BuildGetCategoryByIDPayload(videoLearningGetCategoryByIDCategoryID string, videoLearningGetCategoryByIDSessionToken string) (*videolearning.GetCategoryByIDPayload, error) {
	var err error
	var categoryID int64
	{
		categoryID, err = strconv.ParseInt(videoLearningGetCategoryByIDCategoryID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for categoryID, must be INT64")
		}
		if categoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", categoryID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetCategoryByIDSessionToken
	}
	v := &videolearning.GetCategoryByIDPayload{}
	v.CategoryID = categoryID
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetOrCreateTagPayload builds the payload for the video_learning
// GetOrCreateTag endpoint from CLI flags.
func BuildGetOrCreateTagPayload(videoLearningGetOrCreateTagBody string, videoLearningGetOrCreateTagSessionToken string) (*videolearning.GetOrCreateTagPayload, error) {
	var err error
	var body GetOrCreateTagRequestBody
	{
		err = json.Unmarshal([]byte(videoLearningGetOrCreateTagBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"qk\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
		}
		if utf8.RuneCountInString(body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 50, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetOrCreateTagSessionToken
	}
	v := &videolearning.GetOrCreateTagPayload{
		Name: body.Name,
	}
	v.SessionToken = sessionToken

	return v, nil
}

// BuildGetTagByIDPayload builds the payload for the video_learning GetTagById
// endpoint from CLI flags.
func BuildGetTagByIDPayload(videoLearningGetTagByIDTagID string, videoLearningGetTagByIDSessionToken string) (*videolearning.GetTagByIDPayload, error) {
	var err error
	var tagID int64
	{
		tagID, err = strconv.ParseInt(videoLearningGetTagByIDTagID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for tagID, must be INT64")
		}
		if tagID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("tag_id", tagID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var sessionToken string
	{
		sessionToken = videoLearningGetTagByIDSessionToken
	}
	v := &videolearning.GetTagByIDPayload{}
	v.TagID = tagID
	v.SessionToken = sessionToken

	return v, nil
}
