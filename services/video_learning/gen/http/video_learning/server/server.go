// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning HTTP server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package server

import (
	"context"
	"net/http"

	videolearning "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/video_learning"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the video_learning service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	SearchVideos        http.Handler
	GetRecommendations  http.Handler
	GetVideo            http.Handler
	GetComments         http.Handler
	CreateComment       http.Handler
	GetOwnVideos        http.Handler
	InitialUpload       http.Handler
	CompleteUpload      http.Handler
	UploadThumbnail     http.Handler
	GetAllCategories    http.Handler
	GetAllTags          http.Handler
	ToggleVideoLike     http.Handler
	DeleteVideo         http.Handler
	GetVideosByCategory http.Handler
	GetSimilarVideos    http.Handler
	DeleteComment       http.Handler
	GetOrCreateCategory http.Handler
	GetCategoryByID     http.Handler
	GetOrCreateTag      http.Handler
	GetTagByID          http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the video_learning service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *videolearning.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SearchVideos", "GET", "/api/video_learning/search"},
			{"GetRecommendations", "GET", "/api/video_learning/recommendations"},
			{"GetVideo", "GET", "/api/video_learning/video/{video_id}"},
			{"GetComments", "GET", "/api/video_learning/comments/{video_id}"},
			{"CreateComment", "POST", "/api/video_learning/comments/{video_id}/create"},
			{"GetOwnVideos", "GET", "/api/video_learning/my-videos"},
			{"InitialUpload", "POST", "/api/video_learning/upload/video/{*filename}"},
			{"CompleteUpload", "POST", "/api/video_learning/upload/complete"},
			{"UploadThumbnail", "POST", "/api/video_learning/upload/thumbnail/{*filename}"},
			{"GetAllCategories", "GET", "/api/video_learning/categories"},
			{"GetAllTags", "GET", "/api/video_learning/tags"},
			{"ToggleVideoLike", "PUT", "/api/video_learning/video/{video_id}/like"},
			{"DeleteVideo", "DELETE", "/api/video_learning/video/{video_id}"},
			{"GetVideosByCategory", "GET", "/api/video_learning/videos/category/{category_id}"},
			{"GetSimilarVideos", "GET", "/api/video_learning/video/{video_id}/similar"},
			{"DeleteComment", "DELETE", "/api/video_learning/comment/{comment_id}"},
			{"GetOrCreateCategory", "POST", "/api/video_learning/category"},
			{"GetCategoryByID", "GET", "/api/video_learning/category/{category_id}"},
			{"GetOrCreateTag", "POST", "/api/video_learning/tag"},
			{"GetTagByID", "GET", "/api/video_learning/tag/{tag_id}"},
		},
		SearchVideos:        NewSearchVideosHandler(e.SearchVideos, mux, decoder, encoder, errhandler, formatter),
		GetRecommendations:  NewGetRecommendationsHandler(e.GetRecommendations, mux, decoder, encoder, errhandler, formatter),
		GetVideo:            NewGetVideoHandler(e.GetVideo, mux, decoder, encoder, errhandler, formatter),
		GetComments:         NewGetCommentsHandler(e.GetComments, mux, decoder, encoder, errhandler, formatter),
		CreateComment:       NewCreateCommentHandler(e.CreateComment, mux, decoder, encoder, errhandler, formatter),
		GetOwnVideos:        NewGetOwnVideosHandler(e.GetOwnVideos, mux, decoder, encoder, errhandler, formatter),
		InitialUpload:       NewInitialUploadHandler(e.InitialUpload, mux, decoder, encoder, errhandler, formatter),
		CompleteUpload:      NewCompleteUploadHandler(e.CompleteUpload, mux, decoder, encoder, errhandler, formatter),
		UploadThumbnail:     NewUploadThumbnailHandler(e.UploadThumbnail, mux, decoder, encoder, errhandler, formatter),
		GetAllCategories:    NewGetAllCategoriesHandler(e.GetAllCategories, mux, decoder, encoder, errhandler, formatter),
		GetAllTags:          NewGetAllTagsHandler(e.GetAllTags, mux, decoder, encoder, errhandler, formatter),
		ToggleVideoLike:     NewToggleVideoLikeHandler(e.ToggleVideoLike, mux, decoder, encoder, errhandler, formatter),
		DeleteVideo:         NewDeleteVideoHandler(e.DeleteVideo, mux, decoder, encoder, errhandler, formatter),
		GetVideosByCategory: NewGetVideosByCategoryHandler(e.GetVideosByCategory, mux, decoder, encoder, errhandler, formatter),
		GetSimilarVideos:    NewGetSimilarVideosHandler(e.GetSimilarVideos, mux, decoder, encoder, errhandler, formatter),
		DeleteComment:       NewDeleteCommentHandler(e.DeleteComment, mux, decoder, encoder, errhandler, formatter),
		GetOrCreateCategory: NewGetOrCreateCategoryHandler(e.GetOrCreateCategory, mux, decoder, encoder, errhandler, formatter),
		GetCategoryByID:     NewGetCategoryByIDHandler(e.GetCategoryByID, mux, decoder, encoder, errhandler, formatter),
		GetOrCreateTag:      NewGetOrCreateTagHandler(e.GetOrCreateTag, mux, decoder, encoder, errhandler, formatter),
		GetTagByID:          NewGetTagByIDHandler(e.GetTagByID, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "video_learning" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SearchVideos = m(s.SearchVideos)
	s.GetRecommendations = m(s.GetRecommendations)
	s.GetVideo = m(s.GetVideo)
	s.GetComments = m(s.GetComments)
	s.CreateComment = m(s.CreateComment)
	s.GetOwnVideos = m(s.GetOwnVideos)
	s.InitialUpload = m(s.InitialUpload)
	s.CompleteUpload = m(s.CompleteUpload)
	s.UploadThumbnail = m(s.UploadThumbnail)
	s.GetAllCategories = m(s.GetAllCategories)
	s.GetAllTags = m(s.GetAllTags)
	s.ToggleVideoLike = m(s.ToggleVideoLike)
	s.DeleteVideo = m(s.DeleteVideo)
	s.GetVideosByCategory = m(s.GetVideosByCategory)
	s.GetSimilarVideos = m(s.GetSimilarVideos)
	s.DeleteComment = m(s.DeleteComment)
	s.GetOrCreateCategory = m(s.GetOrCreateCategory)
	s.GetCategoryByID = m(s.GetCategoryByID)
	s.GetOrCreateTag = m(s.GetOrCreateTag)
	s.GetTagByID = m(s.GetTagByID)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return videolearning.MethodNames[:] }

// Mount configures the mux to serve the video_learning endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSearchVideosHandler(mux, h.SearchVideos)
	MountGetRecommendationsHandler(mux, h.GetRecommendations)
	MountGetVideoHandler(mux, h.GetVideo)
	MountGetCommentsHandler(mux, h.GetComments)
	MountCreateCommentHandler(mux, h.CreateComment)
	MountGetOwnVideosHandler(mux, h.GetOwnVideos)
	MountInitialUploadHandler(mux, h.InitialUpload)
	MountCompleteUploadHandler(mux, h.CompleteUpload)
	MountUploadThumbnailHandler(mux, h.UploadThumbnail)
	MountGetAllCategoriesHandler(mux, h.GetAllCategories)
	MountGetAllTagsHandler(mux, h.GetAllTags)
	MountToggleVideoLikeHandler(mux, h.ToggleVideoLike)
	MountDeleteVideoHandler(mux, h.DeleteVideo)
	MountGetVideosByCategoryHandler(mux, h.GetVideosByCategory)
	MountGetSimilarVideosHandler(mux, h.GetSimilarVideos)
	MountDeleteCommentHandler(mux, h.DeleteComment)
	MountGetOrCreateCategoryHandler(mux, h.GetOrCreateCategory)
	MountGetCategoryByIDHandler(mux, h.GetCategoryByID)
	MountGetOrCreateTagHandler(mux, h.GetOrCreateTag)
	MountGetTagByIDHandler(mux, h.GetTagByID)
}

// Mount configures the mux to serve the video_learning endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountSearchVideosHandler configures the mux to serve the "video_learning"
// service "SearchVideos" endpoint.
func MountSearchVideosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/search", f)
}

// NewSearchVideosHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "SearchVideos" endpoint.
func NewSearchVideosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSearchVideosRequest(mux, decoder)
		encodeResponse = EncodeSearchVideosResponse(encoder)
		encodeError    = EncodeSearchVideosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SearchVideos")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetRecommendationsHandler configures the mux to serve the
// "video_learning" service "GetRecommendations" endpoint.
func MountGetRecommendationsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/recommendations", f)
}

// NewGetRecommendationsHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetRecommendations" endpoint.
func NewGetRecommendationsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetRecommendationsRequest(mux, decoder)
		encodeResponse = EncodeGetRecommendationsResponse(encoder)
		encodeError    = EncodeGetRecommendationsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetRecommendations")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetVideoHandler configures the mux to serve the "video_learning"
// service "GetVideo" endpoint.
func MountGetVideoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/video/{video_id}", f)
}

// NewGetVideoHandler creates a HTTP handler which loads the HTTP request and
// calls the "video_learning" service "GetVideo" endpoint.
func NewGetVideoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetVideoRequest(mux, decoder)
		encodeResponse = EncodeGetVideoResponse(encoder)
		encodeError    = EncodeGetVideoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetVideo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCommentsHandler configures the mux to serve the "video_learning"
// service "GetComments" endpoint.
func MountGetCommentsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/comments/{video_id}", f)
}

// NewGetCommentsHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "GetComments" endpoint.
func NewGetCommentsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCommentsRequest(mux, decoder)
		encodeResponse = EncodeGetCommentsResponse(encoder)
		encodeError    = EncodeGetCommentsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetComments")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCommentHandler configures the mux to serve the "video_learning"
// service "CreateComment" endpoint.
func MountCreateCommentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/comments/{video_id}/create", f)
}

// NewCreateCommentHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "CreateComment" endpoint.
func NewCreateCommentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCommentRequest(mux, decoder)
		encodeResponse = EncodeCreateCommentResponse(encoder)
		encodeError    = EncodeCreateCommentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateComment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOwnVideosHandler configures the mux to serve the "video_learning"
// service "GetOwnVideos" endpoint.
func MountGetOwnVideosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/my-videos", f)
}

// NewGetOwnVideosHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "GetOwnVideos" endpoint.
func NewGetOwnVideosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOwnVideosRequest(mux, decoder)
		encodeResponse = EncodeGetOwnVideosResponse(encoder)
		encodeError    = EncodeGetOwnVideosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetOwnVideos")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountInitialUploadHandler configures the mux to serve the "video_learning"
// service "InitialUpload" endpoint.
func MountInitialUploadHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/upload/video/{*filename}", f)
}

// NewInitialUploadHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "InitialUpload" endpoint.
func NewInitialUploadHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeInitialUploadRequest(mux, decoder)
		encodeResponse = EncodeInitialUploadResponse(encoder)
		encodeError    = EncodeInitialUploadError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "InitialUpload")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &videolearning.InitialUploadRequestData{Payload: payload.(*videolearning.InitialUploadPayload), Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCompleteUploadHandler configures the mux to serve the "video_learning"
// service "CompleteUpload" endpoint.
func MountCompleteUploadHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/upload/complete", f)
}

// NewCompleteUploadHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "CompleteUpload" endpoint.
func NewCompleteUploadHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCompleteUploadRequest(mux, decoder)
		encodeResponse = EncodeCompleteUploadResponse(encoder)
		encodeError    = EncodeCompleteUploadError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CompleteUpload")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUploadThumbnailHandler configures the mux to serve the "video_learning"
// service "UploadThumbnail" endpoint.
func MountUploadThumbnailHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/upload/thumbnail/{*filename}", f)
}

// NewUploadThumbnailHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "UploadThumbnail" endpoint.
func NewUploadThumbnailHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadThumbnailRequest(mux, decoder)
		encodeResponse = EncodeUploadThumbnailResponse(encoder)
		encodeError    = EncodeUploadThumbnailError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UploadThumbnail")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		data := &videolearning.UploadThumbnailRequestData{Payload: payload.(*videolearning.UploadThumbnailPayload), Body: r.Body}
		res, err := endpoint(ctx, data)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAllCategoriesHandler configures the mux to serve the
// "video_learning" service "GetAllCategories" endpoint.
func MountGetAllCategoriesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/categories", f)
}

// NewGetAllCategoriesHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetAllCategories" endpoint.
func NewGetAllCategoriesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllCategoriesRequest(mux, decoder)
		encodeResponse = EncodeGetAllCategoriesResponse(encoder)
		encodeError    = EncodeGetAllCategoriesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAllCategories")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAllTagsHandler configures the mux to serve the "video_learning"
// service "GetAllTags" endpoint.
func MountGetAllTagsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/tags", f)
}

// NewGetAllTagsHandler creates a HTTP handler which loads the HTTP request and
// calls the "video_learning" service "GetAllTags" endpoint.
func NewGetAllTagsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllTagsRequest(mux, decoder)
		encodeResponse = EncodeGetAllTagsResponse(encoder)
		encodeError    = EncodeGetAllTagsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAllTags")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountToggleVideoLikeHandler configures the mux to serve the "video_learning"
// service "ToggleVideoLike" endpoint.
func MountToggleVideoLikeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/video_learning/video/{video_id}/like", f)
}

// NewToggleVideoLikeHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "ToggleVideoLike" endpoint.
func NewToggleVideoLikeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeToggleVideoLikeRequest(mux, decoder)
		encodeResponse = EncodeToggleVideoLikeResponse(encoder)
		encodeError    = EncodeToggleVideoLikeError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "ToggleVideoLike")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteVideoHandler configures the mux to serve the "video_learning"
// service "DeleteVideo" endpoint.
func MountDeleteVideoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/video_learning/video/{video_id}", f)
}

// NewDeleteVideoHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "DeleteVideo" endpoint.
func NewDeleteVideoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteVideoRequest(mux, decoder)
		encodeResponse = EncodeDeleteVideoResponse(encoder)
		encodeError    = EncodeDeleteVideoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteVideo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetVideosByCategoryHandler configures the mux to serve the
// "video_learning" service "GetVideosByCategory" endpoint.
func MountGetVideosByCategoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/videos/category/{category_id}", f)
}

// NewGetVideosByCategoryHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetVideosByCategory"
// endpoint.
func NewGetVideosByCategoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetVideosByCategoryRequest(mux, decoder)
		encodeResponse = EncodeGetVideosByCategoryResponse(encoder)
		encodeError    = EncodeGetVideosByCategoryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetVideosByCategory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSimilarVideosHandler configures the mux to serve the
// "video_learning" service "GetSimilarVideos" endpoint.
func MountGetSimilarVideosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/video/{video_id}/similar", f)
}

// NewGetSimilarVideosHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetSimilarVideos" endpoint.
func NewGetSimilarVideosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSimilarVideosRequest(mux, decoder)
		encodeResponse = EncodeGetSimilarVideosResponse(encoder)
		encodeError    = EncodeGetSimilarVideosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetSimilarVideos")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCommentHandler configures the mux to serve the "video_learning"
// service "DeleteComment" endpoint.
func MountDeleteCommentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/api/video_learning/comment/{comment_id}", f)
}

// NewDeleteCommentHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "DeleteComment" endpoint.
func NewDeleteCommentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCommentRequest(mux, decoder)
		encodeResponse = EncodeDeleteCommentResponse(encoder)
		encodeError    = EncodeDeleteCommentError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "DeleteComment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOrCreateCategoryHandler configures the mux to serve the
// "video_learning" service "GetOrCreateCategory" endpoint.
func MountGetOrCreateCategoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/category", f)
}

// NewGetOrCreateCategoryHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetOrCreateCategory"
// endpoint.
func NewGetOrCreateCategoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOrCreateCategoryRequest(mux, decoder)
		encodeResponse = EncodeGetOrCreateCategoryResponse(encoder)
		encodeError    = EncodeGetOrCreateCategoryError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetOrCreateCategory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCategoryByIDHandler configures the mux to serve the "video_learning"
// service "GetCategoryById" endpoint.
func MountGetCategoryByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/category/{category_id}", f)
}

// NewGetCategoryByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "video_learning" service "GetCategoryById" endpoint.
func NewGetCategoryByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCategoryByIDRequest(mux, decoder)
		encodeResponse = EncodeGetCategoryByIDResponse(encoder)
		encodeError    = EncodeGetCategoryByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCategoryById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOrCreateTagHandler configures the mux to serve the "video_learning"
// service "GetOrCreateTag" endpoint.
func MountGetOrCreateTagHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/video_learning/tag", f)
}

// NewGetOrCreateTagHandler creates a HTTP handler which loads the HTTP request
// and calls the "video_learning" service "GetOrCreateTag" endpoint.
func NewGetOrCreateTagHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOrCreateTagRequest(mux, decoder)
		encodeResponse = EncodeGetOrCreateTagResponse(encoder)
		encodeError    = EncodeGetOrCreateTagError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetOrCreateTag")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTagByIDHandler configures the mux to serve the "video_learning"
// service "GetTagById" endpoint.
func MountGetTagByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/video_learning/tag/{tag_id}", f)
}

// NewGetTagByIDHandler creates a HTTP handler which loads the HTTP request and
// calls the "video_learning" service "GetTagById" endpoint.
func NewGetTagByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTagByIDRequest(mux, decoder)
		encodeResponse = EncodeGetTagByIDResponse(encoder)
		encodeError    = EncodeGetTagByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetTagById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "video_learning")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
