// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"
	"unicode/utf8"

	videolearning "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/video_learning"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSearchVideosResponse returns an encoder for responses returned by the
// video_learning SearchVideos endpoint.
func EncodeSearchVideosResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoList)
		enc := encoder(ctx, w)
		body := NewSearchVideosResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSearchVideosRequest returns a decoder for requests sent to the
// video_learning SearchVideos endpoint.
func DecodeSearchVideosRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			query        string
			categoryID   *int64
			page         int
			pageSize     int
			sessionToken string
			err          error
			c            *http.Cookie
		)
		qp := r.URL.Query()
		query = qp.Get("query")
		if query == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("query", "query string"))
		}
		if utf8.RuneCountInString(query) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("query", query, utf8.RuneCountInString(query), 1, true))
		}
		if utf8.RuneCountInString(query) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("query", query, utf8.RuneCountInString(query), 200, false))
		}
		{
			categoryIDRaw := qp.Get("category_id")
			if categoryIDRaw != "" {
				v, err2 := strconv.ParseInt(categoryIDRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("category_id", categoryIDRaw, "integer"))
				}
				categoryID = &v
			}
		}
		if categoryID != nil {
			if *categoryID < 1 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", *categoryID, 1, true))
			}
		}
		{
			pageRaw := qp.Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		if page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
		}
		{
			pageSizeRaw := qp.Get("page_size")
			if pageSizeRaw == "" {
				pageSize = 20
			} else {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page_size", pageSizeRaw, "integer"))
				}
				pageSize = int(v)
			}
		}
		if pageSize < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
		}
		if pageSize > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 100, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewSearchVideosPayload(query, categoryID, page, pageSize, sessionToken)

		return payload, nil
	}
}

// EncodeSearchVideosError returns an encoder for errors returned by the
// SearchVideos video_learning endpoint.
func EncodeSearchVideosError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "service_unavailable":
			var res videolearning.ServiceUnavailable
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetRecommendationsResponse returns an encoder for responses returned
// by the video_learning GetRecommendations endpoint.
func EncodeGetRecommendationsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoList)
		enc := encoder(ctx, w)
		body := NewGetRecommendationsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRecommendationsRequest returns a decoder for requests sent to the
// video_learning GetRecommendations endpoint.
func DecodeGetRecommendationsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			amount       int
			sessionToken string
			err          error
			c            *http.Cookie
		)
		{
			amountRaw := r.URL.Query().Get("amount")
			if amountRaw == "" {
				amount = 20
			} else {
				v, err2 := strconv.ParseInt(amountRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("amount", amountRaw, "integer"))
				}
				amount = int(v)
			}
		}
		if amount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
		}
		if amount > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 100, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetRecommendationsPayload(amount, sessionToken)

		return payload, nil
	}
}

// EncodeGetRecommendationsError returns an encoder for errors returned by the
// GetRecommendations video_learning endpoint.
func EncodeGetRecommendationsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "service_unavailable":
			var res videolearning.ServiceUnavailable
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusServiceUnavailable)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetVideoResponse returns an encoder for responses returned by the
// video_learning GetVideo endpoint.
func EncodeGetVideoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoDetails)
		enc := encoder(ctx, w)
		body := NewGetVideoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetVideoRequest returns a decoder for requests sent to the
// video_learning GetVideo endpoint.
func DecodeGetVideoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			videoID      int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetVideoPayload(videoID, sessionToken)

		return payload, nil
	}
}

// EncodeGetVideoError returns an encoder for errors returned by the GetVideo
// video_learning endpoint.
func EncodeGetVideoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetCommentsResponse returns an encoder for responses returned by the
// video_learning GetComments endpoint.
func EncodeGetCommentsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.CommentList)
		enc := encoder(ctx, w)
		body := NewGetCommentsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCommentsRequest returns a decoder for requests sent to the
// video_learning GetComments endpoint.
func DecodeGetCommentsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			videoID      int64
			page         int
			pageSize     int
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		qp := r.URL.Query()
		{
			pageRaw := qp.Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		if page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
		}
		{
			pageSizeRaw := qp.Get("page_size")
			if pageSizeRaw == "" {
				pageSize = 10
			} else {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page_size", pageSizeRaw, "integer"))
				}
				pageSize = int(v)
			}
		}
		if pageSize < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
		}
		if pageSize > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 50, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCommentsPayload(videoID, page, pageSize, sessionToken)

		return payload, nil
	}
}

// EncodeGetCommentsError returns an encoder for errors returned by the
// GetComments video_learning endpoint.
func EncodeGetCommentsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCommentResponse returns an encoder for responses returned by the
// video_learning CreateComment endpoint.
func EncodeCreateCommentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewCreateCommentResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCommentRequest returns a decoder for requests sent to the
// video_learning CreateComment endpoint.
func DecodeCreateCommentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateCommentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCommentRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			videoID      int64
			sessionToken string
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateCommentPayload(&body, videoID, sessionToken)

		return payload, nil
	}
}

// EncodeCreateCommentError returns an encoder for errors returned by the
// CreateComment video_learning endpoint.
func EncodeCreateCommentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOwnVideosResponse returns an encoder for responses returned by the
// video_learning GetOwnVideos endpoint.
func EncodeGetOwnVideosResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*videolearning.OwnVideo)
		enc := encoder(ctx, w)
		body := NewGetOwnVideosResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetOwnVideosRequest returns a decoder for requests sent to the
// video_learning GetOwnVideos endpoint.
func DecodeGetOwnVideosRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			page         int
			pageSize     int
			sessionToken string
			err          error
			c            *http.Cookie
		)
		qp := r.URL.Query()
		{
			pageRaw := qp.Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		if page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 1, true))
		}
		{
			pageSizeRaw := qp.Get("page_size")
			if pageSizeRaw == "" {
				pageSize = 20
			} else {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page_size", pageSizeRaw, "integer"))
				}
				pageSize = int(v)
			}
		}
		if pageSize < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 1, true))
		}
		if pageSize > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page_size", pageSize, 100, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOwnVideosPayload(page, pageSize, sessionToken)

		return payload, nil
	}
}

// EncodeGetOwnVideosError returns an encoder for errors returned by the
// GetOwnVideos video_learning endpoint.
func EncodeGetOwnVideosError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeInitialUploadResponse returns an encoder for responses returned by the
// video_learning InitialUpload endpoint.
func EncodeInitialUploadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.UploadResponse)
		enc := encoder(ctx, w)
		body := NewInitialUploadResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInitialUploadRequest returns a decoder for requests sent to the
// video_learning InitialUpload endpoint.
func DecodeInitialUploadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			filename     string
			contentType  string
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		filename = params["filename"]
		contentType = r.Header.Get("Content-Type")
		if contentType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "header"))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewInitialUploadPayload(filename, contentType, sessionToken)

		return payload, nil
	}
}

// EncodeInitialUploadError returns an encoder for errors returned by the
// InitialUpload video_learning endpoint.
func EncodeInitialUploadError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "upload_failed":
			var res videolearning.UploadFailed
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCompleteUploadResponse returns an encoder for responses returned by
// the video_learning CompleteUpload endpoint.
func EncodeCompleteUploadResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewCompleteUploadResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCompleteUploadRequest returns a decoder for requests sent to the
// video_learning CompleteUpload endpoint.
func DecodeCompleteUploadRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CompleteUploadRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCompleteUploadRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken string
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewCompleteUploadPayload(&body, sessionToken)

		return payload, nil
	}
}

// EncodeCompleteUploadError returns an encoder for errors returned by the
// CompleteUpload video_learning endpoint.
func EncodeCompleteUploadError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUploadThumbnailResponse returns an encoder for responses returned by
// the video_learning UploadThumbnail endpoint.
func EncodeUploadThumbnailResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.UploadResponse)
		enc := encoder(ctx, w)
		body := NewUploadThumbnailResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadThumbnailRequest returns a decoder for requests sent to the
// video_learning UploadThumbnail endpoint.
func DecodeUploadThumbnailRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			filename     string
			contentType  string
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		filename = params["filename"]
		contentType = r.Header.Get("Content-Type")
		if contentType == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("content_type", "header"))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewUploadThumbnailPayload(filename, contentType, sessionToken)

		return payload, nil
	}
}

// EncodeUploadThumbnailError returns an encoder for errors returned by the
// UploadThumbnail video_learning endpoint.
func EncodeUploadThumbnailError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "upload_failed":
			var res videolearning.UploadFailed
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAllCategoriesResponse returns an encoder for responses returned by
// the video_learning GetAllCategories endpoint.
func EncodeGetAllCategoriesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*videolearning.VideoCategory)
		enc := encoder(ctx, w)
		body := NewGetAllCategoriesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAllCategoriesRequest returns a decoder for requests sent to the
// video_learning GetAllCategories endpoint.
func DecodeGetAllCategoriesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken string
			err          error
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAllCategoriesPayload(sessionToken)

		return payload, nil
	}
}

// EncodeGetAllCategoriesError returns an encoder for errors returned by the
// GetAllCategories video_learning endpoint.
func EncodeGetAllCategoriesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAllTagsResponse returns an encoder for responses returned by the
// video_learning GetAllTags endpoint.
func EncodeGetAllTagsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*videolearning.VideoTag)
		enc := encoder(ctx, w)
		body := NewGetAllTagsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAllTagsRequest returns a decoder for requests sent to the
// video_learning GetAllTags endpoint.
func DecodeGetAllTagsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			sessionToken string
			err          error
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAllTagsPayload(sessionToken)

		return payload, nil
	}
}

// EncodeGetAllTagsError returns an encoder for errors returned by the
// GetAllTags video_learning endpoint.
func EncodeGetAllTagsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeToggleVideoLikeResponse returns an encoder for responses returned by
// the video_learning ToggleVideoLike endpoint.
func EncodeToggleVideoLikeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewToggleVideoLikeResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeToggleVideoLikeRequest returns a decoder for requests sent to the
// video_learning ToggleVideoLike endpoint.
func DecodeToggleVideoLikeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			videoID      int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewToggleVideoLikePayload(videoID, sessionToken)

		return payload, nil
	}
}

// EncodeToggleVideoLikeError returns an encoder for errors returned by the
// ToggleVideoLike video_learning endpoint.
func EncodeToggleVideoLikeError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteVideoResponse returns an encoder for responses returned by the
// video_learning DeleteVideo endpoint.
func EncodeDeleteVideoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewDeleteVideoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteVideoRequest returns a decoder for requests sent to the
// video_learning DeleteVideo endpoint.
func DecodeDeleteVideoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			videoID      int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteVideoPayload(videoID, sessionToken)

		return payload, nil
	}
}

// EncodeDeleteVideoError returns an encoder for errors returned by the
// DeleteVideo video_learning endpoint.
func EncodeDeleteVideoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetVideosByCategoryResponse returns an encoder for responses returned
// by the video_learning GetVideosByCategory endpoint.
func EncodeGetVideosByCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoList)
		enc := encoder(ctx, w)
		body := NewGetVideosByCategoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetVideosByCategoryRequest returns a decoder for requests sent to the
// video_learning GetVideosByCategory endpoint.
func DecodeGetVideosByCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			categoryID   int64
			amount       int
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			categoryIDRaw := params["category_id"]
			v, err2 := strconv.ParseInt(categoryIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("category_id", categoryIDRaw, "integer"))
			}
			categoryID = v
		}
		if categoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", categoryID, 1, true))
		}
		{
			amountRaw := r.URL.Query().Get("amount")
			if amountRaw == "" {
				amount = 20
			} else {
				v, err2 := strconv.ParseInt(amountRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("amount", amountRaw, "integer"))
				}
				amount = int(v)
			}
		}
		if amount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
		}
		if amount > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 100, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetVideosByCategoryPayload(categoryID, amount, sessionToken)

		return payload, nil
	}
}

// EncodeGetVideosByCategoryError returns an encoder for errors returned by the
// GetVideosByCategory video_learning endpoint.
func EncodeGetVideosByCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetSimilarVideosResponse returns an encoder for responses returned by
// the video_learning GetSimilarVideos endpoint.
func EncodeGetSimilarVideosResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoList)
		enc := encoder(ctx, w)
		body := NewGetSimilarVideosResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSimilarVideosRequest returns a decoder for requests sent to the
// video_learning GetSimilarVideos endpoint.
func DecodeGetSimilarVideosRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			videoID      int64
			amount       int
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			videoIDRaw := params["video_id"]
			v, err2 := strconv.ParseInt(videoIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("video_id", videoIDRaw, "integer"))
			}
			videoID = v
		}
		if videoID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("video_id", videoID, 1, true))
		}
		{
			amountRaw := r.URL.Query().Get("amount")
			if amountRaw == "" {
				amount = 10
			} else {
				v, err2 := strconv.ParseInt(amountRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("amount", amountRaw, "integer"))
				}
				amount = int(v)
			}
		}
		if amount < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 1, true))
		}
		if amount > 50 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("amount", amount, 50, false))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetSimilarVideosPayload(videoID, amount, sessionToken)

		return payload, nil
	}
}

// EncodeGetSimilarVideosError returns an encoder for errors returned by the
// GetSimilarVideos video_learning endpoint.
func EncodeGetSimilarVideosError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "video_not_found":
			var res videolearning.VideoNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteCommentResponse returns an encoder for responses returned by the
// video_learning DeleteComment endpoint.
func EncodeDeleteCommentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.SimpleResponse)
		enc := encoder(ctx, w)
		body := NewDeleteCommentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteCommentRequest returns a decoder for requests sent to the
// video_learning DeleteComment endpoint.
func DecodeDeleteCommentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			commentID    int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			commentIDRaw := params["comment_id"]
			v, err2 := strconv.ParseInt(commentIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("comment_id", commentIDRaw, "integer"))
			}
			commentID = v
		}
		if commentID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("comment_id", commentID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteCommentPayload(commentID, sessionToken)

		return payload, nil
	}
}

// EncodeDeleteCommentError returns an encoder for errors returned by the
// DeleteComment video_learning endpoint.
func EncodeDeleteCommentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "permission_denied":
			var res videolearning.PermissionDenied
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOrCreateCategoryResponse returns an encoder for responses returned
// by the video_learning GetOrCreateCategory endpoint.
func EncodeGetOrCreateCategoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoCategory)
		enc := encoder(ctx, w)
		body := NewGetOrCreateCategoryResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeGetOrCreateCategoryRequest returns a decoder for requests sent to the
// video_learning GetOrCreateCategory endpoint.
func DecodeGetOrCreateCategoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body GetOrCreateCategoryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetOrCreateCategoryRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken string
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOrCreateCategoryPayload(&body, sessionToken)

		return payload, nil
	}
}

// EncodeGetOrCreateCategoryError returns an encoder for errors returned by the
// GetOrCreateCategory video_learning endpoint.
func EncodeGetOrCreateCategoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetCategoryByIDResponse returns an encoder for responses returned by
// the video_learning GetCategoryById endpoint.
func EncodeGetCategoryByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoCategory)
		enc := encoder(ctx, w)
		body := NewGetCategoryByIDResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCategoryByIDRequest returns a decoder for requests sent to the
// video_learning GetCategoryById endpoint.
func DecodeGetCategoryByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			categoryID   int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			categoryIDRaw := params["category_id"]
			v, err2 := strconv.ParseInt(categoryIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("category_id", categoryIDRaw, "integer"))
			}
			categoryID = v
		}
		if categoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("category_id", categoryID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCategoryByIDPayload(categoryID, sessionToken)

		return payload, nil
	}
}

// EncodeGetCategoryByIDError returns an encoder for errors returned by the
// GetCategoryById video_learning endpoint.
func EncodeGetCategoryByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "category_not_found":
			var res videolearning.CategoryNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetOrCreateTagResponse returns an encoder for responses returned by
// the video_learning GetOrCreateTag endpoint.
func EncodeGetOrCreateTagResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoTag)
		enc := encoder(ctx, w)
		body := NewGetOrCreateTagResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeGetOrCreateTagRequest returns a decoder for requests sent to the
// video_learning GetOrCreateTag endpoint.
func DecodeGetOrCreateTagRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body GetOrCreateTagRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetOrCreateTagRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			sessionToken string
			c            *http.Cookie
		)
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetOrCreateTagPayload(&body, sessionToken)

		return payload, nil
	}
}

// EncodeGetOrCreateTagError returns an encoder for errors returned by the
// GetOrCreateTag video_learning endpoint.
func EncodeGetOrCreateTagError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetTagByIDResponse returns an encoder for responses returned by the
// video_learning GetTagById endpoint.
func EncodeGetTagByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*videolearning.VideoTag)
		enc := encoder(ctx, w)
		body := NewGetTagByIDResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTagByIDRequest returns a decoder for requests sent to the
// video_learning GetTagById endpoint.
func DecodeGetTagByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			tagID        int64
			sessionToken string
			err          error
			c            *http.Cookie

			params = mux.Vars(r)
		)
		{
			tagIDRaw := params["tag_id"]
			v, err2 := strconv.ParseInt(tagIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("tag_id", tagIDRaw, "integer"))
			}
			tagID = v
		}
		if tagID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("tag_id", tagID, 1, true))
		}
		c, err = r.Cookie("session")
		if err == http.ErrNoCookie {
			err = goa.MergeErrors(err, goa.MissingFieldError("session_token", "cookie"))
		} else {
			sessionToken = c.Value
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetTagByIDPayload(tagID, sessionToken)

		return payload, nil
	}
}

// EncodeGetTagByIDError returns an encoder for errors returned by the
// GetTagById video_learning endpoint.
func EncodeGetTagByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_input":
			var res videolearning.InvalidInput
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "invalid_session":
			var res videolearning.InvalidSession
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "unauthorized":
			var res videolearning.Unauthorized
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "tag_not_found":
			var res videolearning.TagNotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalVideolearningVideoToVideoResponseBody builds a value of type
// *VideoResponseBody from a value of type *videolearning.Video.
func marshalVideolearningVideoToVideoResponseBody(v *videolearning.Video) *VideoResponseBody {
	res := &VideoResponseBody{
		ID:           v.ID,
		Title:        v.Title,
		Author:       v.Author,
		Views:        v.Views,
		Likes:        v.Likes,
		ThumbnailURL: v.ThumbnailURL,
	}

	return res
}

// marshalVideolearningCommentToCommentResponseBody builds a value of type
// *CommentResponseBody from a value of type *videolearning.Comment.
func marshalVideolearningCommentToCommentResponseBody(v *videolearning.Comment) *CommentResponseBody {
	res := &CommentResponseBody{
		ID:      v.ID,
		Author:  v.Author,
		Date:    v.Date,
		Title:   v.Title,
		Body:    v.Body,
		VideoID: v.VideoID,
	}

	return res
}

// marshalVideolearningOwnVideoToOwnVideoResponse builds a value of type
// *OwnVideoResponse from a value of type *videolearning.OwnVideo.
func marshalVideolearningOwnVideoToOwnVideoResponse(v *videolearning.OwnVideo) *OwnVideoResponse {
	res := &OwnVideoResponse{
		ID:           v.ID,
		Title:        v.Title,
		Views:        v.Views,
		Likes:        v.Likes,
		ThumbnailURL: v.ThumbnailURL,
		UploadDate:   v.UploadDate,
	}

	return res
}

// marshalVideolearningVideoCategoryToVideoCategoryResponse builds a value of
// type *VideoCategoryResponse from a value of type
// *videolearning.VideoCategory.
func marshalVideolearningVideoCategoryToVideoCategoryResponse(v *videolearning.VideoCategory) *VideoCategoryResponse {
	res := &VideoCategoryResponse{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// marshalVideolearningVideoTagToVideoTagResponse builds a value of type
// *VideoTagResponse from a value of type *videolearning.VideoTag.
func marshalVideolearningVideoTagToVideoTagResponse(v *videolearning.VideoTag) *VideoTagResponse {
	res := &VideoTagResponse{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}
