// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package server

import (
	"unicode/utf8"

	videolearning "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/video_learning"
	goa "goa.design/goa/v3/pkg"
)

// CreateCommentRequestBody is the type of the "video_learning" service
// "CreateComment" endpoint HTTP request body.
type CreateCommentRequestBody struct {
	// Comment title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Comment content
	Body *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
}

// CompleteUploadRequestBody is the type of the "video_learning" service
// "CompleteUpload" endpoint HTTP request body.
type CompleteUploadRequestBody struct {
	// Video title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Video description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Video category ID
	CategoryID *int64 `form:"category_id,omitempty" json:"category_id,omitempty" xml:"category_id,omitempty"`
	// Video tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
	// Thumbnail object name in Minio
	ThumbnailObjectName *string `form:"thumbnail_object_name,omitempty" json:"thumbnail_object_name,omitempty" xml:"thumbnail_object_name,omitempty"`
	// Video object name in Minio
	VideoObjectName *string `form:"video_object_name,omitempty" json:"video_object_name,omitempty" xml:"video_object_name,omitempty"`
}

// GetOrCreateCategoryRequestBody is the type of the "video_learning" service
// "GetOrCreateCategory" endpoint HTTP request body.
type GetOrCreateCategoryRequestBody struct {
	// Category name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetOrCreateTagRequestBody is the type of the "video_learning" service
// "GetOrCreateTag" endpoint HTTP request body.
type GetOrCreateTagRequestBody struct {
	// Tag name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// SearchVideosResponseBody is the type of the "video_learning" service
// "SearchVideos" endpoint HTTP response body.
type SearchVideosResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos" json:"videos" xml:"videos"`
}

// GetRecommendationsResponseBody is the type of the "video_learning" service
// "GetRecommendations" endpoint HTTP response body.
type GetRecommendationsResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos" json:"videos" xml:"videos"`
}

// GetVideoResponseBody is the type of the "video_learning" service "GetVideo"
// endpoint HTTP response body.
type GetVideoResponseBody struct {
	// Video unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Video title
	Title string `form:"title" json:"title" xml:"title"`
	// Video description
	Description string `form:"description" json:"description" xml:"description"`
	// Video author/creator
	Author string `form:"author" json:"author" xml:"author"`
	// Number of views
	Views int `form:"views" json:"views" xml:"views"`
	// Number of likes
	Likes int `form:"likes" json:"likes" xml:"likes"`
	// Minio presigned URL for video
	VideoURL string `form:"video_url" json:"video_url" xml:"video_url"`
	// Minio presigned URL for thumbnail
	ThumbnailURL string `form:"thumbnail_url" json:"thumbnail_url" xml:"thumbnail_url"`
	// Upload timestamp in milliseconds
	UploadDate int64 `form:"upload_date" json:"upload_date" xml:"upload_date"`
	// Video category
	CategoryID int64 `form:"category_id" json:"category_id" xml:"category_id"`
	// Video tags
	TagIds []int64 `form:"tag_ids" json:"tag_ids" xml:"tag_ids"`
}

// GetCommentsResponseBody is the type of the "video_learning" service
// "GetComments" endpoint HTTP response body.
type GetCommentsResponseBody struct {
	// List of comments
	Comments []*CommentResponseBody `form:"comments" json:"comments" xml:"comments"`
}

// CreateCommentResponseBody is the type of the "video_learning" service
// "CreateComment" endpoint HTTP response body.
type CreateCommentResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOwnVideosResponseBody is the type of the "video_learning" service
// "GetOwnVideos" endpoint HTTP response body.
type GetOwnVideosResponseBody []*OwnVideoResponse

// InitialUploadResponseBody is the type of the "video_learning" service
// "InitialUpload" endpoint HTTP response body.
type InitialUploadResponseBody struct {
	// Minio object name
	ObjectName string `form:"object_name" json:"object_name" xml:"object_name"`
	// Presigned URL for accessing the file
	PresignedURL *string `form:"presigned_url,omitempty" json:"presigned_url,omitempty" xml:"presigned_url,omitempty"`
}

// CompleteUploadResponseBody is the type of the "video_learning" service
// "CompleteUpload" endpoint HTTP response body.
type CompleteUploadResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UploadThumbnailResponseBody is the type of the "video_learning" service
// "UploadThumbnail" endpoint HTTP response body.
type UploadThumbnailResponseBody struct {
	// Minio object name
	ObjectName string `form:"object_name" json:"object_name" xml:"object_name"`
	// Presigned URL for accessing the file
	PresignedURL *string `form:"presigned_url,omitempty" json:"presigned_url,omitempty" xml:"presigned_url,omitempty"`
}

// GetAllCategoriesResponseBody is the type of the "video_learning" service
// "GetAllCategories" endpoint HTTP response body.
type GetAllCategoriesResponseBody []*VideoCategoryResponse

// GetAllTagsResponseBody is the type of the "video_learning" service
// "GetAllTags" endpoint HTTP response body.
type GetAllTagsResponseBody []*VideoTagResponse

// ToggleVideoLikeResponseBody is the type of the "video_learning" service
// "ToggleVideoLike" endpoint HTTP response body.
type ToggleVideoLikeResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// DeleteVideoResponseBody is the type of the "video_learning" service
// "DeleteVideo" endpoint HTTP response body.
type DeleteVideoResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetVideosByCategoryResponseBody is the type of the "video_learning" service
// "GetVideosByCategory" endpoint HTTP response body.
type GetVideosByCategoryResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos" json:"videos" xml:"videos"`
}

// GetSimilarVideosResponseBody is the type of the "video_learning" service
// "GetSimilarVideos" endpoint HTTP response body.
type GetSimilarVideosResponseBody struct {
	// List of videos
	Videos []*VideoResponseBody `form:"videos" json:"videos" xml:"videos"`
}

// DeleteCommentResponseBody is the type of the "video_learning" service
// "DeleteComment" endpoint HTTP response body.
type DeleteCommentResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
	// Created resource ID (when applicable)
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// GetOrCreateCategoryResponseBody is the type of the "video_learning" service
// "GetOrCreateCategory" endpoint HTTP response body.
type GetOrCreateCategoryResponseBody struct {
	// Category unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Category name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetCategoryByIDResponseBody is the type of the "video_learning" service
// "GetCategoryById" endpoint HTTP response body.
type GetCategoryByIDResponseBody struct {
	// Category unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Category name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetOrCreateTagResponseBody is the type of the "video_learning" service
// "GetOrCreateTag" endpoint HTTP response body.
type GetOrCreateTagResponseBody struct {
	// Tag unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Tag name
	Name string `form:"name" json:"name" xml:"name"`
}

// GetTagByIDResponseBody is the type of the "video_learning" service
// "GetTagById" endpoint HTTP response body.
type GetTagByIDResponseBody struct {
	// Tag unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Tag name
	Name string `form:"name" json:"name" xml:"name"`
}

// VideoResponseBody is used to define fields on response body types.
type VideoResponseBody struct {
	// Video unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Video title
	Title string `form:"title" json:"title" xml:"title"`
	// Video author/creator
	Author string `form:"author" json:"author" xml:"author"`
	// Number of views
	Views int `form:"views" json:"views" xml:"views"`
	// Number of likes
	Likes int `form:"likes" json:"likes" xml:"likes"`
	// Minio presigned URL for thumbnail
	ThumbnailURL string `form:"thumbnail_url" json:"thumbnail_url" xml:"thumbnail_url"`
}

// CommentResponseBody is used to define fields on response body types.
type CommentResponseBody struct {
	// Comment unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Comment author
	Author string `form:"author" json:"author" xml:"author"`
	// Comment publish date in milliseconds
	Date int64 `form:"date" json:"date" xml:"date"`
	// Comment title
	Title string `form:"title" json:"title" xml:"title"`
	// Comment content
	Body string `form:"body" json:"body" xml:"body"`
	// ID of the video this comment belongs to
	VideoID int64 `form:"video_id" json:"video_id" xml:"video_id"`
}

// OwnVideoResponse is used to define fields on response body types.
type OwnVideoResponse struct {
	// Video unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Video title
	Title string `form:"title" json:"title" xml:"title"`
	// Number of views
	Views int `form:"views" json:"views" xml:"views"`
	// Number of likes
	Likes int `form:"likes" json:"likes" xml:"likes"`
	// Minio presigned URL for thumbnail
	ThumbnailURL string `form:"thumbnail_url" json:"thumbnail_url" xml:"thumbnail_url"`
	// Upload timestamp in milliseconds
	UploadDate int64 `form:"upload_date" json:"upload_date" xml:"upload_date"`
}

// VideoCategoryResponse is used to define fields on response body types.
type VideoCategoryResponse struct {
	// Category unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Category name
	Name string `form:"name" json:"name" xml:"name"`
}

// VideoTagResponse is used to define fields on response body types.
type VideoTagResponse struct {
	// Tag unique identifier
	ID int64 `form:"id" json:"id" xml:"id"`
	// Tag name
	Name string `form:"name" json:"name" xml:"name"`
}

// NewSearchVideosResponseBody builds the HTTP response body from the result of
// the "SearchVideos" endpoint of the "video_learning" service.
func NewSearchVideosResponseBody(res *videolearning.VideoList) *SearchVideosResponseBody {
	body := &SearchVideosResponseBody{}
	if res.Videos != nil {
		body.Videos = make([]*VideoResponseBody, len(res.Videos))
		for i, val := range res.Videos {
			body.Videos[i] = marshalVideolearningVideoToVideoResponseBody(val)
		}
	} else {
		body.Videos = []*VideoResponseBody{}
	}
	return body
}

// NewGetRecommendationsResponseBody builds the HTTP response body from the
// result of the "GetRecommendations" endpoint of the "video_learning" service.
func NewGetRecommendationsResponseBody(res *videolearning.VideoList) *GetRecommendationsResponseBody {
	body := &GetRecommendationsResponseBody{}
	if res.Videos != nil {
		body.Videos = make([]*VideoResponseBody, len(res.Videos))
		for i, val := range res.Videos {
			body.Videos[i] = marshalVideolearningVideoToVideoResponseBody(val)
		}
	} else {
		body.Videos = []*VideoResponseBody{}
	}
	return body
}

// NewGetVideoResponseBody builds the HTTP response body from the result of the
// "GetVideo" endpoint of the "video_learning" service.
func NewGetVideoResponseBody(res *videolearning.VideoDetails) *GetVideoResponseBody {
	body := &GetVideoResponseBody{
		ID:           res.ID,
		Title:        res.Title,
		Description:  res.Description,
		Author:       res.Author,
		Views:        res.Views,
		Likes:        res.Likes,
		VideoURL:     res.VideoURL,
		ThumbnailURL: res.ThumbnailURL,
		UploadDate:   res.UploadDate,
		CategoryID:   res.CategoryID,
	}
	if res.TagIds != nil {
		body.TagIds = make([]int64, len(res.TagIds))
		for i, val := range res.TagIds {
			body.TagIds[i] = val
		}
	} else {
		body.TagIds = []int64{}
	}
	return body
}

// NewGetCommentsResponseBody builds the HTTP response body from the result of
// the "GetComments" endpoint of the "video_learning" service.
func NewGetCommentsResponseBody(res *videolearning.CommentList) *GetCommentsResponseBody {
	body := &GetCommentsResponseBody{}
	if res.Comments != nil {
		body.Comments = make([]*CommentResponseBody, len(res.Comments))
		for i, val := range res.Comments {
			body.Comments[i] = marshalVideolearningCommentToCommentResponseBody(val)
		}
	} else {
		body.Comments = []*CommentResponseBody{}
	}
	return body
}

// NewCreateCommentResponseBody builds the HTTP response body from the result
// of the "CreateComment" endpoint of the "video_learning" service.
func NewCreateCommentResponseBody(res *videolearning.SimpleResponse) *CreateCommentResponseBody {
	body := &CreateCommentResponseBody{
		Success: res.Success,
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewGetOwnVideosResponseBody builds the HTTP response body from the result of
// the "GetOwnVideos" endpoint of the "video_learning" service.
func NewGetOwnVideosResponseBody(res []*videolearning.OwnVideo) GetOwnVideosResponseBody {
	body := make([]*OwnVideoResponse, len(res))
	for i, val := range res {
		body[i] = marshalVideolearningOwnVideoToOwnVideoResponse(val)
	}
	return body
}

// NewInitialUploadResponseBody builds the HTTP response body from the result
// of the "InitialUpload" endpoint of the "video_learning" service.
func NewInitialUploadResponseBody(res *videolearning.UploadResponse) *InitialUploadResponseBody {
	body := &InitialUploadResponseBody{
		ObjectName:   res.ObjectName,
		PresignedURL: res.PresignedURL,
	}
	return body
}

// NewCompleteUploadResponseBody builds the HTTP response body from the result
// of the "CompleteUpload" endpoint of the "video_learning" service.
func NewCompleteUploadResponseBody(res *videolearning.SimpleResponse) *CompleteUploadResponseBody {
	body := &CompleteUploadResponseBody{
		Success: res.Success,
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewUploadThumbnailResponseBody builds the HTTP response body from the result
// of the "UploadThumbnail" endpoint of the "video_learning" service.
func NewUploadThumbnailResponseBody(res *videolearning.UploadResponse) *UploadThumbnailResponseBody {
	body := &UploadThumbnailResponseBody{
		ObjectName:   res.ObjectName,
		PresignedURL: res.PresignedURL,
	}
	return body
}

// NewGetAllCategoriesResponseBody builds the HTTP response body from the
// result of the "GetAllCategories" endpoint of the "video_learning" service.
func NewGetAllCategoriesResponseBody(res []*videolearning.VideoCategory) GetAllCategoriesResponseBody {
	body := make([]*VideoCategoryResponse, len(res))
	for i, val := range res {
		body[i] = marshalVideolearningVideoCategoryToVideoCategoryResponse(val)
	}
	return body
}

// NewGetAllTagsResponseBody builds the HTTP response body from the result of
// the "GetAllTags" endpoint of the "video_learning" service.
func NewGetAllTagsResponseBody(res []*videolearning.VideoTag) GetAllTagsResponseBody {
	body := make([]*VideoTagResponse, len(res))
	for i, val := range res {
		body[i] = marshalVideolearningVideoTagToVideoTagResponse(val)
	}
	return body
}

// NewToggleVideoLikeResponseBody builds the HTTP response body from the result
// of the "ToggleVideoLike" endpoint of the "video_learning" service.
func NewToggleVideoLikeResponseBody(res *videolearning.SimpleResponse) *ToggleVideoLikeResponseBody {
	body := &ToggleVideoLikeResponseBody{
		Success: res.Success,
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewDeleteVideoResponseBody builds the HTTP response body from the result of
// the "DeleteVideo" endpoint of the "video_learning" service.
func NewDeleteVideoResponseBody(res *videolearning.SimpleResponse) *DeleteVideoResponseBody {
	body := &DeleteVideoResponseBody{
		Success: res.Success,
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewGetVideosByCategoryResponseBody builds the HTTP response body from the
// result of the "GetVideosByCategory" endpoint of the "video_learning" service.
func NewGetVideosByCategoryResponseBody(res *videolearning.VideoList) *GetVideosByCategoryResponseBody {
	body := &GetVideosByCategoryResponseBody{}
	if res.Videos != nil {
		body.Videos = make([]*VideoResponseBody, len(res.Videos))
		for i, val := range res.Videos {
			body.Videos[i] = marshalVideolearningVideoToVideoResponseBody(val)
		}
	} else {
		body.Videos = []*VideoResponseBody{}
	}
	return body
}

// NewGetSimilarVideosResponseBody builds the HTTP response body from the
// result of the "GetSimilarVideos" endpoint of the "video_learning" service.
func NewGetSimilarVideosResponseBody(res *videolearning.VideoList) *GetSimilarVideosResponseBody {
	body := &GetSimilarVideosResponseBody{}
	if res.Videos != nil {
		body.Videos = make([]*VideoResponseBody, len(res.Videos))
		for i, val := range res.Videos {
			body.Videos[i] = marshalVideolearningVideoToVideoResponseBody(val)
		}
	} else {
		body.Videos = []*VideoResponseBody{}
	}
	return body
}

// NewDeleteCommentResponseBody builds the HTTP response body from the result
// of the "DeleteComment" endpoint of the "video_learning" service.
func NewDeleteCommentResponseBody(res *videolearning.SimpleResponse) *DeleteCommentResponseBody {
	body := &DeleteCommentResponseBody{
		Success: res.Success,
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewGetOrCreateCategoryResponseBody builds the HTTP response body from the
// result of the "GetOrCreateCategory" endpoint of the "video_learning" service.
func NewGetOrCreateCategoryResponseBody(res *videolearning.VideoCategory) *GetOrCreateCategoryResponseBody {
	body := &GetOrCreateCategoryResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewGetCategoryByIDResponseBody builds the HTTP response body from the result
// of the "GetCategoryById" endpoint of the "video_learning" service.
func NewGetCategoryByIDResponseBody(res *videolearning.VideoCategory) *GetCategoryByIDResponseBody {
	body := &GetCategoryByIDResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewGetOrCreateTagResponseBody builds the HTTP response body from the result
// of the "GetOrCreateTag" endpoint of the "video_learning" service.
func NewGetOrCreateTagResponseBody(res *videolearning.VideoTag) *GetOrCreateTagResponseBody {
	body := &GetOrCreateTagResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewGetTagByIDResponseBody builds the HTTP response body from the result of
// the "GetTagById" endpoint of the "video_learning" service.
func NewGetTagByIDResponseBody(res *videolearning.VideoTag) *GetTagByIDResponseBody {
	body := &GetTagByIDResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	return body
}

// NewSearchVideosPayload builds a video_learning service SearchVideos endpoint
// payload.
func NewSearchVideosPayload(query string, categoryID *int64, page int, pageSize int, sessionToken string) *videolearning.SearchVideosPayload {
	v := &videolearning.SearchVideosPayload{}
	v.Query = query
	v.CategoryID = categoryID
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v
}

// NewGetRecommendationsPayload builds a video_learning service
// GetRecommendations endpoint payload.
func NewGetRecommendationsPayload(amount int, sessionToken string) *videolearning.GetRecommendationsPayload {
	v := &videolearning.GetRecommendationsPayload{}
	v.Amount = amount
	v.SessionToken = sessionToken

	return v
}

// NewGetVideoPayload builds a video_learning service GetVideo endpoint payload.
func NewGetVideoPayload(videoID int64, sessionToken string) *videolearning.GetVideoPayload {
	v := &videolearning.GetVideoPayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v
}

// NewGetCommentsPayload builds a video_learning service GetComments endpoint
// payload.
func NewGetCommentsPayload(videoID int64, page int, pageSize int, sessionToken string) *videolearning.GetCommentsPayload {
	v := &videolearning.GetCommentsPayload{}
	v.VideoID = videoID
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v
}

// NewCreateCommentPayload builds a video_learning service CreateComment
// endpoint payload.
func NewCreateCommentPayload(body *CreateCommentRequestBody, videoID int64, sessionToken string) *videolearning.CreateCommentPayload {
	v := &videolearning.CreateCommentPayload{
		Title: *body.Title,
		Body:  *body.Body,
	}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v
}

// NewGetOwnVideosPayload builds a video_learning service GetOwnVideos endpoint
// payload.
func NewGetOwnVideosPayload(page int, pageSize int, sessionToken string) *videolearning.GetOwnVideosPayload {
	v := &videolearning.GetOwnVideosPayload{}
	v.Page = page
	v.PageSize = pageSize
	v.SessionToken = sessionToken

	return v
}

// NewInitialUploadPayload builds a video_learning service InitialUpload
// endpoint payload.
func NewInitialUploadPayload(filename string, contentType string, sessionToken string) *videolearning.InitialUploadPayload {
	v := &videolearning.InitialUploadPayload{}
	v.Filename = filename
	v.ContentType = contentType
	v.SessionToken = sessionToken

	return v
}

// NewCompleteUploadPayload builds a video_learning service CompleteUpload
// endpoint payload.
func NewCompleteUploadPayload(body *CompleteUploadRequestBody, sessionToken string) *videolearning.CompleteUploadPayload {
	v := &videolearning.CompleteUploadPayload{
		Title:               *body.Title,
		Description:         body.Description,
		CategoryID:          *body.CategoryID,
		ThumbnailObjectName: *body.ThumbnailObjectName,
		VideoObjectName:     *body.VideoObjectName,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	v.SessionToken = sessionToken

	return v
}

// NewUploadThumbnailPayload builds a video_learning service UploadThumbnail
// endpoint payload.
func NewUploadThumbnailPayload(filename string, contentType string, sessionToken string) *videolearning.UploadThumbnailPayload {
	v := &videolearning.UploadThumbnailPayload{}
	v.Filename = filename
	v.ContentType = contentType
	v.SessionToken = sessionToken

	return v
}

// NewGetAllCategoriesPayload builds a video_learning service GetAllCategories
// endpoint payload.
func NewGetAllCategoriesPayload(sessionToken string) *videolearning.GetAllCategoriesPayload {
	v := &videolearning.GetAllCategoriesPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetAllTagsPayload builds a video_learning service GetAllTags endpoint
// payload.
func NewGetAllTagsPayload(sessionToken string) *videolearning.GetAllTagsPayload {
	v := &videolearning.GetAllTagsPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewToggleVideoLikePayload builds a video_learning service ToggleVideoLike
// endpoint payload.
func NewToggleVideoLikePayload(videoID int64, sessionToken string) *videolearning.ToggleVideoLikePayload {
	v := &videolearning.ToggleVideoLikePayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v
}

// NewDeleteVideoPayload builds a video_learning service DeleteVideo endpoint
// payload.
func NewDeleteVideoPayload(videoID int64, sessionToken string) *videolearning.DeleteVideoPayload {
	v := &videolearning.DeleteVideoPayload{}
	v.VideoID = videoID
	v.SessionToken = sessionToken

	return v
}

// NewGetVideosByCategoryPayload builds a video_learning service
// GetVideosByCategory endpoint payload.
func NewGetVideosByCategoryPayload(categoryID int64, amount int, sessionToken string) *videolearning.GetVideosByCategoryPayload {
	v := &videolearning.GetVideosByCategoryPayload{}
	v.CategoryID = categoryID
	v.Amount = amount
	v.SessionToken = sessionToken

	return v
}

// NewGetSimilarVideosPayload builds a video_learning service GetSimilarVideos
// endpoint payload.
func NewGetSimilarVideosPayload(videoID int64, amount int, sessionToken string) *videolearning.GetSimilarVideosPayload {
	v := &videolearning.GetSimilarVideosPayload{}
	v.VideoID = videoID
	v.Amount = amount
	v.SessionToken = sessionToken

	return v
}

// NewDeleteCommentPayload builds a video_learning service DeleteComment
// endpoint payload.
func NewDeleteCommentPayload(commentID int64, sessionToken string) *videolearning.DeleteCommentPayload {
	v := &videolearning.DeleteCommentPayload{}
	v.CommentID = commentID
	v.SessionToken = sessionToken

	return v
}

// NewGetOrCreateCategoryPayload builds a video_learning service
// GetOrCreateCategory endpoint payload.
func NewGetOrCreateCategoryPayload(body *GetOrCreateCategoryRequestBody, sessionToken string) *videolearning.GetOrCreateCategoryPayload {
	v := &videolearning.GetOrCreateCategoryPayload{
		Name: *body.Name,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetCategoryByIDPayload builds a video_learning service GetCategoryById
// endpoint payload.
func NewGetCategoryByIDPayload(categoryID int64, sessionToken string) *videolearning.GetCategoryByIDPayload {
	v := &videolearning.GetCategoryByIDPayload{}
	v.CategoryID = categoryID
	v.SessionToken = sessionToken

	return v
}

// NewGetOrCreateTagPayload builds a video_learning service GetOrCreateTag
// endpoint payload.
func NewGetOrCreateTagPayload(body *GetOrCreateTagRequestBody, sessionToken string) *videolearning.GetOrCreateTagPayload {
	v := &videolearning.GetOrCreateTagPayload{
		Name: *body.Name,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetTagByIDPayload builds a video_learning service GetTagById endpoint
// payload.
func NewGetTagByIDPayload(tagID int64, sessionToken string) *videolearning.GetTagByIDPayload {
	v := &videolearning.GetTagByIDPayload{}
	v.TagID = tagID
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateCommentRequestBody runs the validations defined on
// CreateCommentRequestBody
func ValidateCreateCommentRequestBody(body *CreateCommentRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Body == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("body", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Body != nil {
		if utf8.RuneCountInString(*body.Body) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.body", *body.Body, utf8.RuneCountInString(*body.Body), 1, true))
		}
	}
	if body.Body != nil {
		if utf8.RuneCountInString(*body.Body) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.body", *body.Body, utf8.RuneCountInString(*body.Body), 2000, false))
		}
	}
	return
}

// ValidateCompleteUploadRequestBody runs the validations defined on
// CompleteUploadRequestBody
func ValidateCompleteUploadRequestBody(body *CompleteUploadRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.CategoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("category_id", "body"))
	}
	if body.VideoObjectName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("video_object_name", "body"))
	}
	if body.ThumbnailObjectName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("thumbnail_object_name", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 1, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 2000 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 2000, false))
		}
	}
	if body.CategoryID != nil {
		if *body.CategoryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.category_id", *body.CategoryID, 1, true))
		}
	}
	return
}

// ValidateGetOrCreateCategoryRequestBody runs the validations defined on
// GetOrCreateCategoryRequestBody
func ValidateGetOrCreateCategoryRequestBody(body *GetOrCreateCategoryRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 100, false))
		}
	}
	return
}

// ValidateGetOrCreateTagRequestBody runs the validations defined on
// GetOrCreateTagRequestBody
func ValidateGetOrCreateTagRequestBody(body *GetOrCreateTagRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 50 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 50, false))
		}
	}
	return
}
