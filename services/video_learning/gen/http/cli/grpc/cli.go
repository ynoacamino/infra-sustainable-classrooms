// Code generated by goa v3.21.1, DO NOT EDIT.
//
// grpc HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	videolearningc "github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/gen/http/video_learning/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `video-learning (search-videos|get-recommendations|get-video|get-comments|create-comment|get-own-videos|initial-upload|complete-upload|upload-thumbnail|get-all-categories|get-all-tags|toggle-video-like|delete-video|get-videos-by-category|get-similar-videos|delete-comment|get-or-create-category|get-category-by-id|get-or-create-tag|get-tag-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` video-learning search-videos --query "machine learning" --category-id 3004270109085166850 --page 7277074489246843128 --page-size 48 --session-token "Saepe porro assumenda pariatur dolore ea."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		videoLearningFlags = flag.NewFlagSet("video-learning", flag.ContinueOnError)

		videoLearningSearchVideosFlags            = flag.NewFlagSet("search-videos", flag.ExitOnError)
		videoLearningSearchVideosQueryFlag        = videoLearningSearchVideosFlags.String("query", "REQUIRED", "")
		videoLearningSearchVideosCategoryIDFlag   = videoLearningSearchVideosFlags.String("category-id", "", "")
		videoLearningSearchVideosPageFlag         = videoLearningSearchVideosFlags.String("page", "1", "")
		videoLearningSearchVideosPageSizeFlag     = videoLearningSearchVideosFlags.String("page-size", "20", "")
		videoLearningSearchVideosSessionTokenFlag = videoLearningSearchVideosFlags.String("session-token", "REQUIRED", "")

		videoLearningGetRecommendationsFlags            = flag.NewFlagSet("get-recommendations", flag.ExitOnError)
		videoLearningGetRecommendationsAmountFlag       = videoLearningGetRecommendationsFlags.String("amount", "20", "")
		videoLearningGetRecommendationsSessionTokenFlag = videoLearningGetRecommendationsFlags.String("session-token", "REQUIRED", "")

		videoLearningGetVideoFlags            = flag.NewFlagSet("get-video", flag.ExitOnError)
		videoLearningGetVideoVideoIDFlag      = videoLearningGetVideoFlags.String("video-id", "REQUIRED", "Video ID")
		videoLearningGetVideoSessionTokenFlag = videoLearningGetVideoFlags.String("session-token", "REQUIRED", "")

		videoLearningGetCommentsFlags            = flag.NewFlagSet("get-comments", flag.ExitOnError)
		videoLearningGetCommentsVideoIDFlag      = videoLearningGetCommentsFlags.String("video-id", "REQUIRED", "Video ID to get comments for")
		videoLearningGetCommentsPageFlag         = videoLearningGetCommentsFlags.String("page", "1", "")
		videoLearningGetCommentsPageSizeFlag     = videoLearningGetCommentsFlags.String("page-size", "10", "")
		videoLearningGetCommentsSessionTokenFlag = videoLearningGetCommentsFlags.String("session-token", "REQUIRED", "")

		videoLearningCreateCommentFlags            = flag.NewFlagSet("create-comment", flag.ExitOnError)
		videoLearningCreateCommentBodyFlag         = videoLearningCreateCommentFlags.String("body", "REQUIRED", "")
		videoLearningCreateCommentVideoIDFlag      = videoLearningCreateCommentFlags.String("video-id", "REQUIRED", "Video ID")
		videoLearningCreateCommentSessionTokenFlag = videoLearningCreateCommentFlags.String("session-token", "REQUIRED", "")

		videoLearningGetOwnVideosFlags            = flag.NewFlagSet("get-own-videos", flag.ExitOnError)
		videoLearningGetOwnVideosPageFlag         = videoLearningGetOwnVideosFlags.String("page", "1", "")
		videoLearningGetOwnVideosPageSizeFlag     = videoLearningGetOwnVideosFlags.String("page-size", "20", "")
		videoLearningGetOwnVideosSessionTokenFlag = videoLearningGetOwnVideosFlags.String("session-token", "REQUIRED", "")

		videoLearningInitialUploadFlags            = flag.NewFlagSet("initial-upload", flag.ExitOnError)
		videoLearningInitialUploadFilenameFlag     = videoLearningInitialUploadFlags.String("filename", "REQUIRED", "Original filename")
		videoLearningInitialUploadContentTypeFlag  = videoLearningInitialUploadFlags.String("content-type", "REQUIRED", "")
		videoLearningInitialUploadSessionTokenFlag = videoLearningInitialUploadFlags.String("session-token", "REQUIRED", "")
		videoLearningInitialUploadStreamFlag       = videoLearningInitialUploadFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		videoLearningCompleteUploadFlags            = flag.NewFlagSet("complete-upload", flag.ExitOnError)
		videoLearningCompleteUploadBodyFlag         = videoLearningCompleteUploadFlags.String("body", "REQUIRED", "")
		videoLearningCompleteUploadSessionTokenFlag = videoLearningCompleteUploadFlags.String("session-token", "REQUIRED", "")

		videoLearningUploadThumbnailFlags            = flag.NewFlagSet("upload-thumbnail", flag.ExitOnError)
		videoLearningUploadThumbnailFilenameFlag     = videoLearningUploadThumbnailFlags.String("filename", "REQUIRED", "Original filename")
		videoLearningUploadThumbnailContentTypeFlag  = videoLearningUploadThumbnailFlags.String("content-type", "REQUIRED", "")
		videoLearningUploadThumbnailSessionTokenFlag = videoLearningUploadThumbnailFlags.String("session-token", "REQUIRED", "")
		videoLearningUploadThumbnailStreamFlag       = videoLearningUploadThumbnailFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		videoLearningGetAllCategoriesFlags            = flag.NewFlagSet("get-all-categories", flag.ExitOnError)
		videoLearningGetAllCategoriesSessionTokenFlag = videoLearningGetAllCategoriesFlags.String("session-token", "REQUIRED", "")

		videoLearningGetAllTagsFlags            = flag.NewFlagSet("get-all-tags", flag.ExitOnError)
		videoLearningGetAllTagsSessionTokenFlag = videoLearningGetAllTagsFlags.String("session-token", "REQUIRED", "")

		videoLearningToggleVideoLikeFlags            = flag.NewFlagSet("toggle-video-like", flag.ExitOnError)
		videoLearningToggleVideoLikeVideoIDFlag      = videoLearningToggleVideoLikeFlags.String("video-id", "REQUIRED", "Video ID")
		videoLearningToggleVideoLikeSessionTokenFlag = videoLearningToggleVideoLikeFlags.String("session-token", "REQUIRED", "")

		videoLearningDeleteVideoFlags            = flag.NewFlagSet("delete-video", flag.ExitOnError)
		videoLearningDeleteVideoVideoIDFlag      = videoLearningDeleteVideoFlags.String("video-id", "REQUIRED", "Video ID")
		videoLearningDeleteVideoSessionTokenFlag = videoLearningDeleteVideoFlags.String("session-token", "REQUIRED", "")

		videoLearningGetVideosByCategoryFlags            = flag.NewFlagSet("get-videos-by-category", flag.ExitOnError)
		videoLearningGetVideosByCategoryCategoryIDFlag   = videoLearningGetVideosByCategoryFlags.String("category-id", "REQUIRED", "Category ID")
		videoLearningGetVideosByCategoryAmountFlag       = videoLearningGetVideosByCategoryFlags.String("amount", "20", "")
		videoLearningGetVideosByCategorySessionTokenFlag = videoLearningGetVideosByCategoryFlags.String("session-token", "REQUIRED", "")

		videoLearningGetSimilarVideosFlags            = flag.NewFlagSet("get-similar-videos", flag.ExitOnError)
		videoLearningGetSimilarVideosVideoIDFlag      = videoLearningGetSimilarVideosFlags.String("video-id", "REQUIRED", "Video ID to find similar videos for")
		videoLearningGetSimilarVideosAmountFlag       = videoLearningGetSimilarVideosFlags.String("amount", "10", "")
		videoLearningGetSimilarVideosSessionTokenFlag = videoLearningGetSimilarVideosFlags.String("session-token", "REQUIRED", "")

		videoLearningDeleteCommentFlags            = flag.NewFlagSet("delete-comment", flag.ExitOnError)
		videoLearningDeleteCommentCommentIDFlag    = videoLearningDeleteCommentFlags.String("comment-id", "REQUIRED", "Comment ID")
		videoLearningDeleteCommentSessionTokenFlag = videoLearningDeleteCommentFlags.String("session-token", "REQUIRED", "")

		videoLearningGetOrCreateCategoryFlags            = flag.NewFlagSet("get-or-create-category", flag.ExitOnError)
		videoLearningGetOrCreateCategoryBodyFlag         = videoLearningGetOrCreateCategoryFlags.String("body", "REQUIRED", "")
		videoLearningGetOrCreateCategorySessionTokenFlag = videoLearningGetOrCreateCategoryFlags.String("session-token", "REQUIRED", "")

		videoLearningGetCategoryByIDFlags            = flag.NewFlagSet("get-category-by-id", flag.ExitOnError)
		videoLearningGetCategoryByIDCategoryIDFlag   = videoLearningGetCategoryByIDFlags.String("category-id", "REQUIRED", "Category ID")
		videoLearningGetCategoryByIDSessionTokenFlag = videoLearningGetCategoryByIDFlags.String("session-token", "REQUIRED", "")

		videoLearningGetOrCreateTagFlags            = flag.NewFlagSet("get-or-create-tag", flag.ExitOnError)
		videoLearningGetOrCreateTagBodyFlag         = videoLearningGetOrCreateTagFlags.String("body", "REQUIRED", "")
		videoLearningGetOrCreateTagSessionTokenFlag = videoLearningGetOrCreateTagFlags.String("session-token", "REQUIRED", "")

		videoLearningGetTagByIDFlags            = flag.NewFlagSet("get-tag-by-id", flag.ExitOnError)
		videoLearningGetTagByIDTagIDFlag        = videoLearningGetTagByIDFlags.String("tag-id", "REQUIRED", "Tag ID")
		videoLearningGetTagByIDSessionTokenFlag = videoLearningGetTagByIDFlags.String("session-token", "REQUIRED", "")
	)
	videoLearningFlags.Usage = videoLearningUsage
	videoLearningSearchVideosFlags.Usage = videoLearningSearchVideosUsage
	videoLearningGetRecommendationsFlags.Usage = videoLearningGetRecommendationsUsage
	videoLearningGetVideoFlags.Usage = videoLearningGetVideoUsage
	videoLearningGetCommentsFlags.Usage = videoLearningGetCommentsUsage
	videoLearningCreateCommentFlags.Usage = videoLearningCreateCommentUsage
	videoLearningGetOwnVideosFlags.Usage = videoLearningGetOwnVideosUsage
	videoLearningInitialUploadFlags.Usage = videoLearningInitialUploadUsage
	videoLearningCompleteUploadFlags.Usage = videoLearningCompleteUploadUsage
	videoLearningUploadThumbnailFlags.Usage = videoLearningUploadThumbnailUsage
	videoLearningGetAllCategoriesFlags.Usage = videoLearningGetAllCategoriesUsage
	videoLearningGetAllTagsFlags.Usage = videoLearningGetAllTagsUsage
	videoLearningToggleVideoLikeFlags.Usage = videoLearningToggleVideoLikeUsage
	videoLearningDeleteVideoFlags.Usage = videoLearningDeleteVideoUsage
	videoLearningGetVideosByCategoryFlags.Usage = videoLearningGetVideosByCategoryUsage
	videoLearningGetSimilarVideosFlags.Usage = videoLearningGetSimilarVideosUsage
	videoLearningDeleteCommentFlags.Usage = videoLearningDeleteCommentUsage
	videoLearningGetOrCreateCategoryFlags.Usage = videoLearningGetOrCreateCategoryUsage
	videoLearningGetCategoryByIDFlags.Usage = videoLearningGetCategoryByIDUsage
	videoLearningGetOrCreateTagFlags.Usage = videoLearningGetOrCreateTagUsage
	videoLearningGetTagByIDFlags.Usage = videoLearningGetTagByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "video-learning":
			svcf = videoLearningFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "video-learning":
			switch epn {
			case "search-videos":
				epf = videoLearningSearchVideosFlags

			case "get-recommendations":
				epf = videoLearningGetRecommendationsFlags

			case "get-video":
				epf = videoLearningGetVideoFlags

			case "get-comments":
				epf = videoLearningGetCommentsFlags

			case "create-comment":
				epf = videoLearningCreateCommentFlags

			case "get-own-videos":
				epf = videoLearningGetOwnVideosFlags

			case "initial-upload":
				epf = videoLearningInitialUploadFlags

			case "complete-upload":
				epf = videoLearningCompleteUploadFlags

			case "upload-thumbnail":
				epf = videoLearningUploadThumbnailFlags

			case "get-all-categories":
				epf = videoLearningGetAllCategoriesFlags

			case "get-all-tags":
				epf = videoLearningGetAllTagsFlags

			case "toggle-video-like":
				epf = videoLearningToggleVideoLikeFlags

			case "delete-video":
				epf = videoLearningDeleteVideoFlags

			case "get-videos-by-category":
				epf = videoLearningGetVideosByCategoryFlags

			case "get-similar-videos":
				epf = videoLearningGetSimilarVideosFlags

			case "delete-comment":
				epf = videoLearningDeleteCommentFlags

			case "get-or-create-category":
				epf = videoLearningGetOrCreateCategoryFlags

			case "get-category-by-id":
				epf = videoLearningGetCategoryByIDFlags

			case "get-or-create-tag":
				epf = videoLearningGetOrCreateTagFlags

			case "get-tag-by-id":
				epf = videoLearningGetTagByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "video-learning":
			c := videolearningc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "search-videos":
				endpoint = c.SearchVideos()
				data, err = videolearningc.BuildSearchVideosPayload(*videoLearningSearchVideosQueryFlag, *videoLearningSearchVideosCategoryIDFlag, *videoLearningSearchVideosPageFlag, *videoLearningSearchVideosPageSizeFlag, *videoLearningSearchVideosSessionTokenFlag)
			case "get-recommendations":
				endpoint = c.GetRecommendations()
				data, err = videolearningc.BuildGetRecommendationsPayload(*videoLearningGetRecommendationsAmountFlag, *videoLearningGetRecommendationsSessionTokenFlag)
			case "get-video":
				endpoint = c.GetVideo()
				data, err = videolearningc.BuildGetVideoPayload(*videoLearningGetVideoVideoIDFlag, *videoLearningGetVideoSessionTokenFlag)
			case "get-comments":
				endpoint = c.GetComments()
				data, err = videolearningc.BuildGetCommentsPayload(*videoLearningGetCommentsVideoIDFlag, *videoLearningGetCommentsPageFlag, *videoLearningGetCommentsPageSizeFlag, *videoLearningGetCommentsSessionTokenFlag)
			case "create-comment":
				endpoint = c.CreateComment()
				data, err = videolearningc.BuildCreateCommentPayload(*videoLearningCreateCommentBodyFlag, *videoLearningCreateCommentVideoIDFlag, *videoLearningCreateCommentSessionTokenFlag)
			case "get-own-videos":
				endpoint = c.GetOwnVideos()
				data, err = videolearningc.BuildGetOwnVideosPayload(*videoLearningGetOwnVideosPageFlag, *videoLearningGetOwnVideosPageSizeFlag, *videoLearningGetOwnVideosSessionTokenFlag)
			case "initial-upload":
				endpoint = c.InitialUpload()
				data, err = videolearningc.BuildInitialUploadPayload(*videoLearningInitialUploadFilenameFlag, *videoLearningInitialUploadContentTypeFlag, *videoLearningInitialUploadSessionTokenFlag)
				if err == nil {
					data, err = videolearningc.BuildInitialUploadStreamPayload(data, *videoLearningInitialUploadStreamFlag)
				}
			case "complete-upload":
				endpoint = c.CompleteUpload()
				data, err = videolearningc.BuildCompleteUploadPayload(*videoLearningCompleteUploadBodyFlag, *videoLearningCompleteUploadSessionTokenFlag)
			case "upload-thumbnail":
				endpoint = c.UploadThumbnail()
				data, err = videolearningc.BuildUploadThumbnailPayload(*videoLearningUploadThumbnailFilenameFlag, *videoLearningUploadThumbnailContentTypeFlag, *videoLearningUploadThumbnailSessionTokenFlag)
				if err == nil {
					data, err = videolearningc.BuildUploadThumbnailStreamPayload(data, *videoLearningUploadThumbnailStreamFlag)
				}
			case "get-all-categories":
				endpoint = c.GetAllCategories()
				data, err = videolearningc.BuildGetAllCategoriesPayload(*videoLearningGetAllCategoriesSessionTokenFlag)
			case "get-all-tags":
				endpoint = c.GetAllTags()
				data, err = videolearningc.BuildGetAllTagsPayload(*videoLearningGetAllTagsSessionTokenFlag)
			case "toggle-video-like":
				endpoint = c.ToggleVideoLike()
				data, err = videolearningc.BuildToggleVideoLikePayload(*videoLearningToggleVideoLikeVideoIDFlag, *videoLearningToggleVideoLikeSessionTokenFlag)
			case "delete-video":
				endpoint = c.DeleteVideo()
				data, err = videolearningc.BuildDeleteVideoPayload(*videoLearningDeleteVideoVideoIDFlag, *videoLearningDeleteVideoSessionTokenFlag)
			case "get-videos-by-category":
				endpoint = c.GetVideosByCategory()
				data, err = videolearningc.BuildGetVideosByCategoryPayload(*videoLearningGetVideosByCategoryCategoryIDFlag, *videoLearningGetVideosByCategoryAmountFlag, *videoLearningGetVideosByCategorySessionTokenFlag)
			case "get-similar-videos":
				endpoint = c.GetSimilarVideos()
				data, err = videolearningc.BuildGetSimilarVideosPayload(*videoLearningGetSimilarVideosVideoIDFlag, *videoLearningGetSimilarVideosAmountFlag, *videoLearningGetSimilarVideosSessionTokenFlag)
			case "delete-comment":
				endpoint = c.DeleteComment()
				data, err = videolearningc.BuildDeleteCommentPayload(*videoLearningDeleteCommentCommentIDFlag, *videoLearningDeleteCommentSessionTokenFlag)
			case "get-or-create-category":
				endpoint = c.GetOrCreateCategory()
				data, err = videolearningc.BuildGetOrCreateCategoryPayload(*videoLearningGetOrCreateCategoryBodyFlag, *videoLearningGetOrCreateCategorySessionTokenFlag)
			case "get-category-by-id":
				endpoint = c.GetCategoryByID()
				data, err = videolearningc.BuildGetCategoryByIDPayload(*videoLearningGetCategoryByIDCategoryIDFlag, *videoLearningGetCategoryByIDSessionTokenFlag)
			case "get-or-create-tag":
				endpoint = c.GetOrCreateTag()
				data, err = videolearningc.BuildGetOrCreateTagPayload(*videoLearningGetOrCreateTagBodyFlag, *videoLearningGetOrCreateTagSessionTokenFlag)
			case "get-tag-by-id":
				endpoint = c.GetTagByID()
				data, err = videolearningc.BuildGetTagByIDPayload(*videoLearningGetTagByIDTagIDFlag, *videoLearningGetTagByIDSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// videoLearningUsage displays the usage of the video-learning command and its
// subcommands.
func videoLearningUsage() {
	fmt.Fprintf(os.Stderr, `Video Learning microservice
Usage:
    %[1]s [globalflags] video-learning COMMAND [flags]

COMMAND:
    search-videos: Search videos by query string and category, paginated
    get-recommendations: Get random set of recommended videos for user
    get-video: Get complete video information including presigned URL
    get-comments: Get paginated comments for a video
    create-comment: Create a new comment on a video
    get-own-videos: Get authenticated user's uploaded videos, paginated
    initial-upload: Upload video file and get object name
    complete-upload: Complete video upload with metadata
    upload-thumbnail: Upload custom thumbnail for video
    get-all-categories: Get all video categories
    get-all-tags: Get all video tags
    toggle-video-like: Toggle like status for a video
    delete-video: Delete user's own video
    get-videos-by-category: Get random set of videos of a category
    get-similar-videos: Get random set of videos similar to a specific video
    delete-comment: Delete user's own comment
    get-or-create-category: Create a new video category or get existing one
    get-category-by-id: Get video category by ID
    get-or-create-tag: Create a new tag or get existing one
    get-tag-by-id: Get video tag by ID

Additional help:
    %[1]s video-learning COMMAND --help
`, os.Args[0])
}
func videoLearningSearchVideosUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning search-videos -query STRING -category-id INT64 -page INT -page-size INT -session-token STRING

Search videos by query string and category, paginated
    -query STRING: 
    -category-id INT64: 
    -page INT: 
    -page-size INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning search-videos --query "machine learning" --category-id 3004270109085166850 --page 7277074489246843128 --page-size 48 --session-token "Saepe porro assumenda pariatur dolore ea."
`, os.Args[0])
}

func videoLearningGetRecommendationsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-recommendations -amount INT -session-token STRING

Get random set of recommended videos for user
    -amount INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-recommendations --amount 53 --session-token "Pariatur assumenda soluta."
`, os.Args[0])
}

func videoLearningGetVideoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-video -video-id INT64 -session-token STRING

Get complete video information including presigned URL
    -video-id INT64: Video ID
    -session-token STRING: 

Example:
    %[1]s video-learning get-video --video-id 5148258120821240484 --session-token "Natus maxime quia consequatur facilis atque."
`, os.Args[0])
}

func videoLearningGetCommentsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-comments -video-id INT64 -page INT -page-size INT -session-token STRING

Get paginated comments for a video
    -video-id INT64: Video ID to get comments for
    -page INT: 
    -page-size INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-comments --video-id 2563123935116485323 --page 7040622026975719001 --page-size 39 --session-token "Voluptate dignissimos quo totam ipsa laboriosam ipsa."
`, os.Args[0])
}

func videoLearningCreateCommentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning create-comment -body JSON -video-id INT64 -session-token STRING

Create a new comment on a video
    -body JSON: 
    -video-id INT64: Video ID
    -session-token STRING: 

Example:
    %[1]s video-learning create-comment --body '{
      "body": "j7",
      "title": "a"
   }' --video-id 5511400267074159468 --session-token "Aspernatur illo quas molestiae alias."
`, os.Args[0])
}

func videoLearningGetOwnVideosUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-own-videos -page INT -page-size INT -session-token STRING

Get authenticated user's uploaded videos, paginated
    -page INT: 
    -page-size INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-own-videos --page 2893156668527202475 --page-size 70 --session-token "Repellendus quia."
`, os.Args[0])
}

func videoLearningInitialUploadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning initial-upload -filename STRING -content-type STRING -session-token STRING -stream STRING

Upload video file and get object name
    -filename STRING: Original filename
    -content-type STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s video-learning initial-upload --filename "Quia provident laboriosam ab." --content-type "Provident qui corporis ducimus." --session-token "Quibusdam veritatis consectetur est deserunt non dolorum." --stream "goa.png"
`, os.Args[0])
}

func videoLearningCompleteUploadUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning complete-upload -body JSON -session-token STRING

Complete video upload with metadata
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s video-learning complete-upload --body '{
      "category_id": 8870319193588356468,
      "description": "jfy",
      "tags": [
         "Dolorem et officiis enim et fugit.",
         "Est facilis quaerat similique libero.",
         "Ducimus aut quis ut ut excepturi."
      ],
      "thumbnail_object_name": "Delectus quo consectetur assumenda rerum et.",
      "title": "mu3",
      "video_object_name": "Exercitationem et recusandae autem."
   }' --session-token "Assumenda amet quia laboriosam."
`, os.Args[0])
}

func videoLearningUploadThumbnailUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning upload-thumbnail -filename STRING -content-type STRING -session-token STRING -stream STRING

Upload custom thumbnail for video
    -filename STRING: Original filename
    -content-type STRING: 
    -session-token STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    %[1]s video-learning upload-thumbnail --filename "Cum occaecati minus totam repellendus est." --content-type "Quod et inventore in et dolor officia." --session-token "Repellat ut neque quia voluptatem." --stream "goa.png"
`, os.Args[0])
}

func videoLearningGetAllCategoriesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-all-categories -session-token STRING

Get all video categories
    -session-token STRING: 

Example:
    %[1]s video-learning get-all-categories --session-token "Et maxime in corporis quae amet."
`, os.Args[0])
}

func videoLearningGetAllTagsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-all-tags -session-token STRING

Get all video tags
    -session-token STRING: 

Example:
    %[1]s video-learning get-all-tags --session-token "Dolor assumenda odit sint dignissimos dolorem."
`, os.Args[0])
}

func videoLearningToggleVideoLikeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning toggle-video-like -video-id INT64 -session-token STRING

Toggle like status for a video
    -video-id INT64: Video ID
    -session-token STRING: 

Example:
    %[1]s video-learning toggle-video-like --video-id 4244277302119237670 --session-token "Hic distinctio natus."
`, os.Args[0])
}

func videoLearningDeleteVideoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning delete-video -video-id INT64 -session-token STRING

Delete user's own video
    -video-id INT64: Video ID
    -session-token STRING: 

Example:
    %[1]s video-learning delete-video --video-id 8121209459914808072 --session-token "Amet voluptates."
`, os.Args[0])
}

func videoLearningGetVideosByCategoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-videos-by-category -category-id INT64 -amount INT -session-token STRING

Get random set of videos of a category
    -category-id INT64: Category ID
    -amount INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-videos-by-category --category-id 5813390529545338090 --amount 4 --session-token "Nostrum dicta deserunt recusandae."
`, os.Args[0])
}

func videoLearningGetSimilarVideosUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-similar-videos -video-id INT64 -amount INT -session-token STRING

Get random set of videos similar to a specific video
    -video-id INT64: Video ID to find similar videos for
    -amount INT: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-similar-videos --video-id 72536081992459501 --amount 7 --session-token "Quibusdam maiores odio et impedit optio."
`, os.Args[0])
}

func videoLearningDeleteCommentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning delete-comment -comment-id INT64 -session-token STRING

Delete user's own comment
    -comment-id INT64: Comment ID
    -session-token STRING: 

Example:
    %[1]s video-learning delete-comment --comment-id 471028505938089261 --session-token "Maxime corrupti."
`, os.Args[0])
}

func videoLearningGetOrCreateCategoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-or-create-category -body JSON -session-token STRING

Create a new video category or get existing one
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-or-create-category --body '{
      "name": "g7"
   }' --session-token "Accusamus sed ut deserunt dolore."
`, os.Args[0])
}

func videoLearningGetCategoryByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-category-by-id -category-id INT64 -session-token STRING

Get video category by ID
    -category-id INT64: Category ID
    -session-token STRING: 

Example:
    %[1]s video-learning get-category-by-id --category-id 1239598449503180108 --session-token "Saepe nobis nulla recusandae rem quis labore."
`, os.Args[0])
}

func videoLearningGetOrCreateTagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-or-create-tag -body JSON -session-token STRING

Create a new tag or get existing one
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s video-learning get-or-create-tag --body '{
      "name": "qk"
   }' --session-token "Repellat perferendis at."
`, os.Args[0])
}

func videoLearningGetTagByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] video-learning get-tag-by-id -tag-id INT64 -session-token STRING

Get video tag by ID
    -tag-id INT64: Tag ID
    -session-token STRING: 

Example:
    %[1]s video-learning get-tag-by-id --tag-id 4099501829253191854 --session-token "Veniam consequatur rerum et tempora mollitia earum."
`, os.Args[0])
}
