// Code generated by goa v3.21.1, DO NOT EDIT.
//
// video_learning service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/video_learning/design/api
// -o ./services/video_learning/

package videolearning

import (
	"context"
	"io"
)

// Video Learning microservice
type Service interface {
	// Search videos by query string and category, paginated
	SearchVideos(context.Context, *SearchVideosPayload) (res *VideoList, err error)
	// Get random set of recommended videos for user
	GetRecommendations(context.Context, *GetRecommendationsPayload) (res *VideoList, err error)
	// Get complete video information including presigned URL
	GetVideo(context.Context, *GetVideoPayload) (res *VideoDetails, err error)
	// Get paginated comments for a video
	GetComments(context.Context, *GetCommentsPayload) (res *CommentList, err error)
	// Create a new comment on a video
	CreateComment(context.Context, *CreateCommentPayload) (res *SimpleResponse, err error)
	// Get authenticated user's uploaded videos, paginated
	GetOwnVideos(context.Context, *GetOwnVideosPayload) (res []*OwnVideo, err error)
	// Upload video file and get object name
	InitialUpload(context.Context, *InitialUploadPayload, io.ReadCloser) (res *UploadResponse, err error)
	// Complete video upload with metadata
	CompleteUpload(context.Context, *CompleteUploadPayload) (res *SimpleResponse, err error)
	// Upload custom thumbnail for video
	UploadThumbnail(context.Context, *UploadThumbnailPayload, io.ReadCloser) (res *UploadResponse, err error)
	// Get all video categories
	GetAllCategories(context.Context, *GetAllCategoriesPayload) (res []*VideoCategory, err error)
	// Get all video tags
	GetAllTags(context.Context, *GetAllTagsPayload) (res []*VideoTag, err error)
	// Toggle like status for a video
	ToggleVideoLike(context.Context, *ToggleVideoLikePayload) (res *SimpleResponse, err error)
	// Delete user's own video
	DeleteVideo(context.Context, *DeleteVideoPayload) (res *SimpleResponse, err error)
	// Get random set of videos of a category
	GetVideosByCategory(context.Context, *GetVideosByCategoryPayload) (res *VideoList, err error)
	// Get random set of videos similar to a specific video
	GetSimilarVideos(context.Context, *GetSimilarVideosPayload) (res *VideoList, err error)
	// Delete user's own comment
	DeleteComment(context.Context, *DeleteCommentPayload) (res *SimpleResponse, err error)
	// Create a new video category or get existing one
	GetOrCreateCategory(context.Context, *GetOrCreateCategoryPayload) (res *VideoCategory, err error)
	// Get video category by ID
	GetCategoryByID(context.Context, *GetCategoryByIDPayload) (res *VideoCategory, err error)
	// Create a new tag or get existing one
	GetOrCreateTag(context.Context, *GetOrCreateTagPayload) (res *VideoTag, err error)
	// Get video tag by ID
	GetTagByID(context.Context, *GetTagByIDPayload) (res *VideoTag, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "video_learning"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "video_learning"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [20]string{"SearchVideos", "GetRecommendations", "GetVideo", "GetComments", "CreateComment", "GetOwnVideos", "InitialUpload", "CompleteUpload", "UploadThumbnail", "GetAllCategories", "GetAllTags", "ToggleVideoLike", "DeleteVideo", "GetVideosByCategory", "GetSimilarVideos", "DeleteComment", "GetOrCreateCategory", "GetCategoryById", "GetOrCreateTag", "GetTagById"}

// Video comment information
type Comment struct {
	// Comment unique identifier
	ID int64
	// Comment author
	Author string
	// Comment publish date in milliseconds
	Date int64
	// Comment title
	Title string
	// Comment content
	Body string
	// ID of the video this comment belongs to
	VideoID int64
}

// CommentList is the result type of the video_learning service GetComments
// method.
type CommentList struct {
	// List of comments
	Comments []*Comment
}

// CompleteUploadPayload is the payload type of the video_learning service
// CompleteUpload method.
type CompleteUploadPayload struct {
	// User session token
	SessionToken string
	// Video title
	Title string
	// Video description
	Description *string
	// Video category ID
	CategoryID int64
	// Video tags
	Tags []string
	// Thumbnail object name in Minio
	ThumbnailObjectName string
	// Video object name in Minio
	VideoObjectName string
}

// CreateCommentPayload is the payload type of the video_learning service
// CreateComment method.
type CreateCommentPayload struct {
	// User session token
	SessionToken string
	// Video ID
	VideoID int64
	// Comment title
	Title string
	// Comment content
	Body string
}

// DeleteCommentPayload is the payload type of the video_learning service
// DeleteComment method.
type DeleteCommentPayload struct {
	// User session token
	SessionToken string
	// Comment ID
	CommentID int64
}

// DeleteVideoPayload is the payload type of the video_learning service
// DeleteVideo method.
type DeleteVideoPayload struct {
	// User session token
	SessionToken string
	// Video ID
	VideoID int64
}

// GetAllCategoriesPayload is the payload type of the video_learning service
// GetAllCategories method.
type GetAllCategoriesPayload struct {
	// User session token
	SessionToken string
}

// GetAllTagsPayload is the payload type of the video_learning service
// GetAllTags method.
type GetAllTagsPayload struct {
	// User session token
	SessionToken string
}

// GetCategoryByIDPayload is the payload type of the video_learning service
// GetCategoryById method.
type GetCategoryByIDPayload struct {
	// User session token
	SessionToken string
	// Category ID
	CategoryID int64
}

// GetCommentsPayload is the payload type of the video_learning service
// GetComments method.
type GetCommentsPayload struct {
	// User session token
	SessionToken string
	// Video ID to get comments for
	VideoID int64
	// Page number for pagination
	Page int
	// Number of comments per page
	PageSize int
}

// GetOrCreateCategoryPayload is the payload type of the video_learning service
// GetOrCreateCategory method.
type GetOrCreateCategoryPayload struct {
	// User session token
	SessionToken string
	// Category name
	Name string
}

// GetOrCreateTagPayload is the payload type of the video_learning service
// GetOrCreateTag method.
type GetOrCreateTagPayload struct {
	// User session token
	SessionToken string
	// Tag name
	Name string
}

// GetOwnVideosPayload is the payload type of the video_learning service
// GetOwnVideos method.
type GetOwnVideosPayload struct {
	// User session token
	SessionToken string
	// Page number for pagination
	Page int
	// Number of videos per page
	PageSize int
}

// GetRecommendationsPayload is the payload type of the video_learning service
// GetRecommendations method.
type GetRecommendationsPayload struct {
	// User session token
	SessionToken string
	// How many videos to get
	Amount int
}

// GetSimilarVideosPayload is the payload type of the video_learning service
// GetSimilarVideos method.
type GetSimilarVideosPayload struct {
	// User session token
	SessionToken string
	// Video ID to find similar videos for
	VideoID int64
	// How many similar videos to get
	Amount int
}

// GetTagByIDPayload is the payload type of the video_learning service
// GetTagById method.
type GetTagByIDPayload struct {
	// User session token
	SessionToken string
	// Tag ID
	TagID int64
}

// GetVideoPayload is the payload type of the video_learning service GetVideo
// method.
type GetVideoPayload struct {
	// User session token
	SessionToken string
	// Video ID
	VideoID int64
}

// GetVideosByCategoryPayload is the payload type of the video_learning service
// GetVideosByCategory method.
type GetVideosByCategoryPayload struct {
	// User session token
	SessionToken string
	// Category ID
	CategoryID int64
	// How many videos to get
	Amount int
}

// InitialUploadPayload is the payload type of the video_learning service
// InitialUpload method.
type InitialUploadPayload struct {
	// User session token
	SessionToken string
	// Content type of the video file
	ContentType string
	// Original filename
	Filename string
}

// User's own video information
type OwnVideo struct {
	// Video unique identifier
	ID int64
	// Video title
	Title string
	// Number of views
	Views int
	// Number of likes
	Likes int
	// Minio presigned URL for thumbnail
	ThumbnailURL string
	// Upload timestamp in milliseconds
	UploadDate int64
}

// SearchVideosPayload is the payload type of the video_learning service
// SearchVideos method.
type SearchVideosPayload struct {
	// User session token
	SessionToken string
	// Search query string
	Query string
	// Category ID to filter by
	CategoryID *int64
	// Page number for pagination
	Page int
	// Number of videos per page
	PageSize int
}

// SimpleResponse is the result type of the video_learning service
// CreateComment method.
type SimpleResponse struct {
	// Operation success status
	Success bool
	// Response message
	Message string
	// Created resource ID (when applicable)
	ID *int64
}

// ToggleVideoLikePayload is the payload type of the video_learning service
// ToggleVideoLike method.
type ToggleVideoLikePayload struct {
	// User session token
	SessionToken string
	// Video ID
	VideoID int64
}

// UploadResponse is the result type of the video_learning service
// InitialUpload method.
type UploadResponse struct {
	// Minio object name
	ObjectName string
	// Presigned URL for accessing the file
	PresignedURL *string
}

// UploadThumbnailPayload is the payload type of the video_learning service
// UploadThumbnail method.
type UploadThumbnailPayload struct {
	// User session token
	SessionToken string
	// Content type of the thumbnail file
	ContentType string
	// Original filename
	Filename string
}

// Video information
type Video struct {
	// Video unique identifier
	ID int64
	// Video title
	Title string
	// Video author/creator
	Author string
	// Number of views
	Views int
	// Number of likes
	Likes int
	// Minio presigned URL for thumbnail
	ThumbnailURL string
}

// VideoCategory is the result type of the video_learning service
// GetOrCreateCategory method.
type VideoCategory struct {
	// Category unique identifier
	ID int64
	// Category name
	Name string
}

// VideoDetails is the result type of the video_learning service GetVideo
// method.
type VideoDetails struct {
	// Video unique identifier
	ID int64
	// Video title
	Title string
	// Video description
	Description string
	// Video author/creator
	Author string
	// Number of views
	Views int
	// Number of likes
	Likes int
	// Minio presigned URL for video
	VideoURL string
	// Minio presigned URL for thumbnail
	ThumbnailURL string
	// Upload timestamp in milliseconds
	UploadDate int64
	// Video category
	CategoryID int64
	// Video tags
	TagIds []int64
}

// VideoList is the result type of the video_learning service SearchVideos
// method.
type VideoList struct {
	// List of videos
	Videos []*Video
}

// VideoTag is the result type of the video_learning service GetOrCreateTag
// method.
type VideoTag struct {
	// Tag unique identifier
	ID int64
	// Tag name
	Name string
}

// Video category not found
type CategoryNotFound string

// Invalid content type for upload
type InvalidContentType string

// Invalid input parameters
type InvalidInput string

// Invalid or expired session
type InvalidSession string

// Permission denied for this operation
type PermissionDenied string

// User profile not found
type ProfileNotFound string

// Service temporarily unavailable
type ServiceUnavailable string

// Video tag not found
type TagNotFound string

// Unauthorized access
type Unauthorized string

// File upload failed
type UploadFailed string

// Video not found
type VideoNotFound string

// Error returns an error description.
func (e CategoryNotFound) Error() string {
	return "Video category not found"
}

// ErrorName returns "category_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e CategoryNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "category_not_found".
func (e CategoryNotFound) GoaErrorName() string {
	return "category_not_found"
}

// Error returns an error description.
func (e InvalidContentType) Error() string {
	return "Invalid content type for upload"
}

// ErrorName returns "invalid_content_type".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidContentType) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_content_type".
func (e InvalidContentType) GoaErrorName() string {
	return "invalid_content_type"
}

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input parameters"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e InvalidSession) Error() string {
	return "Invalid or expired session"
}

// ErrorName returns "invalid_session".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidSession) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_session".
func (e InvalidSession) GoaErrorName() string {
	return "invalid_session"
}

// Error returns an error description.
func (e PermissionDenied) Error() string {
	return "Permission denied for this operation"
}

// ErrorName returns "permission_denied".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e PermissionDenied) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "permission_denied".
func (e PermissionDenied) GoaErrorName() string {
	return "permission_denied"
}

// Error returns an error description.
func (e ProfileNotFound) Error() string {
	return "User profile not found"
}

// ErrorName returns "profile_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ProfileNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "profile_not_found".
func (e ProfileNotFound) GoaErrorName() string {
	return "profile_not_found"
}

// Error returns an error description.
func (e ServiceUnavailable) Error() string {
	return "Service temporarily unavailable"
}

// ErrorName returns "service_unavailable".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ServiceUnavailable) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service_unavailable".
func (e ServiceUnavailable) GoaErrorName() string {
	return "service_unavailable"
}

// Error returns an error description.
func (e TagNotFound) Error() string {
	return "Video tag not found"
}

// ErrorName returns "tag_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e TagNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "tag_not_found".
func (e TagNotFound) GoaErrorName() string {
	return "tag_not_found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// Error returns an error description.
func (e UploadFailed) Error() string {
	return "File upload failed"
}

// ErrorName returns "upload_failed".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UploadFailed) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "upload_failed".
func (e UploadFailed) GoaErrorName() string {
	return "upload_failed"
}

// Error returns an error description.
func (e VideoNotFound) Error() string {
	return "Video not found"
}

// ErrorName returns "video_not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e VideoNotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "video_not_found".
func (e VideoNotFound) GoaErrorName() string {
	return "video_not_found"
}
