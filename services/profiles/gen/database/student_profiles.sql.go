// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student_profiles.sql

package profilesdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudentProfile = `-- name: CreateStudentProfile :one
INSERT INTO student_profiles (
    profile_id, grade_level, major
) VALUES (
    $1, $2, $3
) RETURNING id, profile_id, grade_level, major, created_at, updated_at
`

type CreateStudentProfileParams struct {
	ProfileID  int64
	GradeLevel string
	Major      pgtype.Text
}

func (q *Queries) CreateStudentProfile(ctx context.Context, arg CreateStudentProfileParams) (StudentProfile, error) {
	row := q.db.QueryRow(ctx, createStudentProfile, arg.ProfileID, arg.GradeLevel, arg.Major)
	var i StudentProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.GradeLevel,
		&i.Major,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompleteStudentProfile = `-- name: GetCompleteStudentProfile :one
SELECT 
    p.user_id,
    p.role,
    p.first_name,
    p.last_name,
    p.email,
    p.phone,
    p.avatar_url,
    p.bio,
    p.is_active,
    p.created_at,
    p.updated_at,
    sp.grade_level,
    sp.major
FROM profiles p
JOIN student_profiles sp ON p.id = sp.profile_id
WHERE p.user_id = $1 AND p.is_active = true
`

type GetCompleteStudentProfileRow struct {
	UserID     int64
	Role       string
	FirstName  string
	LastName   string
	Email      string
	Phone      pgtype.Text
	AvatarUrl  pgtype.Text
	Bio        pgtype.Text
	IsActive   bool
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
	GradeLevel string
	Major      pgtype.Text
}

func (q *Queries) GetCompleteStudentProfile(ctx context.Context, userID int64) (GetCompleteStudentProfileRow, error) {
	row := q.db.QueryRow(ctx, getCompleteStudentProfile, userID)
	var i GetCompleteStudentProfileRow
	err := row.Scan(
		&i.UserID,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.AvatarUrl,
		&i.Bio,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GradeLevel,
		&i.Major,
	)
	return i, err
}

const getStudentProfileByProfileId = `-- name: GetStudentProfileByProfileId :one
SELECT id, profile_id, grade_level, major, created_at, updated_at FROM student_profiles
WHERE profile_id = $1
`

func (q *Queries) GetStudentProfileByProfileId(ctx context.Context, profileID int64) (StudentProfile, error) {
	row := q.db.QueryRow(ctx, getStudentProfileByProfileId, profileID)
	var i StudentProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.GradeLevel,
		&i.Major,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStudentProfileByUserId = `-- name: GetStudentProfileByUserId :one
SELECT sp.id, sp.profile_id, sp.grade_level, sp.major, sp.created_at, sp.updated_at FROM student_profiles sp
JOIN profiles p ON sp.profile_id = p.id
WHERE p.user_id = $1 AND p.is_active = true
`

func (q *Queries) GetStudentProfileByUserId(ctx context.Context, userID int64) (StudentProfile, error) {
	row := q.db.QueryRow(ctx, getStudentProfileByUserId, userID)
	var i StudentProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.GradeLevel,
		&i.Major,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStudentProfile = `-- name: UpdateStudentProfile :one
UPDATE student_profiles 
SET 
    grade_level = COALESCE($2, grade_level),
    major = COALESCE($3, major),
    updated_at = NOW()
WHERE profile_id = $1
RETURNING id, profile_id, grade_level, major, created_at, updated_at
`

type UpdateStudentProfileParams struct {
	ProfileID  int64
	GradeLevel string
	Major      pgtype.Text
}

func (q *Queries) UpdateStudentProfile(ctx context.Context, arg UpdateStudentProfileParams) (StudentProfile, error) {
	row := q.db.QueryRow(ctx, updateStudentProfile, arg.ProfileID, arg.GradeLevel, arg.Major)
	var i StudentProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.GradeLevel,
		&i.Major,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
