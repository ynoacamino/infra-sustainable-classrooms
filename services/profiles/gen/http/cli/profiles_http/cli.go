// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles-http HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	profilesc "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/http/profiles/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `profiles (create-student-profile|create-teacher-profile|get-complete-profile|get-public-profile-by-id|update-profile)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` profiles create-student-profile --body '{
      "avatar_url": "Nemo corporis ratione quo.",
      "bio": "Qui ut aut et facilis excepturi.",
      "email": "lera@farrelljast.name",
      "first_name": "Dolorem hic sapiente ea.",
      "grade_level": "Harum cum velit laboriosam tenetur maxime maxime.",
      "last_name": "Consequatur id facilis eaque incidunt.",
      "major": "Voluptatem ab.",
      "phone": "Totam laboriosam veniam."
   }' --session-token "Deleniti rerum aliquid in ea."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		profilesFlags = flag.NewFlagSet("profiles", flag.ContinueOnError)

		profilesCreateStudentProfileFlags            = flag.NewFlagSet("create-student-profile", flag.ExitOnError)
		profilesCreateStudentProfileBodyFlag         = profilesCreateStudentProfileFlags.String("body", "REQUIRED", "")
		profilesCreateStudentProfileSessionTokenFlag = profilesCreateStudentProfileFlags.String("session-token", "REQUIRED", "")

		profilesCreateTeacherProfileFlags            = flag.NewFlagSet("create-teacher-profile", flag.ExitOnError)
		profilesCreateTeacherProfileBodyFlag         = profilesCreateTeacherProfileFlags.String("body", "REQUIRED", "")
		profilesCreateTeacherProfileSessionTokenFlag = profilesCreateTeacherProfileFlags.String("session-token", "REQUIRED", "")

		profilesGetCompleteProfileFlags            = flag.NewFlagSet("get-complete-profile", flag.ExitOnError)
		profilesGetCompleteProfileSessionTokenFlag = profilesGetCompleteProfileFlags.String("session-token", "REQUIRED", "")

		profilesGetPublicProfileByIDFlags      = flag.NewFlagSet("get-public-profile-by-id", flag.ExitOnError)
		profilesGetPublicProfileByIDUserIDFlag = profilesGetPublicProfileByIDFlags.String("user-id", "REQUIRED", "User ID to retrieve profile for")

		profilesUpdateProfileFlags            = flag.NewFlagSet("update-profile", flag.ExitOnError)
		profilesUpdateProfileBodyFlag         = profilesUpdateProfileFlags.String("body", "REQUIRED", "")
		profilesUpdateProfileSessionTokenFlag = profilesUpdateProfileFlags.String("session-token", "REQUIRED", "")
	)
	profilesFlags.Usage = profilesUsage
	profilesCreateStudentProfileFlags.Usage = profilesCreateStudentProfileUsage
	profilesCreateTeacherProfileFlags.Usage = profilesCreateTeacherProfileUsage
	profilesGetCompleteProfileFlags.Usage = profilesGetCompleteProfileUsage
	profilesGetPublicProfileByIDFlags.Usage = profilesGetPublicProfileByIDUsage
	profilesUpdateProfileFlags.Usage = profilesUpdateProfileUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "profiles":
			svcf = profilesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "profiles":
			switch epn {
			case "create-student-profile":
				epf = profilesCreateStudentProfileFlags

			case "create-teacher-profile":
				epf = profilesCreateTeacherProfileFlags

			case "get-complete-profile":
				epf = profilesGetCompleteProfileFlags

			case "get-public-profile-by-id":
				epf = profilesGetPublicProfileByIDFlags

			case "update-profile":
				epf = profilesUpdateProfileFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "profiles":
			c := profilesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-student-profile":
				endpoint = c.CreateStudentProfile()
				data, err = profilesc.BuildCreateStudentProfilePayload(*profilesCreateStudentProfileBodyFlag, *profilesCreateStudentProfileSessionTokenFlag)
			case "create-teacher-profile":
				endpoint = c.CreateTeacherProfile()
				data, err = profilesc.BuildCreateTeacherProfilePayload(*profilesCreateTeacherProfileBodyFlag, *profilesCreateTeacherProfileSessionTokenFlag)
			case "get-complete-profile":
				endpoint = c.GetCompleteProfile()
				data, err = profilesc.BuildGetCompleteProfilePayload(*profilesGetCompleteProfileSessionTokenFlag)
			case "get-public-profile-by-id":
				endpoint = c.GetPublicProfileByID()
				data, err = profilesc.BuildGetPublicProfileByIDPayload(*profilesGetPublicProfileByIDUserIDFlag)
			case "update-profile":
				endpoint = c.UpdateProfile()
				data, err = profilesc.BuildUpdateProfilePayload(*profilesUpdateProfileBodyFlag, *profilesUpdateProfileSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// profilesUsage displays the usage of the profiles command and its subcommands.
func profilesUsage() {
	fmt.Fprintf(os.Stderr, `Profiles microservice for managing student and teacher profiles
Usage:
    %[1]s [globalflags] profiles COMMAND [flags]

COMMAND:
    create-student-profile: Create a new student profile with basic information
    create-teacher-profile: Create a new teacher profile with basic information
    get-complete-profile: Get user's complete profile
    get-public-profile-by-id: Get public profile information by user ID
    update-profile: Update basic profile information

Additional help:
    %[1]s profiles COMMAND --help
`, os.Args[0])
}
func profilesCreateStudentProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles create-student-profile -body JSON -session-token STRING

Create a new student profile with basic information
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s profiles create-student-profile --body '{
      "avatar_url": "Nemo corporis ratione quo.",
      "bio": "Qui ut aut et facilis excepturi.",
      "email": "lera@farrelljast.name",
      "first_name": "Dolorem hic sapiente ea.",
      "grade_level": "Harum cum velit laboriosam tenetur maxime maxime.",
      "last_name": "Consequatur id facilis eaque incidunt.",
      "major": "Voluptatem ab.",
      "phone": "Totam laboriosam veniam."
   }' --session-token "Deleniti rerum aliquid in ea."
`, os.Args[0])
}

func profilesCreateTeacherProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles create-teacher-profile -body JSON -session-token STRING

Create a new teacher profile with basic information
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s profiles create-teacher-profile --body '{
      "avatar_url": "Omnis alias dolor voluptatibus occaecati nemo.",
      "bio": "Qui consectetur perferendis tempore porro ut velit.",
      "email": "rosalinda@osinskigoodwin.com",
      "first_name": "Quaerat officia ut velit odit architecto.",
      "last_name": "Voluptatibus voluptas sequi voluptatibus.",
      "phone": "Voluptatem adipisci in.",
      "position": "Quaerat amet et consectetur."
   }' --session-token "Et sed hic omnis ipsam qui eum."
`, os.Args[0])
}

func profilesGetCompleteProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles get-complete-profile -session-token STRING

Get user's complete profile
    -session-token STRING: 

Example:
    %[1]s profiles get-complete-profile --session-token "Ab nisi in."
`, os.Args[0])
}

func profilesGetPublicProfileByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles get-public-profile-by-id -user-id INT64

Get public profile information by user ID
    -user-id INT64: User ID to retrieve profile for

Example:
    %[1]s profiles get-public-profile-by-id --user-id 2757743622984225050
`, os.Args[0])
}

func profilesUpdateProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles update-profile -body JSON -session-token STRING

Update basic profile information
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s profiles update-profile --body '{
      "avatar_url": "Qui alias provident vel minima saepe delectus.",
      "bio": "In ut id aut fuga blanditiis.",
      "email": "aglae.hudson@mosciski.name",
      "first_name": "Repudiandae rem quia.",
      "last_name": "Consequatur aperiam ad suscipit aut distinctio et.",
      "major": "Error rerum.",
      "phone": "Magni itaque non quae assumenda.",
      "position": "Est quaerat commodi."
   }' --session-token "Consectetur accusantium consequatur odio doloremque et facere."
`, os.Args[0])
}
