// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles HTTP server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package server

import (
	"context"
	"net/http"

	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the profiles service endpoint HTTP handlers.
type Server struct {
	Mounts               []*MountPoint
	CreateStudentProfile http.Handler
	CreateTeacherProfile http.Handler
	GetCompleteProfile   http.Handler
	GetPublicProfileByID http.Handler
	UpdateProfile        http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the profiles service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *profiles.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateStudentProfile", "POST", "/api/profiles/student"},
			{"CreateTeacherProfile", "POST", "/api/profiles/teacher"},
			{"GetCompleteProfile", "GET", "/api/profiles/me"},
			{"GetPublicProfileByID", "GET", "/api/profiles/public/{user_id}"},
			{"UpdateProfile", "PUT", "/api/profiles/me"},
		},
		CreateStudentProfile: NewCreateStudentProfileHandler(e.CreateStudentProfile, mux, decoder, encoder, errhandler, formatter),
		CreateTeacherProfile: NewCreateTeacherProfileHandler(e.CreateTeacherProfile, mux, decoder, encoder, errhandler, formatter),
		GetCompleteProfile:   NewGetCompleteProfileHandler(e.GetCompleteProfile, mux, decoder, encoder, errhandler, formatter),
		GetPublicProfileByID: NewGetPublicProfileByIDHandler(e.GetPublicProfileByID, mux, decoder, encoder, errhandler, formatter),
		UpdateProfile:        NewUpdateProfileHandler(e.UpdateProfile, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "profiles" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateStudentProfile = m(s.CreateStudentProfile)
	s.CreateTeacherProfile = m(s.CreateTeacherProfile)
	s.GetCompleteProfile = m(s.GetCompleteProfile)
	s.GetPublicProfileByID = m(s.GetPublicProfileByID)
	s.UpdateProfile = m(s.UpdateProfile)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return profiles.MethodNames[:] }

// Mount configures the mux to serve the profiles endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateStudentProfileHandler(mux, h.CreateStudentProfile)
	MountCreateTeacherProfileHandler(mux, h.CreateTeacherProfile)
	MountGetCompleteProfileHandler(mux, h.GetCompleteProfile)
	MountGetPublicProfileByIDHandler(mux, h.GetPublicProfileByID)
	MountUpdateProfileHandler(mux, h.UpdateProfile)
}

// Mount configures the mux to serve the profiles endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateStudentProfileHandler configures the mux to serve the "profiles"
// service "CreateStudentProfile" endpoint.
func MountCreateStudentProfileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/profiles/student", f)
}

// NewCreateStudentProfileHandler creates a HTTP handler which loads the HTTP
// request and calls the "profiles" service "CreateStudentProfile" endpoint.
func NewCreateStudentProfileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateStudentProfileRequest(mux, decoder)
		encodeResponse = EncodeCreateStudentProfileResponse(encoder)
		encodeError    = EncodeCreateStudentProfileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateStudentProfile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateTeacherProfileHandler configures the mux to serve the "profiles"
// service "CreateTeacherProfile" endpoint.
func MountCreateTeacherProfileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/profiles/teacher", f)
}

// NewCreateTeacherProfileHandler creates a HTTP handler which loads the HTTP
// request and calls the "profiles" service "CreateTeacherProfile" endpoint.
func NewCreateTeacherProfileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTeacherProfileRequest(mux, decoder)
		encodeResponse = EncodeCreateTeacherProfileResponse(encoder)
		encodeError    = EncodeCreateTeacherProfileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CreateTeacherProfile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCompleteProfileHandler configures the mux to serve the "profiles"
// service "GetCompleteProfile" endpoint.
func MountGetCompleteProfileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/profiles/me", f)
}

// NewGetCompleteProfileHandler creates a HTTP handler which loads the HTTP
// request and calls the "profiles" service "GetCompleteProfile" endpoint.
func NewGetCompleteProfileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCompleteProfileRequest(mux, decoder)
		encodeResponse = EncodeGetCompleteProfileResponse(encoder)
		encodeError    = EncodeGetCompleteProfileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCompleteProfile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPublicProfileByIDHandler configures the mux to serve the "profiles"
// service "GetPublicProfileById" endpoint.
func MountGetPublicProfileByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/profiles/public/{user_id}", f)
}

// NewGetPublicProfileByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "profiles" service "GetPublicProfileById" endpoint.
func NewGetPublicProfileByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPublicProfileByIDRequest(mux, decoder)
		encodeResponse = EncodeGetPublicProfileByIDResponse(encoder)
		encodeError    = EncodeGetPublicProfileByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetPublicProfileById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateProfileHandler configures the mux to serve the "profiles" service
// "UpdateProfile" endpoint.
func MountUpdateProfileHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/profiles/me", f)
}

// NewUpdateProfileHandler creates a HTTP handler which loads the HTTP request
// and calls the "profiles" service "UpdateProfile" endpoint.
func NewUpdateProfileHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateProfileRequest(mux, decoder)
		encodeResponse = EncodeUpdateProfileResponse(encoder)
		encodeError    = EncodeUpdateProfileError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdateProfile")
		ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
