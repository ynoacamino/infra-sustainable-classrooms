// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package server

import (
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goa "goa.design/goa/v3/pkg"
)

// CreateStudentProfileRequestBody is the type of the "profiles" service
// "CreateStudentProfile" endpoint HTTP request body.
type CreateStudentProfileRequestBody struct {
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Grade level (1-12, undergraduate, graduate)
	GradeLevel *string `form:"grade_level,omitempty" json:"grade_level,omitempty" xml:"grade_level,omitempty"`
	// Major/field of study
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
}

// CreateTeacherProfileRequestBody is the type of the "profiles" service
// "CreateTeacherProfile" endpoint HTTP request body.
type CreateTeacherProfileRequestBody struct {
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Position/title
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// UpdateProfileRequestBody is the type of the "profiles" service
// "UpdateProfile" endpoint HTTP request body.
type UpdateProfileRequestBody struct {
	// Updated first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Updated last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Updated email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Updated phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Updated profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Updated biography
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Updated major (students)
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Updated position (teachers)
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// CreateStudentProfileResponseBody is the type of the "profiles" service
// "CreateStudentProfile" endpoint HTTP response body.
type CreateStudentProfileResponseBody struct {
	// User identifier
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Grade level
	GradeLevel string `form:"grade_level" json:"grade_level" xml:"grade_level"`
	// Major/field of study
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Profile creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive bool `form:"is_active" json:"is_active" xml:"is_active"`
}

// CreateTeacherProfileResponseBody is the type of the "profiles" service
// "CreateTeacherProfile" endpoint HTTP response body.
type CreateTeacherProfileResponseBody struct {
	// User identifier
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Position/title
	Position string `form:"position" json:"position" xml:"position"`
	// Profile creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive bool `form:"is_active" json:"is_active" xml:"is_active"`
}

// GetCompleteProfileResponseBody is the type of the "profiles" service
// "GetCompleteProfile" endpoint HTTP response body.
type GetCompleteProfileResponseBody struct {
	// User identifier
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// User role (student, teacher)
	Role string `form:"role" json:"role" xml:"role"`
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Profile creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive bool `form:"is_active" json:"is_active" xml:"is_active"`
	// Grade level (for students)
	GradeLevel *string `form:"grade_level,omitempty" json:"grade_level,omitempty" xml:"grade_level,omitempty"`
	// Major/field of study (for students)
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Position/title (for teachers)
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// GetPublicProfileByIDResponseBody is the type of the "profiles" service
// "GetPublicProfileById" endpoint HTTP response body.
type GetPublicProfileByIDResponseBody struct {
	// User identifier
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// User role
	Role string `form:"role" json:"role" xml:"role"`
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Public biography
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Whether profile is active
	IsActive bool `form:"is_active" json:"is_active" xml:"is_active"`
}

// UpdateProfileResponseBody is the type of the "profiles" service
// "UpdateProfile" endpoint HTTP response body.
type UpdateProfileResponseBody struct {
	// User identifier
	UserID int64 `form:"user_id" json:"user_id" xml:"user_id"`
	// User role (student, teacher)
	Role string `form:"role" json:"role" xml:"role"`
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Profile creation timestamp
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive bool `form:"is_active" json:"is_active" xml:"is_active"`
}

// NewCreateStudentProfileResponseBody builds the HTTP response body from the
// result of the "CreateStudentProfile" endpoint of the "profiles" service.
func NewCreateStudentProfileResponseBody(res *profiles.StudentProfileResponse) *CreateStudentProfileResponseBody {
	body := &CreateStudentProfileResponseBody{
		UserID:     res.UserID,
		FirstName:  res.FirstName,
		LastName:   res.LastName,
		Email:      res.Email,
		Phone:      res.Phone,
		AvatarURL:  res.AvatarURL,
		Bio:        res.Bio,
		GradeLevel: res.GradeLevel,
		Major:      res.Major,
		CreatedAt:  res.CreatedAt,
		UpdatedAt:  res.UpdatedAt,
		IsActive:   res.IsActive,
	}
	return body
}

// NewCreateTeacherProfileResponseBody builds the HTTP response body from the
// result of the "CreateTeacherProfile" endpoint of the "profiles" service.
func NewCreateTeacherProfileResponseBody(res *profiles.TeacherProfileResponse) *CreateTeacherProfileResponseBody {
	body := &CreateTeacherProfileResponseBody{
		UserID:    res.UserID,
		FirstName: res.FirstName,
		LastName:  res.LastName,
		Email:     res.Email,
		Phone:     res.Phone,
		AvatarURL: res.AvatarURL,
		Bio:       res.Bio,
		Position:  res.Position,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
		IsActive:  res.IsActive,
	}
	return body
}

// NewGetCompleteProfileResponseBody builds the HTTP response body from the
// result of the "GetCompleteProfile" endpoint of the "profiles" service.
func NewGetCompleteProfileResponseBody(res *profiles.CompleteProfileResponse) *GetCompleteProfileResponseBody {
	body := &GetCompleteProfileResponseBody{
		UserID:     res.UserID,
		Role:       res.Role,
		FirstName:  res.FirstName,
		LastName:   res.LastName,
		Email:      res.Email,
		Phone:      res.Phone,
		AvatarURL:  res.AvatarURL,
		Bio:        res.Bio,
		CreatedAt:  res.CreatedAt,
		UpdatedAt:  res.UpdatedAt,
		IsActive:   res.IsActive,
		GradeLevel: res.GradeLevel,
		Major:      res.Major,
		Position:   res.Position,
	}
	return body
}

// NewGetPublicProfileByIDResponseBody builds the HTTP response body from the
// result of the "GetPublicProfileById" endpoint of the "profiles" service.
func NewGetPublicProfileByIDResponseBody(res *profiles.PublicProfileResponse) *GetPublicProfileByIDResponseBody {
	body := &GetPublicProfileByIDResponseBody{
		UserID:    res.UserID,
		Role:      res.Role,
		FirstName: res.FirstName,
		LastName:  res.LastName,
		AvatarURL: res.AvatarURL,
		Bio:       res.Bio,
		IsActive:  res.IsActive,
	}
	return body
}

// NewUpdateProfileResponseBody builds the HTTP response body from the result
// of the "UpdateProfile" endpoint of the "profiles" service.
func NewUpdateProfileResponseBody(res *profiles.ProfileResponse) *UpdateProfileResponseBody {
	body := &UpdateProfileResponseBody{
		UserID:    res.UserID,
		Role:      res.Role,
		FirstName: res.FirstName,
		LastName:  res.LastName,
		Email:     res.Email,
		Phone:     res.Phone,
		AvatarURL: res.AvatarURL,
		Bio:       res.Bio,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
		IsActive:  res.IsActive,
	}
	return body
}

// NewCreateStudentProfilePayload builds a profiles service
// CreateStudentProfile endpoint payload.
func NewCreateStudentProfilePayload(body *CreateStudentProfileRequestBody, sessionToken string) *profiles.CreateStudentProfilePayload {
	v := &profiles.CreateStudentProfilePayload{
		FirstName:  *body.FirstName,
		LastName:   *body.LastName,
		Email:      *body.Email,
		Phone:      body.Phone,
		AvatarURL:  body.AvatarURL,
		Bio:        body.Bio,
		GradeLevel: *body.GradeLevel,
		Major:      body.Major,
	}
	v.SessionToken = sessionToken

	return v
}

// NewCreateTeacherProfilePayload builds a profiles service
// CreateTeacherProfile endpoint payload.
func NewCreateTeacherProfilePayload(body *CreateTeacherProfileRequestBody, sessionToken string) *profiles.CreateTeacherProfilePayload {
	v := &profiles.CreateTeacherProfilePayload{
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Email:     *body.Email,
		Phone:     body.Phone,
		AvatarURL: body.AvatarURL,
		Bio:       body.Bio,
		Position:  *body.Position,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetCompleteProfilePayload builds a profiles service GetCompleteProfile
// endpoint payload.
func NewGetCompleteProfilePayload(sessionToken string) *profiles.GetCompleteProfilePayload {
	v := &profiles.GetCompleteProfilePayload{}
	v.SessionToken = sessionToken

	return v
}

// NewGetPublicProfileByIDPayload builds a profiles service
// GetPublicProfileById endpoint payload.
func NewGetPublicProfileByIDPayload(userID int64) *profiles.GetPublicProfileByIDPayload {
	v := &profiles.GetPublicProfileByIDPayload{}
	v.UserID = userID

	return v
}

// NewUpdateProfilePayload builds a profiles service UpdateProfile endpoint
// payload.
func NewUpdateProfilePayload(body *UpdateProfileRequestBody, sessionToken string) *profiles.UpdateProfilePayload {
	v := &profiles.UpdateProfilePayload{
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Email:     body.Email,
		Phone:     body.Phone,
		AvatarURL: body.AvatarURL,
		Bio:       body.Bio,
		Major:     body.Major,
		Position:  body.Position,
	}
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateStudentProfileRequestBody runs the validations defined on
// CreateStudentProfileRequestBody
func ValidateCreateStudentProfileRequestBody(body *CreateStudentProfileRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.GradeLevel == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("grade_level", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateCreateTeacherProfileRequestBody runs the validations defined on
// CreateTeacherProfileRequestBody
func ValidateCreateTeacherProfileRequestBody(body *CreateTeacherProfileRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Position == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("position", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}

// ValidateUpdateProfileRequestBody runs the validations defined on
// UpdateProfileRequestBody
func ValidateUpdateProfileRequestBody(body *UpdateProfileRequestBody) (err error) {
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
