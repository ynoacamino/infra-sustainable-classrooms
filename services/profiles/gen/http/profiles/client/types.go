// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package client

import (
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goa "goa.design/goa/v3/pkg"
)

// CreateStudentProfileRequestBody is the type of the "profiles" service
// "CreateStudentProfile" endpoint HTTP request body.
type CreateStudentProfileRequestBody struct {
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Grade level (1-12, undergraduate, graduate)
	GradeLevel string `form:"grade_level" json:"grade_level" xml:"grade_level"`
	// Major/field of study
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
}

// CreateTeacherProfileRequestBody is the type of the "profiles" service
// "CreateTeacherProfile" endpoint HTTP request body.
type CreateTeacherProfileRequestBody struct {
	// First name
	FirstName string `form:"first_name" json:"first_name" xml:"first_name"`
	// Last name
	LastName string `form:"last_name" json:"last_name" xml:"last_name"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Position/title
	Position string `form:"position" json:"position" xml:"position"`
}

// UpdateProfileRequestBody is the type of the "profiles" service
// "UpdateProfile" endpoint HTTP request body.
type UpdateProfileRequestBody struct {
	// Updated first name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Updated last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Updated email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Updated phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Updated profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Updated biography
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Updated major (students)
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Updated position (teachers)
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// CreateStudentProfileResponseBody is the type of the "profiles" service
// "CreateStudentProfile" endpoint HTTP response body.
type CreateStudentProfileResponseBody struct {
	// User identifier
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Grade level
	GradeLevel *string `form:"grade_level,omitempty" json:"grade_level,omitempty" xml:"grade_level,omitempty"`
	// Major/field of study
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Profile creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty" xml:"is_active,omitempty"`
}

// CreateTeacherProfileResponseBody is the type of the "profiles" service
// "CreateTeacherProfile" endpoint HTTP response body.
type CreateTeacherProfileResponseBody struct {
	// User identifier
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Position/title
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
	// Profile creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty" xml:"is_active,omitempty"`
}

// GetCompleteProfileResponseBody is the type of the "profiles" service
// "GetCompleteProfile" endpoint HTTP response body.
type GetCompleteProfileResponseBody struct {
	// User identifier
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// User role (student, teacher)
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Profile creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty" xml:"is_active,omitempty"`
	// Grade level (for students)
	GradeLevel *string `form:"grade_level,omitempty" json:"grade_level,omitempty" xml:"grade_level,omitempty"`
	// Major/field of study (for students)
	Major *string `form:"major,omitempty" json:"major,omitempty" xml:"major,omitempty"`
	// Position/title (for teachers)
	Position *string `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// GetPublicProfileByIDResponseBody is the type of the "profiles" service
// "GetPublicProfileById" endpoint HTTP response body.
type GetPublicProfileByIDResponseBody struct {
	// User identifier
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// User role
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Public biography
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Whether profile is active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty" xml:"is_active,omitempty"`
}

// UpdateProfileResponseBody is the type of the "profiles" service
// "UpdateProfile" endpoint HTTP response body.
type UpdateProfileResponseBody struct {
	// User identifier
	UserID *int64 `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// User role (student, teacher)
	Role *string `form:"role,omitempty" json:"role,omitempty" xml:"role,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Profile picture URL
	AvatarURL *string `form:"avatar_url,omitempty" json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// Biography/description
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
	// Profile creation timestamp
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Last update timestamp
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Whether profile is active
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty" xml:"is_active,omitempty"`
}

// NewCreateStudentProfileRequestBody builds the HTTP request body from the
// payload of the "CreateStudentProfile" endpoint of the "profiles" service.
func NewCreateStudentProfileRequestBody(p *profiles.CreateStudentProfilePayload) *CreateStudentProfileRequestBody {
	body := &CreateStudentProfileRequestBody{
		FirstName:  p.FirstName,
		LastName:   p.LastName,
		Email:      p.Email,
		Phone:      p.Phone,
		AvatarURL:  p.AvatarURL,
		Bio:        p.Bio,
		GradeLevel: p.GradeLevel,
		Major:      p.Major,
	}
	return body
}

// NewCreateTeacherProfileRequestBody builds the HTTP request body from the
// payload of the "CreateTeacherProfile" endpoint of the "profiles" service.
func NewCreateTeacherProfileRequestBody(p *profiles.CreateTeacherProfilePayload) *CreateTeacherProfileRequestBody {
	body := &CreateTeacherProfileRequestBody{
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Email:     p.Email,
		Phone:     p.Phone,
		AvatarURL: p.AvatarURL,
		Bio:       p.Bio,
		Position:  p.Position,
	}
	return body
}

// NewUpdateProfileRequestBody builds the HTTP request body from the payload of
// the "UpdateProfile" endpoint of the "profiles" service.
func NewUpdateProfileRequestBody(p *profiles.UpdateProfilePayload) *UpdateProfileRequestBody {
	body := &UpdateProfileRequestBody{
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Email:     p.Email,
		Phone:     p.Phone,
		AvatarURL: p.AvatarURL,
		Bio:       p.Bio,
		Major:     p.Major,
		Position:  p.Position,
	}
	return body
}

// NewCreateStudentProfileStudentProfileResponseCreated builds a "profiles"
// service "CreateStudentProfile" endpoint result from a HTTP "Created"
// response.
func NewCreateStudentProfileStudentProfileResponseCreated(body *CreateStudentProfileResponseBody) *profiles.StudentProfileResponse {
	v := &profiles.StudentProfileResponse{
		UserID:     *body.UserID,
		FirstName:  *body.FirstName,
		LastName:   *body.LastName,
		Email:      *body.Email,
		Phone:      body.Phone,
		AvatarURL:  body.AvatarURL,
		Bio:        body.Bio,
		GradeLevel: *body.GradeLevel,
		Major:      body.Major,
		CreatedAt:  *body.CreatedAt,
		UpdatedAt:  body.UpdatedAt,
		IsActive:   *body.IsActive,
	}

	return v
}

// NewCreateStudentProfileInvalidInput builds a profiles service
// CreateStudentProfile endpoint invalid_input error.
func NewCreateStudentProfileInvalidInput(body string) profiles.InvalidInput {
	v := profiles.InvalidInput(body)

	return v
}

// NewCreateStudentProfileProfileAlreadyExists builds a profiles service
// CreateStudentProfile endpoint profile_already_exists error.
func NewCreateStudentProfileProfileAlreadyExists(body string) profiles.ProfileAlreadyExists {
	v := profiles.ProfileAlreadyExists(body)

	return v
}

// NewCreateStudentProfileUnauthorized builds a profiles service
// CreateStudentProfile endpoint unauthorized error.
func NewCreateStudentProfileUnauthorized(body string) profiles.Unauthorized {
	v := profiles.Unauthorized(body)

	return v
}

// NewCreateTeacherProfileTeacherProfileResponseCreated builds a "profiles"
// service "CreateTeacherProfile" endpoint result from a HTTP "Created"
// response.
func NewCreateTeacherProfileTeacherProfileResponseCreated(body *CreateTeacherProfileResponseBody) *profiles.TeacherProfileResponse {
	v := &profiles.TeacherProfileResponse{
		UserID:    *body.UserID,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Email:     *body.Email,
		Phone:     body.Phone,
		AvatarURL: body.AvatarURL,
		Bio:       body.Bio,
		Position:  *body.Position,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		IsActive:  *body.IsActive,
	}

	return v
}

// NewCreateTeacherProfileInvalidInput builds a profiles service
// CreateTeacherProfile endpoint invalid_input error.
func NewCreateTeacherProfileInvalidInput(body string) profiles.InvalidInput {
	v := profiles.InvalidInput(body)

	return v
}

// NewCreateTeacherProfileProfileAlreadyExists builds a profiles service
// CreateTeacherProfile endpoint profile_already_exists error.
func NewCreateTeacherProfileProfileAlreadyExists(body string) profiles.ProfileAlreadyExists {
	v := profiles.ProfileAlreadyExists(body)

	return v
}

// NewCreateTeacherProfileUnauthorized builds a profiles service
// CreateTeacherProfile endpoint unauthorized error.
func NewCreateTeacherProfileUnauthorized(body string) profiles.Unauthorized {
	v := profiles.Unauthorized(body)

	return v
}

// NewGetCompleteProfileCompleteProfileResponseOK builds a "profiles" service
// "GetCompleteProfile" endpoint result from a HTTP "OK" response.
func NewGetCompleteProfileCompleteProfileResponseOK(body *GetCompleteProfileResponseBody) *profiles.CompleteProfileResponse {
	v := &profiles.CompleteProfileResponse{
		UserID:     *body.UserID,
		Role:       *body.Role,
		FirstName:  *body.FirstName,
		LastName:   *body.LastName,
		Email:      *body.Email,
		Phone:      body.Phone,
		AvatarURL:  body.AvatarURL,
		Bio:        body.Bio,
		CreatedAt:  *body.CreatedAt,
		UpdatedAt:  body.UpdatedAt,
		IsActive:   *body.IsActive,
		GradeLevel: body.GradeLevel,
		Major:      body.Major,
		Position:   body.Position,
	}

	return v
}

// NewGetCompleteProfileProfileNotFound builds a profiles service
// GetCompleteProfile endpoint profile_not_found error.
func NewGetCompleteProfileProfileNotFound(body string) profiles.ProfileNotFound {
	v := profiles.ProfileNotFound(body)

	return v
}

// NewGetCompleteProfileUnauthorized builds a profiles service
// GetCompleteProfile endpoint unauthorized error.
func NewGetCompleteProfileUnauthorized(body string) profiles.Unauthorized {
	v := profiles.Unauthorized(body)

	return v
}

// NewGetPublicProfileByIDPublicProfileResponseOK builds a "profiles" service
// "GetPublicProfileById" endpoint result from a HTTP "OK" response.
func NewGetPublicProfileByIDPublicProfileResponseOK(body *GetPublicProfileByIDResponseBody) *profiles.PublicProfileResponse {
	v := &profiles.PublicProfileResponse{
		UserID:    *body.UserID,
		Role:      *body.Role,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		AvatarURL: body.AvatarURL,
		Bio:       body.Bio,
		IsActive:  *body.IsActive,
	}

	return v
}

// NewGetPublicProfileByIDInvalidInput builds a profiles service
// GetPublicProfileById endpoint invalid_input error.
func NewGetPublicProfileByIDInvalidInput(body string) profiles.InvalidInput {
	v := profiles.InvalidInput(body)

	return v
}

// NewGetPublicProfileByIDProfileNotFound builds a profiles service
// GetPublicProfileById endpoint profile_not_found error.
func NewGetPublicProfileByIDProfileNotFound(body string) profiles.ProfileNotFound {
	v := profiles.ProfileNotFound(body)

	return v
}

// NewUpdateProfileProfileResponseOK builds a "profiles" service
// "UpdateProfile" endpoint result from a HTTP "OK" response.
func NewUpdateProfileProfileResponseOK(body *UpdateProfileResponseBody) *profiles.ProfileResponse {
	v := &profiles.ProfileResponse{
		UserID:    *body.UserID,
		Role:      *body.Role,
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Email:     *body.Email,
		Phone:     body.Phone,
		AvatarURL: body.AvatarURL,
		Bio:       body.Bio,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		IsActive:  *body.IsActive,
	}

	return v
}

// NewUpdateProfileInvalidInput builds a profiles service UpdateProfile
// endpoint invalid_input error.
func NewUpdateProfileInvalidInput(body string) profiles.InvalidInput {
	v := profiles.InvalidInput(body)

	return v
}

// NewUpdateProfileProfileNotFound builds a profiles service UpdateProfile
// endpoint profile_not_found error.
func NewUpdateProfileProfileNotFound(body string) profiles.ProfileNotFound {
	v := profiles.ProfileNotFound(body)

	return v
}

// NewUpdateProfileUnauthorized builds a profiles service UpdateProfile
// endpoint unauthorized error.
func NewUpdateProfileUnauthorized(body string) profiles.Unauthorized {
	v := profiles.Unauthorized(body)

	return v
}

// ValidateCreateStudentProfileResponseBody runs the validations defined on
// CreateStudentProfileResponseBody
func ValidateCreateStudentProfileResponseBody(body *CreateStudentProfileResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.GradeLevel == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("grade_level", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_active", "body"))
	}
	return
}

// ValidateCreateTeacherProfileResponseBody runs the validations defined on
// CreateTeacherProfileResponseBody
func ValidateCreateTeacherProfileResponseBody(body *CreateTeacherProfileResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Position == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("position", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_active", "body"))
	}
	return
}

// ValidateGetCompleteProfileResponseBody runs the validations defined on
// GetCompleteProfileResponseBody
func ValidateGetCompleteProfileResponseBody(body *GetCompleteProfileResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_active", "body"))
	}
	return
}

// ValidateGetPublicProfileByIDResponseBody runs the validations defined on
// GetPublicProfileByIdResponseBody
func ValidateGetPublicProfileByIDResponseBody(body *GetPublicProfileByIDResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_active", "body"))
	}
	return
}

// ValidateUpdateProfileResponseBody runs the validations defined on
// UpdateProfileResponseBody
func ValidateUpdateProfileResponseBody(body *UpdateProfileResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("role", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_active", "body"))
	}
	return
}
