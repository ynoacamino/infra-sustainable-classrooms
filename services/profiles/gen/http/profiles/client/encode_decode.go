// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateStudentProfileRequest instantiates a HTTP request object with
// method and path set to call the "profiles" service "CreateStudentProfile"
// endpoint
func (c *Client) BuildCreateStudentProfileRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateStudentProfileProfilesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profiles", "CreateStudentProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateStudentProfileRequest returns an encoder for requests sent to
// the profiles CreateStudentProfile server.
func EncodeCreateStudentProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profiles.CreateStudentProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("profiles", "CreateStudentProfile", "*profiles.CreateStudentProfilePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateStudentProfileRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("profiles", "CreateStudentProfile", err)
		}
		return nil
	}
}

// DecodeCreateStudentProfileResponse returns a decoder for responses returned
// by the profiles CreateStudentProfile endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateStudentProfileResponse may return the following errors:
//   - "invalid_input" (type profiles.InvalidInput): http.StatusBadRequest
//   - "profile_already_exists" (type profiles.ProfileAlreadyExists): http.StatusConflict
//   - "unauthorized" (type profiles.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateStudentProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateStudentProfileResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateStudentProfile", err)
			}
			err = ValidateCreateStudentProfileResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profiles", "CreateStudentProfile", err)
			}
			res := NewCreateStudentProfileStudentProfileResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateStudentProfile", err)
			}
			return nil, NewCreateStudentProfileInvalidInput(body)
		case http.StatusConflict:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateStudentProfile", err)
			}
			return nil, NewCreateStudentProfileProfileAlreadyExists(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateStudentProfile", err)
			}
			return nil, NewCreateStudentProfileUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profiles", "CreateStudentProfile", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateTeacherProfileRequest instantiates a HTTP request object with
// method and path set to call the "profiles" service "CreateTeacherProfile"
// endpoint
func (c *Client) BuildCreateTeacherProfileRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTeacherProfileProfilesPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profiles", "CreateTeacherProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTeacherProfileRequest returns an encoder for requests sent to
// the profiles CreateTeacherProfile server.
func EncodeCreateTeacherProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profiles.CreateTeacherProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("profiles", "CreateTeacherProfile", "*profiles.CreateTeacherProfilePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateTeacherProfileRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("profiles", "CreateTeacherProfile", err)
		}
		return nil
	}
}

// DecodeCreateTeacherProfileResponse returns a decoder for responses returned
// by the profiles CreateTeacherProfile endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeCreateTeacherProfileResponse may return the following errors:
//   - "invalid_input" (type profiles.InvalidInput): http.StatusBadRequest
//   - "profile_already_exists" (type profiles.ProfileAlreadyExists): http.StatusConflict
//   - "unauthorized" (type profiles.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateTeacherProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateTeacherProfileResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateTeacherProfile", err)
			}
			err = ValidateCreateTeacherProfileResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profiles", "CreateTeacherProfile", err)
			}
			res := NewCreateTeacherProfileTeacherProfileResponseCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateTeacherProfile", err)
			}
			return nil, NewCreateTeacherProfileInvalidInput(body)
		case http.StatusConflict:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateTeacherProfile", err)
			}
			return nil, NewCreateTeacherProfileProfileAlreadyExists(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "CreateTeacherProfile", err)
			}
			return nil, NewCreateTeacherProfileUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profiles", "CreateTeacherProfile", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCompleteProfileRequest instantiates a HTTP request object with
// method and path set to call the "profiles" service "GetCompleteProfile"
// endpoint
func (c *Client) BuildGetCompleteProfileRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCompleteProfileProfilesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profiles", "GetCompleteProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCompleteProfileRequest returns an encoder for requests sent to the
// profiles GetCompleteProfile server.
func EncodeGetCompleteProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profiles.GetCompleteProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("profiles", "GetCompleteProfile", "*profiles.GetCompleteProfilePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetCompleteProfileResponse returns a decoder for responses returned by
// the profiles GetCompleteProfile endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetCompleteProfileResponse may return the following errors:
//   - "profile_not_found" (type profiles.ProfileNotFound): http.StatusNotFound
//   - "unauthorized" (type profiles.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetCompleteProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCompleteProfileResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetCompleteProfile", err)
			}
			err = ValidateGetCompleteProfileResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profiles", "GetCompleteProfile", err)
			}
			res := NewGetCompleteProfileCompleteProfileResponseOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetCompleteProfile", err)
			}
			return nil, NewGetCompleteProfileProfileNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetCompleteProfile", err)
			}
			return nil, NewGetCompleteProfileUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profiles", "GetCompleteProfile", resp.StatusCode, string(body))
		}
	}
}

// BuildGetPublicProfileByIDRequest instantiates a HTTP request object with
// method and path set to call the "profiles" service "GetPublicProfileById"
// endpoint
func (c *Client) BuildGetPublicProfileByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		userID int64
	)
	{
		p, ok := v.(*profiles.GetPublicProfileByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("profiles", "GetPublicProfileById", "*profiles.GetPublicProfileByIDPayload", v)
		}
		userID = p.UserID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetPublicProfileByIDProfilesPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profiles", "GetPublicProfileById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetPublicProfileByIDResponse returns a decoder for responses returned
// by the profiles GetPublicProfileById endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetPublicProfileByIDResponse may return the following errors:
//   - "invalid_input" (type profiles.InvalidInput): http.StatusBadRequest
//   - "profile_not_found" (type profiles.ProfileNotFound): http.StatusNotFound
//   - error: internal error
func DecodeGetPublicProfileByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetPublicProfileByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetPublicProfileById", err)
			}
			err = ValidateGetPublicProfileByIDResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profiles", "GetPublicProfileById", err)
			}
			res := NewGetPublicProfileByIDPublicProfileResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetPublicProfileById", err)
			}
			return nil, NewGetPublicProfileByIDInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "GetPublicProfileById", err)
			}
			return nil, NewGetPublicProfileByIDProfileNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profiles", "GetPublicProfileById", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateProfileRequest instantiates a HTTP request object with method and
// path set to call the "profiles" service "UpdateProfile" endpoint
func (c *Client) BuildUpdateProfileRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProfileProfilesPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("profiles", "UpdateProfile", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateProfileRequest returns an encoder for requests sent to the
// profiles UpdateProfile server.
func EncodeUpdateProfileRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*profiles.UpdateProfilePayload)
		if !ok {
			return goahttp.ErrInvalidType("profiles", "UpdateProfile", "*profiles.UpdateProfilePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateProfileRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("profiles", "UpdateProfile", err)
		}
		return nil
	}
}

// DecodeUpdateProfileResponse returns a decoder for responses returned by the
// profiles UpdateProfile endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeUpdateProfileResponse may return the following errors:
//   - "invalid_input" (type profiles.InvalidInput): http.StatusBadRequest
//   - "profile_not_found" (type profiles.ProfileNotFound): http.StatusNotFound
//   - "unauthorized" (type profiles.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateProfileResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateProfileResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "UpdateProfile", err)
			}
			err = ValidateUpdateProfileResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("profiles", "UpdateProfile", err)
			}
			res := NewUpdateProfileProfileResponseOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "UpdateProfile", err)
			}
			return nil, NewUpdateProfileInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "UpdateProfile", err)
			}
			return nil, NewUpdateProfileProfileNotFound(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("profiles", "UpdateProfile", err)
			}
			return nil, NewUpdateProfileUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("profiles", "UpdateProfile", resp.StatusCode, string(body))
		}
	}
}
