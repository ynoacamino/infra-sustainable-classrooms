// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles gRPC server
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package server

import (
	"context"
	"errors"

	profilespb "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/grpc/profiles/pb"
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the profilespb.ProfilesServer interface.
type Server struct {
	GetCompleteProfileH   goagrpc.UnaryHandler
	GetPublicProfileByIDH goagrpc.UnaryHandler
	ValidateUserRoleH     goagrpc.UnaryHandler
	profilespb.UnimplementedProfilesServer
}

// New instantiates the server struct with the profiles service endpoints.
func New(e *profiles.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetCompleteProfileH:   NewGetCompleteProfileHandler(e.GetCompleteProfile, uh),
		GetPublicProfileByIDH: NewGetPublicProfileByIDHandler(e.GetPublicProfileByID, uh),
		ValidateUserRoleH:     NewValidateUserRoleHandler(e.ValidateUserRole, uh),
	}
}

// NewGetCompleteProfileHandler creates a gRPC handler which serves the
// "profiles" service "GetCompleteProfile" endpoint.
func NewGetCompleteProfileHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetCompleteProfileRequest, EncodeGetCompleteProfileResponse)
	}
	return h
}

// GetCompleteProfile implements the "GetCompleteProfile" method in
// profilespb.ProfilesServer interface.
func (s *Server) GetCompleteProfile(ctx context.Context, message *profilespb.GetCompleteProfileRequest) (*profilespb.GetCompleteProfileResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetCompleteProfile")
	ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
	resp, err := s.GetCompleteProfileH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthorized":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			case "profile_not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*profilespb.GetCompleteProfileResponse), nil
}

// NewGetPublicProfileByIDHandler creates a gRPC handler which serves the
// "profiles" service "GetPublicProfileById" endpoint.
func NewGetPublicProfileByIDHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetPublicProfileByIDRequest, EncodeGetPublicProfileByIDResponse)
	}
	return h
}

// GetPublicProfileByID implements the "GetPublicProfileByID" method in
// profilespb.ProfilesServer interface.
func (s *Server) GetPublicProfileByID(ctx context.Context, message *profilespb.GetPublicProfileByIDRequest) (*profilespb.GetPublicProfileByIDResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "GetPublicProfileById")
	ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
	resp, err := s.GetPublicProfileByIDH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "profile_not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "invalid_input":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*profilespb.GetPublicProfileByIDResponse), nil
}

// NewValidateUserRoleHandler creates a gRPC handler which serves the
// "profiles" service "ValidateUserRole" endpoint.
func NewValidateUserRoleHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeValidateUserRoleRequest, EncodeValidateUserRoleResponse)
	}
	return h
}

// ValidateUserRole implements the "ValidateUserRole" method in
// profilespb.ProfilesServer interface.
func (s *Server) ValidateUserRole(ctx context.Context, message *profilespb.ValidateUserRoleRequest) (*profilespb.ValidateUserRoleResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "ValidateUserRole")
	ctx = context.WithValue(ctx, goa.ServiceKey, "profiles")
	resp, err := s.ValidateUserRoleH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "profile_not_found":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			case "permission_denied":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*profilespb.ValidateUserRoleResponse), nil
}
