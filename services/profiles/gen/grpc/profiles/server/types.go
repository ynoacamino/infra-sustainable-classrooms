// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles gRPC server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package server

import (
	profilespb "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/grpc/profiles/pb"
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
)

// NewGetCompleteProfilePayload builds the payload of the "GetCompleteProfile"
// endpoint of the "profiles" service from the gRPC request type.
func NewGetCompleteProfilePayload(message *profilespb.GetCompleteProfileRequest) *profiles.GetCompleteProfilePayload {
	v := &profiles.GetCompleteProfilePayload{
		SessionToken: message.SessionToken,
	}
	return v
}

// NewProtoGetCompleteProfileResponse builds the gRPC response type from the
// result of the "GetCompleteProfile" endpoint of the "profiles" service.
func NewProtoGetCompleteProfileResponse(result *profiles.CompleteProfileResponse) *profilespb.GetCompleteProfileResponse {
	message := &profilespb.GetCompleteProfileResponse{
		UserId:     result.UserID,
		Role:       result.Role,
		FirstName:  result.FirstName,
		LastName:   result.LastName,
		Email:      result.Email,
		Phone:      result.Phone,
		AvatarUrl:  result.AvatarURL,
		Bio:        result.Bio,
		CreatedAt:  result.CreatedAt,
		UpdatedAt:  result.UpdatedAt,
		IsActive:   result.IsActive,
		GradeLevel: result.GradeLevel,
		Major:      result.Major,
		Position:   result.Position,
	}
	return message
}

// NewGetPublicProfileByIDPayload builds the payload of the
// "GetPublicProfileById" endpoint of the "profiles" service from the gRPC
// request type.
func NewGetPublicProfileByIDPayload(message *profilespb.GetPublicProfileByIDRequest) *profiles.GetPublicProfileByIDPayload {
	v := &profiles.GetPublicProfileByIDPayload{
		UserID: message.UserId,
	}
	return v
}

// NewProtoGetPublicProfileByIDResponse builds the gRPC response type from the
// result of the "GetPublicProfileById" endpoint of the "profiles" service.
func NewProtoGetPublicProfileByIDResponse(result *profiles.PublicProfileResponse) *profilespb.GetPublicProfileByIDResponse {
	message := &profilespb.GetPublicProfileByIDResponse{
		UserId:    result.UserID,
		Role:      result.Role,
		FirstName: result.FirstName,
		LastName:  result.LastName,
		AvatarUrl: result.AvatarURL,
		Bio:       result.Bio,
		IsActive:  result.IsActive,
	}
	return message
}

// NewValidateUserRolePayload builds the payload of the "ValidateUserRole"
// endpoint of the "profiles" service from the gRPC request type.
func NewValidateUserRolePayload(message *profilespb.ValidateUserRoleRequest) *profiles.ValidateUserRolePayload {
	v := &profiles.ValidateUserRolePayload{
		UserID: message.UserId,
	}
	return v
}

// NewProtoValidateUserRoleResponse builds the gRPC response type from the
// result of the "ValidateUserRole" endpoint of the "profiles" service.
func NewProtoValidateUserRoleResponse(result *profiles.RoleValidationResponse) *profilespb.ValidateUserRoleResponse {
	message := &profilespb.ValidateUserRoleResponse{
		UserId: result.UserID,
		Role:   result.Role,
	}
	return message
}
