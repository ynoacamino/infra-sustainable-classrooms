// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles gRPC server encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package server

import (
	"context"

	profilespb "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/grpc/profiles/pb"
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeGetCompleteProfileResponse encodes responses from the "profiles"
// service "GetCompleteProfile" endpoint.
func EncodeGetCompleteProfileResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profiles.CompleteProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profiles", "GetCompleteProfile", "*profiles.CompleteProfileResponse", v)
	}
	resp := NewProtoGetCompleteProfileResponse(result)
	return resp, nil
}

// DecodeGetCompleteProfileRequest decodes requests sent to "profiles" service
// "GetCompleteProfile" endpoint.
func DecodeGetCompleteProfileRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *profilespb.GetCompleteProfileRequest
		ok      bool
	)
	{
		if message, ok = v.(*profilespb.GetCompleteProfileRequest); !ok {
			return nil, goagrpc.ErrInvalidType("profiles", "GetCompleteProfile", "*profilespb.GetCompleteProfileRequest", v)
		}
	}
	var payload *profiles.GetCompleteProfilePayload
	{
		payload = NewGetCompleteProfilePayload(message)
	}
	return payload, nil
}

// EncodeGetPublicProfileByIDResponse encodes responses from the "profiles"
// service "GetPublicProfileById" endpoint.
func EncodeGetPublicProfileByIDResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profiles.PublicProfileResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profiles", "GetPublicProfileById", "*profiles.PublicProfileResponse", v)
	}
	resp := NewProtoGetPublicProfileByIDResponse(result)
	return resp, nil
}

// DecodeGetPublicProfileByIDRequest decodes requests sent to "profiles"
// service "GetPublicProfileById" endpoint.
func DecodeGetPublicProfileByIDRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *profilespb.GetPublicProfileByIDRequest
		ok      bool
	)
	{
		if message, ok = v.(*profilespb.GetPublicProfileByIDRequest); !ok {
			return nil, goagrpc.ErrInvalidType("profiles", "GetPublicProfileById", "*profilespb.GetPublicProfileByIDRequest", v)
		}
	}
	var payload *profiles.GetPublicProfileByIDPayload
	{
		payload = NewGetPublicProfileByIDPayload(message)
	}
	return payload, nil
}

// EncodeValidateUserRoleResponse encodes responses from the "profiles" service
// "ValidateUserRole" endpoint.
func EncodeValidateUserRoleResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*profiles.RoleValidationResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("profiles", "ValidateUserRole", "*profiles.RoleValidationResponse", v)
	}
	resp := NewProtoValidateUserRoleResponse(result)
	return resp, nil
}

// DecodeValidateUserRoleRequest decodes requests sent to "profiles" service
// "ValidateUserRole" endpoint.
func DecodeValidateUserRoleRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *profilespb.ValidateUserRoleRequest
		ok      bool
	)
	{
		if message, ok = v.(*profilespb.ValidateUserRoleRequest); !ok {
			return nil, goagrpc.ErrInvalidType("profiles", "ValidateUserRole", "*profilespb.ValidateUserRoleRequest", v)
		}
	}
	var payload *profiles.ValidateUserRolePayload
	{
		payload = NewValidateUserRolePayload(message)
	}
	return payload, nil
}
