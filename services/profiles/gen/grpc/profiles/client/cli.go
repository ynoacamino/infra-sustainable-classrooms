// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package client

import (
	"encoding/json"
	"fmt"

	profilespb "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/grpc/profiles/pb"
	profiles "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/profiles"
)

// BuildGetCompleteProfilePayload builds the payload for the profiles
// GetCompleteProfile endpoint from CLI flags.
func BuildGetCompleteProfilePayload(profilesGetCompleteProfileMessage string) (*profiles.GetCompleteProfilePayload, error) {
	var err error
	var message profilespb.GetCompleteProfileRequest
	{
		if profilesGetCompleteProfileMessage != "" {
			err = json.Unmarshal([]byte(profilesGetCompleteProfileMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"session_token\": \"Rem blanditiis.\"\n   }'")
			}
		}
	}
	v := &profiles.GetCompleteProfilePayload{
		SessionToken: message.SessionToken,
	}

	return v, nil
}

// BuildGetPublicProfileByIDPayload builds the payload for the profiles
// GetPublicProfileById endpoint from CLI flags.
func BuildGetPublicProfileByIDPayload(profilesGetPublicProfileByIDMessage string) (*profiles.GetPublicProfileByIDPayload, error) {
	var err error
	var message profilespb.GetPublicProfileByIDRequest
	{
		if profilesGetPublicProfileByIDMessage != "" {
			err = json.Unmarshal([]byte(profilesGetPublicProfileByIDMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user_id\": 2388931305053140188\n   }'")
			}
		}
	}
	v := &profiles.GetPublicProfileByIDPayload{
		UserID: message.UserId,
	}

	return v, nil
}

// BuildValidateUserRolePayload builds the payload for the profiles
// ValidateUserRole endpoint from CLI flags.
func BuildValidateUserRolePayload(profilesValidateUserRoleMessage string) (*profiles.ValidateUserRolePayload, error) {
	var err error
	var message profilespb.ValidateUserRoleRequest
	{
		if profilesValidateUserRoleMessage != "" {
			err = json.Unmarshal([]byte(profilesValidateUserRoleMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"user_id\": 7845699967840725710\n   }'")
			}
		}
	}
	v := &profiles.ValidateUserRolePayload{
		UserID: message.UserId,
	}

	return v, nil
}
