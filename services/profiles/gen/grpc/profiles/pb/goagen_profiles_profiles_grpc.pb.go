// Code generated with goa v3.21.1, DO NOT EDIT.
//
// profiles protocol buffer definition
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: goagen_profiles_profiles.proto

package profilespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Profiles_GetCompleteProfile_FullMethodName   = "/profiles.Profiles/GetCompleteProfile"
	Profiles_GetPublicProfileByID_FullMethodName = "/profiles.Profiles/GetPublicProfileByID"
	Profiles_ValidateUserRole_FullMethodName     = "/profiles.Profiles/ValidateUserRole"
)

// ProfilesClient is the client API for Profiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Profiles microservice for managing student and teacher profiles
type ProfilesClient interface {
	// Get user's complete profile
	GetCompleteProfile(ctx context.Context, in *GetCompleteProfileRequest, opts ...grpc.CallOption) (*GetCompleteProfileResponse, error)
	// Get public profile information by user ID
	GetPublicProfileByID(ctx context.Context, in *GetPublicProfileByIDRequest, opts ...grpc.CallOption) (*GetPublicProfileByIDResponse, error)
	// Validate user role for inter-service communication
	ValidateUserRole(ctx context.Context, in *ValidateUserRoleRequest, opts ...grpc.CallOption) (*ValidateUserRoleResponse, error)
}

type profilesClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesClient(cc grpc.ClientConnInterface) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) GetCompleteProfile(ctx context.Context, in *GetCompleteProfileRequest, opts ...grpc.CallOption) (*GetCompleteProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompleteProfileResponse)
	err := c.cc.Invoke(ctx, Profiles_GetCompleteProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetPublicProfileByID(ctx context.Context, in *GetPublicProfileByIDRequest, opts ...grpc.CallOption) (*GetPublicProfileByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicProfileByIDResponse)
	err := c.cc.Invoke(ctx, Profiles_GetPublicProfileByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) ValidateUserRole(ctx context.Context, in *ValidateUserRoleRequest, opts ...grpc.CallOption) (*ValidateUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateUserRoleResponse)
	err := c.cc.Invoke(ctx, Profiles_ValidateUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServer is the server API for Profiles service.
// All implementations must embed UnimplementedProfilesServer
// for forward compatibility.
//
// Profiles microservice for managing student and teacher profiles
type ProfilesServer interface {
	// Get user's complete profile
	GetCompleteProfile(context.Context, *GetCompleteProfileRequest) (*GetCompleteProfileResponse, error)
	// Get public profile information by user ID
	GetPublicProfileByID(context.Context, *GetPublicProfileByIDRequest) (*GetPublicProfileByIDResponse, error)
	// Validate user role for inter-service communication
	ValidateUserRole(context.Context, *ValidateUserRoleRequest) (*ValidateUserRoleResponse, error)
	mustEmbedUnimplementedProfilesServer()
}

// UnimplementedProfilesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfilesServer struct{}

func (UnimplementedProfilesServer) GetCompleteProfile(context.Context, *GetCompleteProfileRequest) (*GetCompleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompleteProfile not implemented")
}
func (UnimplementedProfilesServer) GetPublicProfileByID(context.Context, *GetPublicProfileByIDRequest) (*GetPublicProfileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicProfileByID not implemented")
}
func (UnimplementedProfilesServer) ValidateUserRole(context.Context, *ValidateUserRoleRequest) (*ValidateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserRole not implemented")
}
func (UnimplementedProfilesServer) mustEmbedUnimplementedProfilesServer() {}
func (UnimplementedProfilesServer) testEmbeddedByValue()                  {}

// UnsafeProfilesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServer will
// result in compilation errors.
type UnsafeProfilesServer interface {
	mustEmbedUnimplementedProfilesServer()
}

func RegisterProfilesServer(s grpc.ServiceRegistrar, srv ProfilesServer) {
	// If the following call pancis, it indicates UnimplementedProfilesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Profiles_ServiceDesc, srv)
}

func _Profiles_GetCompleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetCompleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_GetCompleteProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetCompleteProfile(ctx, req.(*GetCompleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetPublicProfileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicProfileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetPublicProfileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_GetPublicProfileByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetPublicProfileByID(ctx, req.(*GetPublicProfileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_ValidateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).ValidateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Profiles_ValidateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).ValidateUserRole(ctx, req.(*ValidateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profiles_ServiceDesc is the grpc.ServiceDesc for Profiles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profiles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profiles.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompleteProfile",
			Handler:    _Profiles_GetCompleteProfile_Handler,
		},
		{
			MethodName: "GetPublicProfileByID",
			Handler:    _Profiles_GetPublicProfileByID_Handler,
		},
		{
			MethodName: "ValidateUserRole",
			Handler:    _Profiles_ValidateUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goagen_profiles_profiles.proto",
}
