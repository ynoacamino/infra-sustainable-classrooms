// Code generated by goa v3.21.1, DO NOT EDIT.
//
// profiles-http gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/design/api
// -o ./services/profiles/

package cli

import (
	"flag"
	"fmt"
	"os"

	profilesc "github.com/ynoacamino/infra-sustainable-classrooms/services/profiles/gen/grpc/profiles/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `profiles (get-complete-profile|get-public-profile-by-id|validate-user-role)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` profiles get-complete-profile --message '{
      "session_token": "Rem blanditiis."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		profilesFlags = flag.NewFlagSet("profiles", flag.ContinueOnError)

		profilesGetCompleteProfileFlags       = flag.NewFlagSet("get-complete-profile", flag.ExitOnError)
		profilesGetCompleteProfileMessageFlag = profilesGetCompleteProfileFlags.String("message", "", "")

		profilesGetPublicProfileByIDFlags       = flag.NewFlagSet("get-public-profile-by-id", flag.ExitOnError)
		profilesGetPublicProfileByIDMessageFlag = profilesGetPublicProfileByIDFlags.String("message", "", "")

		profilesValidateUserRoleFlags       = flag.NewFlagSet("validate-user-role", flag.ExitOnError)
		profilesValidateUserRoleMessageFlag = profilesValidateUserRoleFlags.String("message", "", "")
	)
	profilesFlags.Usage = profilesUsage
	profilesGetCompleteProfileFlags.Usage = profilesGetCompleteProfileUsage
	profilesGetPublicProfileByIDFlags.Usage = profilesGetPublicProfileByIDUsage
	profilesValidateUserRoleFlags.Usage = profilesValidateUserRoleUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "profiles":
			svcf = profilesFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "profiles":
			switch epn {
			case "get-complete-profile":
				epf = profilesGetCompleteProfileFlags

			case "get-public-profile-by-id":
				epf = profilesGetPublicProfileByIDFlags

			case "validate-user-role":
				epf = profilesValidateUserRoleFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "profiles":
			c := profilesc.NewClient(cc, opts...)
			switch epn {
			case "get-complete-profile":
				endpoint = c.GetCompleteProfile()
				data, err = profilesc.BuildGetCompleteProfilePayload(*profilesGetCompleteProfileMessageFlag)
			case "get-public-profile-by-id":
				endpoint = c.GetPublicProfileByID()
				data, err = profilesc.BuildGetPublicProfileByIDPayload(*profilesGetPublicProfileByIDMessageFlag)
			case "validate-user-role":
				endpoint = c.ValidateUserRole()
				data, err = profilesc.BuildValidateUserRolePayload(*profilesValidateUserRoleMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// profilesUsage displays the usage of the profiles command and its subcommands.
func profilesUsage() {
	fmt.Fprintf(os.Stderr, `Profiles microservice for managing student and teacher profiles
Usage:
    %[1]s [globalflags] profiles COMMAND [flags]

COMMAND:
    get-complete-profile: Get user's complete profile
    get-public-profile-by-id: Get public profile information by user ID
    validate-user-role: Validate user role for inter-service communication

Additional help:
    %[1]s profiles COMMAND --help
`, os.Args[0])
}
func profilesGetCompleteProfileUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles get-complete-profile -message JSON

Get user's complete profile
    -message JSON: 

Example:
    %[1]s profiles get-complete-profile --message '{
      "session_token": "Rem blanditiis."
   }'
`, os.Args[0])
}

func profilesGetPublicProfileByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles get-public-profile-by-id -message JSON

Get public profile information by user ID
    -message JSON: 

Example:
    %[1]s profiles get-public-profile-by-id --message '{
      "user_id": 2388931305053140188
   }'
`, os.Args[0])
}

func profilesValidateUserRoleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] profiles validate-user-role -message JSON

Validate user role for inter-service communication
    -message JSON: 

Example:
    %[1]s profiles validate-user-role --message '{
      "user_id": 7845699967840725710
   }'
`, os.Args[0])
}
