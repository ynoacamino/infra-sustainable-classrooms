// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles.sql

package textdb

import (
	"context"
)

const createArticle = `-- name: CreateArticle :exec
INSERT INTO articles (section_id, title, content)
VALUES ($1, $2, $3)
`

type CreateArticleParams struct {
	SectionID int64
	Title     string
	Content   string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) error {
	_, err := q.db.Exec(ctx, createArticle, arg.SectionID, arg.Title, arg.Content)
	return err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, section_id, title, content, created_at, updated_at FROM articles WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.SectionID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArticlesBySection = `-- name: ListArticlesBySection :many
SELECT id, section_id, title, content, created_at, updated_at FROM articles WHERE section_id = $1 ORDER BY created_at ASC
`

func (q *Queries) ListArticlesBySection(ctx context.Context, sectionID int64) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticlesBySection, sectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.SectionID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE articles
SET title = COALESCE($2, title),
    content = COALESCE($3, content),
    updated_at = NOW()
WHERE id = $1
`

type UpdateArticleParams struct {
	ID      int64
	Title   string
	Content string
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.Exec(ctx, updateArticle, arg.ID, arg.Title, arg.Content)
	return err
}
