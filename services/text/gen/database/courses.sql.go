// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: courses.sql

package textdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :exec
INSERT INTO courses (title, description, image_url)
VALUES ($1, $2, $3)
`

type CreateCourseParams struct {
	Title       string
	Description string
	ImageUrl    pgtype.Text
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) error {
	_, err := q.db.Exec(ctx, createCourse, arg.Title, arg.Description, arg.ImageUrl)
	return err
}

const deleteCourse = `-- name: DeleteCourse :exec
DELETE FROM courses WHERE id = $1
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCourse, id)
	return err
}

const getCourse = `-- name: GetCourse :one
SELECT id, title, description, image_url, created_at, updated_at FROM courses WHERE id = $1
`

func (q *Queries) GetCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, title, description, image_url, created_at, updated_at FROM courses ORDER BY created_at ASC
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :exec
UPDATE courses
SET title = COALESCE($2, title),
    description = COALESCE($3, description),
    image_url = COALESCE($4, image_url),
    updated_at = NOW()
WHERE id = $1
`

type UpdateCourseParams struct {
	ID          int64
	Title       string
	Description string
	ImageUrl    pgtype.Text
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) error {
	_, err := q.db.Exec(ctx, updateCourse,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
	)
	return err
}
