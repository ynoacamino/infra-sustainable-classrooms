// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sections.sql

package textdb

import (
	"context"
)

const createSection = `-- name: CreateSection :exec
INSERT INTO sections (course_id, title, description, "order")
VALUES ($1, $2, $3, $4)
`

type CreateSectionParams struct {
	CourseID    int64
	Title       string
	Description string
	Order       int32
}

func (q *Queries) CreateSection(ctx context.Context, arg CreateSectionParams) error {
	_, err := q.db.Exec(ctx, createSection,
		arg.CourseID,
		arg.Title,
		arg.Description,
		arg.Order,
	)
	return err
}

const deleteSection = `-- name: DeleteSection :exec
DELETE FROM sections WHERE id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSection, id)
	return err
}

const getNextOrderForCourse = `-- name: GetNextOrderForCourse :one
SELECT COALESCE(MAX("order"), 0) + 1 FROM sections WHERE course_id = $1
`

func (q *Queries) GetNextOrderForCourse(ctx context.Context, courseID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getNextOrderForCourse, courseID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getSection = `-- name: GetSection :one
SELECT id, course_id, title, description, "order", created_at, updated_at FROM sections WHERE id = $1
`

func (q *Queries) GetSection(ctx context.Context, id int64) (Section, error) {
	row := q.db.QueryRow(ctx, getSection, id)
	var i Section
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.Order,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSectionsByCourse = `-- name: ListSectionsByCourse :many
SELECT id, course_id, title, description, "order", created_at, updated_at FROM sections WHERE course_id = $1 ORDER BY "order" ASC
`

func (q *Queries) ListSectionsByCourse(ctx context.Context, courseID int64) ([]Section, error) {
	rows, err := q.db.Query(ctx, listSectionsByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Title,
			&i.Description,
			&i.Order,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSection = `-- name: UpdateSection :exec
UPDATE sections
SET title = COALESCE($2, title),
    description = COALESCE($3, description),
    "order" = COALESCE($4, "order"),
    updated_at = NOW()
WHERE id = $1
`

type UpdateSectionParams struct {
	ID          int64
	Title       string
	Description string
	Order       int32
}

func (q *Queries) UpdateSection(ctx context.Context, arg UpdateSectionParams) error {
	_, err := q.db.Exec(ctx, updateSection,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Order,
	)
	return err
}
