// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text service
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package text

import (
	"context"
)

// Course management service for text-based learning, with sections and
// articles. Only teachers can create, update, or delete content. All endpoints
// require session_token via cookie.
type Service interface {
	// Create a new text-based course (teachers only)
	CreateCourse(context.Context, *CreateCoursePayload) (res *SimpleResponse, err error)
	// Retrieve course details by ID
	GetCourse(context.Context, *GetCoursePayload) (res *Course, err error)
	// List all available courses
	ListCourses(context.Context, *ListCoursesPayload) (res []*Course, err error)
	// Delete a course by ID (teachers only)
	DeleteCourse(context.Context, *DeleteCoursePayload) (res *SimpleResponse, err error)
	// Update course details by ID (teachers only)
	UpdateCourse(context.Context, *UpdateCoursePayload) (res *SimpleResponse, err error)
	// Create a new section in a course (teachers only)
	CreateSection(context.Context, *CreateSectionPayload) (res *SimpleResponse, err error)
	// Get section details by ID
	GetSection(context.Context, *GetSectionPayload) (res *Section, err error)
	// List all sections for a course
	ListSections(context.Context, *ListSectionsPayload) (res []*Section, err error)
	// Update section details (teachers only)
	UpdateSection(context.Context, *UpdateSectionPayload) (res *SimpleResponse, err error)
	// Delete a section (teachers only)
	DeleteSection(context.Context, *DeleteSectionPayload) (res *SimpleResponse, err error)
	// Create a new article in a section (teachers only)
	CreateArticle(context.Context, *CreateArticlePayload) (res *SimpleResponse, err error)
	// Get article details by ID
	GetArticle(context.Context, *GetArticlePayload) (res *Article, err error)
	// List all articles for a section
	ListArticles(context.Context, *ListArticlesPayload) (res []*Article, err error)
	// Update article details (teachers only)
	UpdateArticle(context.Context, *UpdateArticlePayload) (res *SimpleResponse, err error)
	// Delete an article (teachers only)
	DeleteArticle(context.Context, *DeleteArticlePayload) (res *SimpleResponse, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "text"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "text"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [15]string{"CreateCourse", "GetCourse", "ListCourses", "DeleteCourse", "UpdateCourse", "CreateSection", "GetSection", "ListSections", "UpdateSection", "DeleteSection", "CreateArticle", "GetArticle", "ListArticles", "UpdateArticle", "DeleteArticle"}

// Article is the result type of the text service GetArticle method.
type Article struct {
	// Unique identifier for the article
	ID int64
	// ID of the parent section
	SectionID int64
	// Title of the article
	Title string
	// Content of the article
	Content string
	// Timestamp when the article was created (milliseconds since epoch)
	CreatedAt int64
	// Timestamp when the article was last updated (milliseconds since epoch)
	UpdatedAt int64
}

// Course is the result type of the text service GetCourse method.
type Course struct {
	// Unique identifier for the course
	ID int64
	// Title of the course
	Title string
	// Description of the course
	Description string
	// URL of the course image
	ImageURL *string
	// Timestamp when the course was created (milliseconds since epoch)
	CreatedAt int64
	// Timestamp when the course was last updated (milliseconds since epoch)
	UpdatedAt int64
}

// CreateArticlePayload is the payload type of the text service CreateArticle
// method.
type CreateArticlePayload struct {
	// Authentication session token
	SessionToken string
	// Section unique identifier
	SectionID int64
	// Article title
	Title string
	// Article content
	Content string
}

// CreateCoursePayload is the payload type of the text service CreateCourse
// method.
type CreateCoursePayload struct {
	// Authentication session token
	SessionToken string
	// Course title
	Title string
	// Course description
	Description string
	// Course image URL
	ImageURL *string
}

// CreateSectionPayload is the payload type of the text service CreateSection
// method.
type CreateSectionPayload struct {
	// Authentication session token
	SessionToken string
	// Course unique identifier
	CourseID int64
	// Section title
	Title string
	// Section description
	Description string
	// Order of the section in the course (optional, if not set it will be
	// auto-numbered)
	Order *int64
}

// DeleteArticlePayload is the payload type of the text service DeleteArticle
// method.
type DeleteArticlePayload struct {
	// Authentication session token
	SessionToken string
	// Article unique identifier
	ArticleID int64
}

// DeleteCoursePayload is the payload type of the text service DeleteCourse
// method.
type DeleteCoursePayload struct {
	// Authentication session token
	SessionToken string
	// Course unique identifier
	CourseID int64
}

// DeleteSectionPayload is the payload type of the text service DeleteSection
// method.
type DeleteSectionPayload struct {
	// Authentication session token
	SessionToken string
	// Section unique identifier
	SectionID int64
}

// GetArticlePayload is the payload type of the text service GetArticle method.
type GetArticlePayload struct {
	// Authentication session token
	SessionToken string
	// Article unique identifier
	ArticleID int64
}

// GetCoursePayload is the payload type of the text service GetCourse method.
type GetCoursePayload struct {
	// Authentication session token
	SessionToken string
	// Course unique identifier
	CourseID int64
}

// GetSectionPayload is the payload type of the text service GetSection method.
type GetSectionPayload struct {
	// Authentication session token
	SessionToken string
	// Section unique identifier
	SectionID int64
}

// ListArticlesPayload is the payload type of the text service ListArticles
// method.
type ListArticlesPayload struct {
	// Authentication session token
	SessionToken string
	// Section unique identifier
	SectionID int64
}

// ListCoursesPayload is the payload type of the text service ListCourses
// method.
type ListCoursesPayload struct {
	// Authentication session token
	SessionToken string
}

// ListSectionsPayload is the payload type of the text service ListSections
// method.
type ListSectionsPayload struct {
	// Authentication session token
	SessionToken string
	// Course unique identifier
	CourseID int64
}

// Section is the result type of the text service GetSection method.
type Section struct {
	// Unique identifier for the section
	ID int64
	// ID of the parent course
	CourseID int64
	// Title of the section
	Title string
	// Description of the section
	Description string
	// Order of the section in the course (autonumbered for frontend rendering)
	Order int64
	// Timestamp when the section was created (milliseconds since epoch)
	CreatedAt int64
	// Timestamp when the section was last updated (milliseconds since epoch)
	UpdatedAt int64
}

// SimpleResponse is the result type of the text service CreateCourse method.
type SimpleResponse struct {
	// Operation success status
	Success bool
	// Response message
	Message string
}

// UpdateArticlePayload is the payload type of the text service UpdateArticle
// method.
type UpdateArticlePayload struct {
	// Authentication session token
	SessionToken string
	// Article unique identifier
	ArticleID int64
	// Article title
	Title *string
	// Article content
	Content *string
}

// UpdateCoursePayload is the payload type of the text service UpdateCourse
// method.
type UpdateCoursePayload struct {
	// Authentication session token
	SessionToken string
	// Course unique identifier
	CourseID int64
	// Course title
	Title *string
	// Course description
	Description *string
	// Course image URL
	ImageURL *string
}

// UpdateSectionPayload is the payload type of the text service UpdateSection
// method.
type UpdateSectionPayload struct {
	// Authentication session token
	SessionToken string
	// Section unique identifier
	SectionID int64
	// Section title
	Title *string
	// Section description
	Description *string
	// Order of the section in the course (optional, if set will update the order)
	Order *int64
}

// Internal server error
type InternalError string

// Invalid input parameters
type InvalidInput string

// Resource not found
type NotFound string

// Permission denied (only teachers)
type PermissionDenied string

// Too many requests
type RateLimited string

// Service temporarily unavailable
type ServiceUnavailable string

// Unauthorized access
type Unauthorized string

// Error returns an error description.
func (e InternalError) Error() string {
	return "Internal server error"
}

// ErrorName returns "internal_error".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InternalError) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal_error".
func (e InternalError) GoaErrorName() string {
	return "internal_error"
}

// Error returns an error description.
func (e InvalidInput) Error() string {
	return "Invalid input parameters"
}

// ErrorName returns "invalid_input".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidInput) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_input".
func (e InvalidInput) GoaErrorName() string {
	return "invalid_input"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Resource not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e PermissionDenied) Error() string {
	return "Permission denied (only teachers)"
}

// ErrorName returns "permission_denied".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e PermissionDenied) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "permission_denied".
func (e PermissionDenied) GoaErrorName() string {
	return "permission_denied"
}

// Error returns an error description.
func (e RateLimited) Error() string {
	return "Too many requests"
}

// ErrorName returns "rate_limited".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e RateLimited) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "rate_limited".
func (e RateLimited) GoaErrorName() string {
	return "rate_limited"
}

// Error returns an error description.
func (e ServiceUnavailable) Error() string {
	return "Service temporarily unavailable"
}

// ErrorName returns "service_unavailable".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e ServiceUnavailable) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "service_unavailable".
func (e ServiceUnavailable) GoaErrorName() string {
	return "service_unavailable"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Unauthorized access"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
