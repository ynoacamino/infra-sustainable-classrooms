// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text HTTP client types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package client

import (
	text "github.com/ynoacamino/infra-sustainable-classrooms/services/text/gen/text"
	goa "goa.design/goa/v3/pkg"
)

// CreateCourseRequestBody is the type of the "text" service "CreateCourse"
// endpoint HTTP request body.
type CreateCourseRequestBody struct {
	// Course title
	Title string `form:"title" json:"title" xml:"title"`
	// Course description
	Description string `form:"description" json:"description" xml:"description"`
	// Course image URL
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

// UpdateCourseRequestBody is the type of the "text" service "UpdateCourse"
// endpoint HTTP request body.
type UpdateCourseRequestBody struct {
	// Course title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Course description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Course image URL
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

// CreateSectionRequestBody is the type of the "text" service "CreateSection"
// endpoint HTTP request body.
type CreateSectionRequestBody struct {
	// Section title
	Title string `form:"title" json:"title" xml:"title"`
	// Section description
	Description string `form:"description" json:"description" xml:"description"`
	// Order of the section in the course (optional, if not set it will be
	// auto-numbered)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// UpdateSectionRequestBody is the type of the "text" service "UpdateSection"
// endpoint HTTP request body.
type UpdateSectionRequestBody struct {
	// Section title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Section description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Order of the section in the course (optional, if set will update the order)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// CreateArticleRequestBody is the type of the "text" service "CreateArticle"
// endpoint HTTP request body.
type CreateArticleRequestBody struct {
	// Article title
	Title string `form:"title" json:"title" xml:"title"`
	// Article content
	Content string `form:"content" json:"content" xml:"content"`
}

// UpdateArticleRequestBody is the type of the "text" service "UpdateArticle"
// endpoint HTTP request body.
type UpdateArticleRequestBody struct {
	// Article title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Article content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// CreateCourseResponseBody is the type of the "text" service "CreateCourse"
// endpoint HTTP response body.
type CreateCourseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetCourseResponseBody is the type of the "text" service "GetCourse" endpoint
// HTTP response body.
type GetCourseResponseBody struct {
	// Unique identifier for the course
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the course
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the course
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// URL of the course image
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	// Timestamp when the course was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the course was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListCoursesResponseBody is the type of the "text" service "ListCourses"
// endpoint HTTP response body.
type ListCoursesResponseBody []*CourseResponse

// DeleteCourseResponseBody is the type of the "text" service "DeleteCourse"
// endpoint HTTP response body.
type DeleteCourseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateCourseResponseBody is the type of the "text" service "UpdateCourse"
// endpoint HTTP response body.
type UpdateCourseResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateSectionResponseBody is the type of the "text" service "CreateSection"
// endpoint HTTP response body.
type CreateSectionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetSectionResponseBody is the type of the "text" service "GetSection"
// endpoint HTTP response body.
type GetSectionResponseBody struct {
	// Unique identifier for the section
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the parent course
	CourseID *int64 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Title of the section
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the section
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Order of the section in the course (autonumbered for frontend rendering)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Timestamp when the section was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the section was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListSectionsResponseBody is the type of the "text" service "ListSections"
// endpoint HTTP response body.
type ListSectionsResponseBody []*SectionResponse

// UpdateSectionResponseBody is the type of the "text" service "UpdateSection"
// endpoint HTTP response body.
type UpdateSectionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteSectionResponseBody is the type of the "text" service "DeleteSection"
// endpoint HTTP response body.
type DeleteSectionResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateArticleResponseBody is the type of the "text" service "CreateArticle"
// endpoint HTTP response body.
type CreateArticleResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetArticleResponseBody is the type of the "text" service "GetArticle"
// endpoint HTTP response body.
type GetArticleResponseBody struct {
	// Unique identifier for the article
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the parent section
	SectionID *int64 `form:"section_id,omitempty" json:"section_id,omitempty" xml:"section_id,omitempty"`
	// Title of the article
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Content of the article
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Timestamp when the article was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the article was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListArticlesResponseBody is the type of the "text" service "ListArticles"
// endpoint HTTP response body.
type ListArticlesResponseBody []*ArticleResponse

// UpdateArticleResponseBody is the type of the "text" service "UpdateArticle"
// endpoint HTTP response body.
type UpdateArticleResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteArticleResponseBody is the type of the "text" service "DeleteArticle"
// endpoint HTTP response body.
type DeleteArticleResponseBody struct {
	// Operation success status
	Success *bool `form:"success,omitempty" json:"success,omitempty" xml:"success,omitempty"`
	// Response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CourseResponse is used to define fields on response body types.
type CourseResponse struct {
	// Unique identifier for the course
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title of the course
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the course
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// URL of the course image
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	// Timestamp when the course was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the course was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// SectionResponse is used to define fields on response body types.
type SectionResponse struct {
	// Unique identifier for the section
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the parent course
	CourseID *int64 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Title of the section
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Description of the section
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Order of the section in the course (autonumbered for frontend rendering)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
	// Timestamp when the section was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the section was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ArticleResponse is used to define fields on response body types.
type ArticleResponse struct {
	// Unique identifier for the article
	ID *int64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the parent section
	SectionID *int64 `form:"section_id,omitempty" json:"section_id,omitempty" xml:"section_id,omitempty"`
	// Title of the article
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Content of the article
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Timestamp when the article was created (milliseconds since epoch)
	CreatedAt *int64 `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Timestamp when the article was last updated (milliseconds since epoch)
	UpdatedAt *int64 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateCourseRequestBody builds the HTTP request body from the payload of
// the "CreateCourse" endpoint of the "text" service.
func NewCreateCourseRequestBody(p *text.CreateCoursePayload) *CreateCourseRequestBody {
	body := &CreateCourseRequestBody{
		Title:       p.Title,
		Description: p.Description,
		ImageURL:    p.ImageURL,
	}
	return body
}

// NewUpdateCourseRequestBody builds the HTTP request body from the payload of
// the "UpdateCourse" endpoint of the "text" service.
func NewUpdateCourseRequestBody(p *text.UpdateCoursePayload) *UpdateCourseRequestBody {
	body := &UpdateCourseRequestBody{
		Title:       p.Title,
		Description: p.Description,
		ImageURL:    p.ImageURL,
	}
	return body
}

// NewCreateSectionRequestBody builds the HTTP request body from the payload of
// the "CreateSection" endpoint of the "text" service.
func NewCreateSectionRequestBody(p *text.CreateSectionPayload) *CreateSectionRequestBody {
	body := &CreateSectionRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Order:       p.Order,
	}
	return body
}

// NewUpdateSectionRequestBody builds the HTTP request body from the payload of
// the "UpdateSection" endpoint of the "text" service.
func NewUpdateSectionRequestBody(p *text.UpdateSectionPayload) *UpdateSectionRequestBody {
	body := &UpdateSectionRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Order:       p.Order,
	}
	return body
}

// NewCreateArticleRequestBody builds the HTTP request body from the payload of
// the "CreateArticle" endpoint of the "text" service.
func NewCreateArticleRequestBody(p *text.CreateArticlePayload) *CreateArticleRequestBody {
	body := &CreateArticleRequestBody{
		Title:   p.Title,
		Content: p.Content,
	}
	return body
}

// NewUpdateArticleRequestBody builds the HTTP request body from the payload of
// the "UpdateArticle" endpoint of the "text" service.
func NewUpdateArticleRequestBody(p *text.UpdateArticlePayload) *UpdateArticleRequestBody {
	body := &UpdateArticleRequestBody{
		Title:   p.Title,
		Content: p.Content,
	}
	return body
}

// NewCreateCourseSimpleResponseCreated builds a "text" service "CreateCourse"
// endpoint result from a HTTP "Created" response.
func NewCreateCourseSimpleResponseCreated(body *CreateCourseResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateCourseInternalError builds a text service CreateCourse endpoint
// internal_error error.
func NewCreateCourseInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewCreateCourseInvalidInput builds a text service CreateCourse endpoint
// invalid_input error.
func NewCreateCourseInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewCreateCoursePermissionDenied builds a text service CreateCourse endpoint
// permission_denied error.
func NewCreateCoursePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewCreateCourseServiceUnavailable builds a text service CreateCourse
// endpoint service_unavailable error.
func NewCreateCourseServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewCreateCourseUnauthorized builds a text service CreateCourse endpoint
// unauthorized error.
func NewCreateCourseUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewGetCourseCourseOK builds a "text" service "GetCourse" endpoint result
// from a HTTP "OK" response.
func NewGetCourseCourseOK(body *GetCourseResponseBody) *text.Course {
	v := &text.Course{
		ID:          *body.ID,
		Title:       *body.Title,
		Description: *body.Description,
		ImageURL:    body.ImageURL,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewGetCourseInternalError builds a text service GetCourse endpoint
// internal_error error.
func NewGetCourseInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewGetCourseInvalidInput builds a text service GetCourse endpoint
// invalid_input error.
func NewGetCourseInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewGetCourseNotFound builds a text service GetCourse endpoint not_found
// error.
func NewGetCourseNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewGetCourseServiceUnavailable builds a text service GetCourse endpoint
// service_unavailable error.
func NewGetCourseServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewGetCourseUnauthorized builds a text service GetCourse endpoint
// unauthorized error.
func NewGetCourseUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewListCoursesCourseOK builds a "text" service "ListCourses" endpoint result
// from a HTTP "OK" response.
func NewListCoursesCourseOK(body []*CourseResponse) []*text.Course {
	v := make([]*text.Course, len(body))
	for i, val := range body {
		v[i] = unmarshalCourseResponseToTextCourse(val)
	}

	return v
}

// NewListCoursesInternalError builds a text service ListCourses endpoint
// internal_error error.
func NewListCoursesInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewListCoursesServiceUnavailable builds a text service ListCourses endpoint
// service_unavailable error.
func NewListCoursesServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewListCoursesUnauthorized builds a text service ListCourses endpoint
// unauthorized error.
func NewListCoursesUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewDeleteCourseSimpleResponseOK builds a "text" service "DeleteCourse"
// endpoint result from a HTTP "OK" response.
func NewDeleteCourseSimpleResponseOK(body *DeleteCourseResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteCourseInternalError builds a text service DeleteCourse endpoint
// internal_error error.
func NewDeleteCourseInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewDeleteCourseInvalidInput builds a text service DeleteCourse endpoint
// invalid_input error.
func NewDeleteCourseInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewDeleteCourseNotFound builds a text service DeleteCourse endpoint
// not_found error.
func NewDeleteCourseNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewDeleteCoursePermissionDenied builds a text service DeleteCourse endpoint
// permission_denied error.
func NewDeleteCoursePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewDeleteCourseServiceUnavailable builds a text service DeleteCourse
// endpoint service_unavailable error.
func NewDeleteCourseServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewDeleteCourseUnauthorized builds a text service DeleteCourse endpoint
// unauthorized error.
func NewDeleteCourseUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewUpdateCourseSimpleResponseOK builds a "text" service "UpdateCourse"
// endpoint result from a HTTP "OK" response.
func NewUpdateCourseSimpleResponseOK(body *UpdateCourseResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateCourseInternalError builds a text service UpdateCourse endpoint
// internal_error error.
func NewUpdateCourseInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewUpdateCourseInvalidInput builds a text service UpdateCourse endpoint
// invalid_input error.
func NewUpdateCourseInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewUpdateCourseNotFound builds a text service UpdateCourse endpoint
// not_found error.
func NewUpdateCourseNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewUpdateCoursePermissionDenied builds a text service UpdateCourse endpoint
// permission_denied error.
func NewUpdateCoursePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewUpdateCourseServiceUnavailable builds a text service UpdateCourse
// endpoint service_unavailable error.
func NewUpdateCourseServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewUpdateCourseUnauthorized builds a text service UpdateCourse endpoint
// unauthorized error.
func NewUpdateCourseUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewCreateSectionSimpleResponseCreated builds a "text" service
// "CreateSection" endpoint result from a HTTP "Created" response.
func NewCreateSectionSimpleResponseCreated(body *CreateSectionResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateSectionInternalError builds a text service CreateSection endpoint
// internal_error error.
func NewCreateSectionInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewCreateSectionInvalidInput builds a text service CreateSection endpoint
// invalid_input error.
func NewCreateSectionInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewCreateSectionNotFound builds a text service CreateSection endpoint
// not_found error.
func NewCreateSectionNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewCreateSectionPermissionDenied builds a text service CreateSection
// endpoint permission_denied error.
func NewCreateSectionPermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewCreateSectionServiceUnavailable builds a text service CreateSection
// endpoint service_unavailable error.
func NewCreateSectionServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewCreateSectionUnauthorized builds a text service CreateSection endpoint
// unauthorized error.
func NewCreateSectionUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewGetSectionSectionOK builds a "text" service "GetSection" endpoint result
// from a HTTP "OK" response.
func NewGetSectionSectionOK(body *GetSectionResponseBody) *text.Section {
	v := &text.Section{
		ID:          *body.ID,
		CourseID:    *body.CourseID,
		Title:       *body.Title,
		Description: *body.Description,
		Order:       *body.Order,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewGetSectionInternalError builds a text service GetSection endpoint
// internal_error error.
func NewGetSectionInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewGetSectionInvalidInput builds a text service GetSection endpoint
// invalid_input error.
func NewGetSectionInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewGetSectionNotFound builds a text service GetSection endpoint not_found
// error.
func NewGetSectionNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewGetSectionServiceUnavailable builds a text service GetSection endpoint
// service_unavailable error.
func NewGetSectionServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewGetSectionUnauthorized builds a text service GetSection endpoint
// unauthorized error.
func NewGetSectionUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewListSectionsSectionOK builds a "text" service "ListSections" endpoint
// result from a HTTP "OK" response.
func NewListSectionsSectionOK(body []*SectionResponse) []*text.Section {
	v := make([]*text.Section, len(body))
	for i, val := range body {
		v[i] = unmarshalSectionResponseToTextSection(val)
	}

	return v
}

// NewListSectionsInternalError builds a text service ListSections endpoint
// internal_error error.
func NewListSectionsInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewListSectionsNotFound builds a text service ListSections endpoint
// not_found error.
func NewListSectionsNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewListSectionsServiceUnavailable builds a text service ListSections
// endpoint service_unavailable error.
func NewListSectionsServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewListSectionsUnauthorized builds a text service ListSections endpoint
// unauthorized error.
func NewListSectionsUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewUpdateSectionSimpleResponseOK builds a "text" service "UpdateSection"
// endpoint result from a HTTP "OK" response.
func NewUpdateSectionSimpleResponseOK(body *UpdateSectionResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateSectionInternalError builds a text service UpdateSection endpoint
// internal_error error.
func NewUpdateSectionInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewUpdateSectionInvalidInput builds a text service UpdateSection endpoint
// invalid_input error.
func NewUpdateSectionInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewUpdateSectionNotFound builds a text service UpdateSection endpoint
// not_found error.
func NewUpdateSectionNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewUpdateSectionPermissionDenied builds a text service UpdateSection
// endpoint permission_denied error.
func NewUpdateSectionPermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewUpdateSectionServiceUnavailable builds a text service UpdateSection
// endpoint service_unavailable error.
func NewUpdateSectionServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewUpdateSectionUnauthorized builds a text service UpdateSection endpoint
// unauthorized error.
func NewUpdateSectionUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewDeleteSectionSimpleResponseOK builds a "text" service "DeleteSection"
// endpoint result from a HTTP "OK" response.
func NewDeleteSectionSimpleResponseOK(body *DeleteSectionResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteSectionInternalError builds a text service DeleteSection endpoint
// internal_error error.
func NewDeleteSectionInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewDeleteSectionInvalidInput builds a text service DeleteSection endpoint
// invalid_input error.
func NewDeleteSectionInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewDeleteSectionNotFound builds a text service DeleteSection endpoint
// not_found error.
func NewDeleteSectionNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewDeleteSectionPermissionDenied builds a text service DeleteSection
// endpoint permission_denied error.
func NewDeleteSectionPermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewDeleteSectionServiceUnavailable builds a text service DeleteSection
// endpoint service_unavailable error.
func NewDeleteSectionServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewDeleteSectionUnauthorized builds a text service DeleteSection endpoint
// unauthorized error.
func NewDeleteSectionUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewCreateArticleSimpleResponseCreated builds a "text" service
// "CreateArticle" endpoint result from a HTTP "Created" response.
func NewCreateArticleSimpleResponseCreated(body *CreateArticleResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewCreateArticleInternalError builds a text service CreateArticle endpoint
// internal_error error.
func NewCreateArticleInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewCreateArticleInvalidInput builds a text service CreateArticle endpoint
// invalid_input error.
func NewCreateArticleInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewCreateArticleNotFound builds a text service CreateArticle endpoint
// not_found error.
func NewCreateArticleNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewCreateArticlePermissionDenied builds a text service CreateArticle
// endpoint permission_denied error.
func NewCreateArticlePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewCreateArticleServiceUnavailable builds a text service CreateArticle
// endpoint service_unavailable error.
func NewCreateArticleServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewCreateArticleUnauthorized builds a text service CreateArticle endpoint
// unauthorized error.
func NewCreateArticleUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewGetArticleArticleOK builds a "text" service "GetArticle" endpoint result
// from a HTTP "OK" response.
func NewGetArticleArticleOK(body *GetArticleResponseBody) *text.Article {
	v := &text.Article{
		ID:        *body.ID,
		SectionID: *body.SectionID,
		Title:     *body.Title,
		Content:   *body.Content,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: *body.UpdatedAt,
	}

	return v
}

// NewGetArticleInternalError builds a text service GetArticle endpoint
// internal_error error.
func NewGetArticleInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewGetArticleInvalidInput builds a text service GetArticle endpoint
// invalid_input error.
func NewGetArticleInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewGetArticleNotFound builds a text service GetArticle endpoint not_found
// error.
func NewGetArticleNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewGetArticleServiceUnavailable builds a text service GetArticle endpoint
// service_unavailable error.
func NewGetArticleServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewGetArticleUnauthorized builds a text service GetArticle endpoint
// unauthorized error.
func NewGetArticleUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewListArticlesArticleOK builds a "text" service "ListArticles" endpoint
// result from a HTTP "OK" response.
func NewListArticlesArticleOK(body []*ArticleResponse) []*text.Article {
	v := make([]*text.Article, len(body))
	for i, val := range body {
		v[i] = unmarshalArticleResponseToTextArticle(val)
	}

	return v
}

// NewListArticlesInternalError builds a text service ListArticles endpoint
// internal_error error.
func NewListArticlesInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewListArticlesNotFound builds a text service ListArticles endpoint
// not_found error.
func NewListArticlesNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewListArticlesServiceUnavailable builds a text service ListArticles
// endpoint service_unavailable error.
func NewListArticlesServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewListArticlesUnauthorized builds a text service ListArticles endpoint
// unauthorized error.
func NewListArticlesUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewUpdateArticleSimpleResponseOK builds a "text" service "UpdateArticle"
// endpoint result from a HTTP "OK" response.
func NewUpdateArticleSimpleResponseOK(body *UpdateArticleResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewUpdateArticleInternalError builds a text service UpdateArticle endpoint
// internal_error error.
func NewUpdateArticleInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewUpdateArticleInvalidInput builds a text service UpdateArticle endpoint
// invalid_input error.
func NewUpdateArticleInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewUpdateArticleNotFound builds a text service UpdateArticle endpoint
// not_found error.
func NewUpdateArticleNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewUpdateArticlePermissionDenied builds a text service UpdateArticle
// endpoint permission_denied error.
func NewUpdateArticlePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewUpdateArticleServiceUnavailable builds a text service UpdateArticle
// endpoint service_unavailable error.
func NewUpdateArticleServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewUpdateArticleUnauthorized builds a text service UpdateArticle endpoint
// unauthorized error.
func NewUpdateArticleUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// NewDeleteArticleSimpleResponseOK builds a "text" service "DeleteArticle"
// endpoint result from a HTTP "OK" response.
func NewDeleteArticleSimpleResponseOK(body *DeleteArticleResponseBody) *text.SimpleResponse {
	v := &text.SimpleResponse{
		Success: *body.Success,
		Message: *body.Message,
	}

	return v
}

// NewDeleteArticleInternalError builds a text service DeleteArticle endpoint
// internal_error error.
func NewDeleteArticleInternalError(body string) text.InternalError {
	v := text.InternalError(body)

	return v
}

// NewDeleteArticleInvalidInput builds a text service DeleteArticle endpoint
// invalid_input error.
func NewDeleteArticleInvalidInput(body string) text.InvalidInput {
	v := text.InvalidInput(body)

	return v
}

// NewDeleteArticleNotFound builds a text service DeleteArticle endpoint
// not_found error.
func NewDeleteArticleNotFound(body string) text.NotFound {
	v := text.NotFound(body)

	return v
}

// NewDeleteArticlePermissionDenied builds a text service DeleteArticle
// endpoint permission_denied error.
func NewDeleteArticlePermissionDenied(body string) text.PermissionDenied {
	v := text.PermissionDenied(body)

	return v
}

// NewDeleteArticleServiceUnavailable builds a text service DeleteArticle
// endpoint service_unavailable error.
func NewDeleteArticleServiceUnavailable(body string) text.ServiceUnavailable {
	v := text.ServiceUnavailable(body)

	return v
}

// NewDeleteArticleUnauthorized builds a text service DeleteArticle endpoint
// unauthorized error.
func NewDeleteArticleUnauthorized(body string) text.Unauthorized {
	v := text.Unauthorized(body)

	return v
}

// ValidateCreateCourseResponseBody runs the validations defined on
// CreateCourseResponseBody
func ValidateCreateCourseResponseBody(body *CreateCourseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetCourseResponseBody runs the validations defined on
// GetCourseResponseBody
func ValidateGetCourseResponseBody(body *GetCourseResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateDeleteCourseResponseBody runs the validations defined on
// DeleteCourseResponseBody
func ValidateDeleteCourseResponseBody(body *DeleteCourseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateCourseResponseBody runs the validations defined on
// UpdateCourseResponseBody
func ValidateUpdateCourseResponseBody(body *UpdateCourseResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateSectionResponseBody runs the validations defined on
// CreateSectionResponseBody
func ValidateCreateSectionResponseBody(body *CreateSectionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetSectionResponseBody runs the validations defined on
// GetSectionResponseBody
func ValidateGetSectionResponseBody(body *GetSectionResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Order != nil {
		if *body.Order < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.order", *body.Order, 1, true))
		}
	}
	return
}

// ValidateUpdateSectionResponseBody runs the validations defined on
// UpdateSectionResponseBody
func ValidateUpdateSectionResponseBody(body *UpdateSectionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteSectionResponseBody runs the validations defined on
// DeleteSectionResponseBody
func ValidateDeleteSectionResponseBody(body *DeleteSectionResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateArticleResponseBody runs the validations defined on
// CreateArticleResponseBody
func ValidateCreateArticleResponseBody(body *CreateArticleResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetArticleResponseBody runs the validations defined on
// GetArticleResponseBody
func ValidateGetArticleResponseBody(body *GetArticleResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.SectionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("section_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateUpdateArticleResponseBody runs the validations defined on
// UpdateArticleResponseBody
func ValidateUpdateArticleResponseBody(body *UpdateArticleResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteArticleResponseBody runs the validations defined on
// DeleteArticleResponseBody
func ValidateDeleteArticleResponseBody(body *DeleteArticleResponseBody) (err error) {
	if body.Success == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("success", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCourseResponse runs the validations defined on CourseResponse
func ValidateCourseResponse(body *CourseResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateSectionResponse runs the validations defined on SectionResponse
func ValidateSectionResponse(body *SectionResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Order == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("order", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.Order != nil {
		if *body.Order < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.order", *body.Order, 1, true))
		}
	}
	return
}

// ValidateArticleResponse runs the validations defined on ArticleResponse
func ValidateArticleResponse(body *ArticleResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.SectionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("section_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}
