// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	text "github.com/ynoacamino/infra-sustainable-classrooms/services/text/gen/text"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateCourseRequest instantiates a HTTP request object with method and
// path set to call the "text" service "CreateCourse" endpoint
func (c *Client) BuildCreateCourseRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCourseTextPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "CreateCourse", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCourseRequest returns an encoder for requests sent to the text
// CreateCourse server.
func EncodeCreateCourseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.CreateCoursePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "CreateCourse", "*text.CreateCoursePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateCourseRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "CreateCourse", err)
		}
		return nil
	}
}

// DecodeCreateCourseResponse returns a decoder for responses returned by the
// text CreateCourse endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateCourseResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateCourseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCourseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			err = ValidateCreateCourseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "CreateCourse", err)
			}
			res := NewCreateCourseSimpleResponseCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			return nil, NewCreateCourseInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			return nil, NewCreateCourseInvalidInput(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			return nil, NewCreateCoursePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			return nil, NewCreateCourseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateCourse", err)
			}
			return nil, NewCreateCourseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "CreateCourse", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCourseRequest instantiates a HTTP request object with method and
// path set to call the "text" service "GetCourse" endpoint
func (c *Client) BuildGetCourseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		courseID int64
	)
	{
		p, ok := v.(*text.GetCoursePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "GetCourse", "*text.GetCoursePayload", v)
		}
		courseID = p.CourseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCourseTextPath(courseID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "GetCourse", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCourseRequest returns an encoder for requests sent to the text
// GetCourse server.
func EncodeGetCourseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.GetCoursePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "GetCourse", "*text.GetCoursePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetCourseResponse returns a decoder for responses returned by the text
// GetCourse endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeGetCourseResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetCourseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCourseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			err = ValidateGetCourseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "GetCourse", err)
			}
			res := NewGetCourseCourseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			return nil, NewGetCourseInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			return nil, NewGetCourseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			return nil, NewGetCourseNotFound(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			return nil, NewGetCourseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetCourse", err)
			}
			return nil, NewGetCourseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "GetCourse", resp.StatusCode, string(body))
		}
	}
}

// BuildListCoursesRequest instantiates a HTTP request object with method and
// path set to call the "text" service "ListCourses" endpoint
func (c *Client) BuildListCoursesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListCoursesTextPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "ListCourses", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListCoursesRequest returns an encoder for requests sent to the text
// ListCourses server.
func EncodeListCoursesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.ListCoursesPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "ListCourses", "*text.ListCoursesPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeListCoursesResponse returns a decoder for responses returned by the
// text ListCourses endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListCoursesResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListCoursesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListCoursesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListCourses", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCourseResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "ListCourses", err)
			}
			res := NewListCoursesCourseOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListCourses", err)
			}
			return nil, NewListCoursesInternalError(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListCourses", err)
			}
			return nil, NewListCoursesServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListCourses", err)
			}
			return nil, NewListCoursesUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "ListCourses", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCourseRequest instantiates a HTTP request object with method and
// path set to call the "text" service "DeleteCourse" endpoint
func (c *Client) BuildDeleteCourseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		courseID int64
	)
	{
		p, ok := v.(*text.DeleteCoursePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "DeleteCourse", "*text.DeleteCoursePayload", v)
		}
		courseID = p.CourseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCourseTextPath(courseID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "DeleteCourse", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCourseRequest returns an encoder for requests sent to the text
// DeleteCourse server.
func EncodeDeleteCourseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.DeleteCoursePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "DeleteCourse", "*text.DeleteCoursePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteCourseResponse returns a decoder for responses returned by the
// text DeleteCourse endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteCourseResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteCourseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteCourseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			err = ValidateDeleteCourseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "DeleteCourse", err)
			}
			res := NewDeleteCourseSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCourseInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCourseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCourseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCoursePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCourseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteCourse", err)
			}
			return nil, NewDeleteCourseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "DeleteCourse", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCourseRequest instantiates a HTTP request object with method and
// path set to call the "text" service "UpdateCourse" endpoint
func (c *Client) BuildUpdateCourseRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		courseID int64
	)
	{
		p, ok := v.(*text.UpdateCoursePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "UpdateCourse", "*text.UpdateCoursePayload", v)
		}
		courseID = p.CourseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCourseTextPath(courseID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "UpdateCourse", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCourseRequest returns an encoder for requests sent to the text
// UpdateCourse server.
func EncodeUpdateCourseRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.UpdateCoursePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "UpdateCourse", "*text.UpdateCoursePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateCourseRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "UpdateCourse", err)
		}
		return nil
	}
}

// DecodeUpdateCourseResponse returns a decoder for responses returned by the
// text UpdateCourse endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateCourseResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateCourseResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateCourseResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			err = ValidateUpdateCourseResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "UpdateCourse", err)
			}
			res := NewUpdateCourseSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCourseInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCourseInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCourseNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCoursePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCourseServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateCourse", err)
			}
			return nil, NewUpdateCourseUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "UpdateCourse", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateSectionRequest instantiates a HTTP request object with method and
// path set to call the "text" service "CreateSection" endpoint
func (c *Client) BuildCreateSectionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		courseID int64
	)
	{
		p, ok := v.(*text.CreateSectionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "CreateSection", "*text.CreateSectionPayload", v)
		}
		courseID = p.CourseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateSectionTextPath(courseID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "CreateSection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateSectionRequest returns an encoder for requests sent to the text
// CreateSection server.
func EncodeCreateSectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.CreateSectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "CreateSection", "*text.CreateSectionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateSectionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "CreateSection", err)
		}
		return nil
	}
}

// DecodeCreateSectionResponse returns a decoder for responses returned by the
// text CreateSection endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateSectionResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateSectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateSectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			err = ValidateCreateSectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "CreateSection", err)
			}
			res := NewCreateSectionSimpleResponseCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateSection", err)
			}
			return nil, NewCreateSectionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "CreateSection", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSectionRequest instantiates a HTTP request object with method and
// path set to call the "text" service "GetSection" endpoint
func (c *Client) BuildGetSectionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sectionID int64
	)
	{
		p, ok := v.(*text.GetSectionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "GetSection", "*text.GetSectionPayload", v)
		}
		sectionID = p.SectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSectionTextPath(sectionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "GetSection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetSectionRequest returns an encoder for requests sent to the text
// GetSection server.
func EncodeGetSectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.GetSectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "GetSection", "*text.GetSectionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetSectionResponse returns a decoder for responses returned by the
// text GetSection endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetSectionResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetSectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			err = ValidateGetSectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "GetSection", err)
			}
			res := NewGetSectionSectionOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			return nil, NewGetSectionInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			return nil, NewGetSectionInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			return nil, NewGetSectionNotFound(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			return nil, NewGetSectionServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetSection", err)
			}
			return nil, NewGetSectionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "GetSection", resp.StatusCode, string(body))
		}
	}
}

// BuildListSectionsRequest instantiates a HTTP request object with method and
// path set to call the "text" service "ListSections" endpoint
func (c *Client) BuildListSectionsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		courseID int64
	)
	{
		p, ok := v.(*text.ListSectionsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "ListSections", "*text.ListSectionsPayload", v)
		}
		courseID = p.CourseID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListSectionsTextPath(courseID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "ListSections", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListSectionsRequest returns an encoder for requests sent to the text
// ListSections server.
func EncodeListSectionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.ListSectionsPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "ListSections", "*text.ListSectionsPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeListSectionsResponse returns a decoder for responses returned by the
// text ListSections endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListSectionsResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListSectionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListSectionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListSections", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateSectionResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "ListSections", err)
			}
			res := NewListSectionsSectionOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListSections", err)
			}
			return nil, NewListSectionsInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListSections", err)
			}
			return nil, NewListSectionsNotFound(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListSections", err)
			}
			return nil, NewListSectionsServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListSections", err)
			}
			return nil, NewListSectionsUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "ListSections", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateSectionRequest instantiates a HTTP request object with method and
// path set to call the "text" service "UpdateSection" endpoint
func (c *Client) BuildUpdateSectionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sectionID int64
	)
	{
		p, ok := v.(*text.UpdateSectionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "UpdateSection", "*text.UpdateSectionPayload", v)
		}
		sectionID = p.SectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateSectionTextPath(sectionID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "UpdateSection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateSectionRequest returns an encoder for requests sent to the text
// UpdateSection server.
func EncodeUpdateSectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.UpdateSectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "UpdateSection", "*text.UpdateSectionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateSectionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "UpdateSection", err)
		}
		return nil
	}
}

// DecodeUpdateSectionResponse returns a decoder for responses returned by the
// text UpdateSection endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateSectionResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateSectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateSectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			err = ValidateUpdateSectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "UpdateSection", err)
			}
			res := NewUpdateSectionSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateSection", err)
			}
			return nil, NewUpdateSectionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "UpdateSection", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteSectionRequest instantiates a HTTP request object with method and
// path set to call the "text" service "DeleteSection" endpoint
func (c *Client) BuildDeleteSectionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sectionID int64
	)
	{
		p, ok := v.(*text.DeleteSectionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "DeleteSection", "*text.DeleteSectionPayload", v)
		}
		sectionID = p.SectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSectionTextPath(sectionID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "DeleteSection", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteSectionRequest returns an encoder for requests sent to the text
// DeleteSection server.
func EncodeDeleteSectionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.DeleteSectionPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "DeleteSection", "*text.DeleteSectionPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteSectionResponse returns a decoder for responses returned by the
// text DeleteSection endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteSectionResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteSectionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteSectionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			err = ValidateDeleteSectionResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "DeleteSection", err)
			}
			res := NewDeleteSectionSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionPermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteSection", err)
			}
			return nil, NewDeleteSectionUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "DeleteSection", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateArticleRequest instantiates a HTTP request object with method and
// path set to call the "text" service "CreateArticle" endpoint
func (c *Client) BuildCreateArticleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sectionID int64
	)
	{
		p, ok := v.(*text.CreateArticlePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "CreateArticle", "*text.CreateArticlePayload", v)
		}
		sectionID = p.SectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateArticleTextPath(sectionID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "CreateArticle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateArticleRequest returns an encoder for requests sent to the text
// CreateArticle server.
func EncodeCreateArticleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.CreateArticlePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "CreateArticle", "*text.CreateArticlePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewCreateArticleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "CreateArticle", err)
		}
		return nil
	}
}

// DecodeCreateArticleResponse returns a decoder for responses returned by the
// text CreateArticle endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateArticleResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateArticleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateArticleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			err = ValidateCreateArticleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "CreateArticle", err)
			}
			res := NewCreateArticleSimpleResponseCreated(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticleInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticleInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticleNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticlePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticleServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "CreateArticle", err)
			}
			return nil, NewCreateArticleUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "CreateArticle", resp.StatusCode, string(body))
		}
	}
}

// BuildGetArticleRequest instantiates a HTTP request object with method and
// path set to call the "text" service "GetArticle" endpoint
func (c *Client) BuildGetArticleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		articleID int64
	)
	{
		p, ok := v.(*text.GetArticlePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "GetArticle", "*text.GetArticlePayload", v)
		}
		articleID = p.ArticleID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetArticleTextPath(articleID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "GetArticle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetArticleRequest returns an encoder for requests sent to the text
// GetArticle server.
func EncodeGetArticleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.GetArticlePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "GetArticle", "*text.GetArticlePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeGetArticleResponse returns a decoder for responses returned by the
// text GetArticle endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetArticleResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeGetArticleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetArticleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			err = ValidateGetArticleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "GetArticle", err)
			}
			res := NewGetArticleArticleOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			return nil, NewGetArticleInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			return nil, NewGetArticleInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			return nil, NewGetArticleNotFound(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			return nil, NewGetArticleServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "GetArticle", err)
			}
			return nil, NewGetArticleUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "GetArticle", resp.StatusCode, string(body))
		}
	}
}

// BuildListArticlesRequest instantiates a HTTP request object with method and
// path set to call the "text" service "ListArticles" endpoint
func (c *Client) BuildListArticlesRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		sectionID int64
	)
	{
		p, ok := v.(*text.ListArticlesPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "ListArticles", "*text.ListArticlesPayload", v)
		}
		sectionID = p.SectionID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListArticlesTextPath(sectionID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "ListArticles", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListArticlesRequest returns an encoder for requests sent to the text
// ListArticles server.
func EncodeListArticlesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.ListArticlesPayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "ListArticles", "*text.ListArticlesPayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeListArticlesResponse returns a decoder for responses returned by the
// text ListArticles endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeListArticlesResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeListArticlesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListArticlesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListArticles", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateArticleResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "ListArticles", err)
			}
			res := NewListArticlesArticleOK(body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListArticles", err)
			}
			return nil, NewListArticlesInternalError(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListArticles", err)
			}
			return nil, NewListArticlesNotFound(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListArticles", err)
			}
			return nil, NewListArticlesServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "ListArticles", err)
			}
			return nil, NewListArticlesUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "ListArticles", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateArticleRequest instantiates a HTTP request object with method and
// path set to call the "text" service "UpdateArticle" endpoint
func (c *Client) BuildUpdateArticleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		articleID int64
	)
	{
		p, ok := v.(*text.UpdateArticlePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "UpdateArticle", "*text.UpdateArticlePayload", v)
		}
		articleID = p.ArticleID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateArticleTextPath(articleID)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "UpdateArticle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateArticleRequest returns an encoder for requests sent to the text
// UpdateArticle server.
func EncodeUpdateArticleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.UpdateArticlePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "UpdateArticle", "*text.UpdateArticlePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		body := NewUpdateArticleRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("text", "UpdateArticle", err)
		}
		return nil
	}
}

// DecodeUpdateArticleResponse returns a decoder for responses returned by the
// text UpdateArticle endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateArticleResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateArticleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateArticleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			err = ValidateUpdateArticleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "UpdateArticle", err)
			}
			res := NewUpdateArticleSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticleInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticleInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticleNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticlePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticleServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "UpdateArticle", err)
			}
			return nil, NewUpdateArticleUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "UpdateArticle", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteArticleRequest instantiates a HTTP request object with method and
// path set to call the "text" service "DeleteArticle" endpoint
func (c *Client) BuildDeleteArticleRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		articleID int64
	)
	{
		p, ok := v.(*text.DeleteArticlePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("text", "DeleteArticle", "*text.DeleteArticlePayload", v)
		}
		articleID = p.ArticleID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteArticleTextPath(articleID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("text", "DeleteArticle", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteArticleRequest returns an encoder for requests sent to the text
// DeleteArticle server.
func EncodeDeleteArticleRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*text.DeleteArticlePayload)
		if !ok {
			return goahttp.ErrInvalidType("text", "DeleteArticle", "*text.DeleteArticlePayload", v)
		}
		{
			v := p.SessionToken
			req.AddCookie(&http.Cookie{
				Name:  "session",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteArticleResponse returns a decoder for responses returned by the
// text DeleteArticle endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteArticleResponse may return the following errors:
//   - "internal_error" (type text.InternalError): http.StatusInternalServerError
//   - "invalid_input" (type text.InvalidInput): http.StatusBadRequest
//   - "not_found" (type text.NotFound): http.StatusNotFound
//   - "permission_denied" (type text.PermissionDenied): http.StatusForbidden
//   - "service_unavailable" (type text.ServiceUnavailable): http.StatusServiceUnavailable
//   - "unauthorized" (type text.Unauthorized): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteArticleResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteArticleResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			err = ValidateDeleteArticleResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("text", "DeleteArticle", err)
			}
			res := NewDeleteArticleSimpleResponseOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticleInternalError(body)
		case http.StatusBadRequest:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticleInvalidInput(body)
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticleNotFound(body)
		case http.StatusForbidden:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticlePermissionDenied(body)
		case http.StatusServiceUnavailable:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticleServiceUnavailable(body)
		case http.StatusUnauthorized:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("text", "DeleteArticle", err)
			}
			return nil, NewDeleteArticleUnauthorized(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("text", "DeleteArticle", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCourseResponseToTextCourse builds a value of type *text.Course from
// a value of type *CourseResponse.
func unmarshalCourseResponseToTextCourse(v *CourseResponse) *text.Course {
	res := &text.Course{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		ImageURL:    v.ImageURL,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}

// unmarshalSectionResponseToTextSection builds a value of type *text.Section
// from a value of type *SectionResponse.
func unmarshalSectionResponseToTextSection(v *SectionResponse) *text.Section {
	res := &text.Section{
		ID:          *v.ID,
		CourseID:    *v.CourseID,
		Title:       *v.Title,
		Description: *v.Description,
		Order:       *v.Order,
		CreatedAt:   *v.CreatedAt,
		UpdatedAt:   *v.UpdatedAt,
	}

	return res
}

// unmarshalArticleResponseToTextArticle builds a value of type *text.Article
// from a value of type *ArticleResponse.
func unmarshalArticleResponseToTextArticle(v *ArticleResponse) *text.Article {
	res := &text.Article{
		ID:        *v.ID,
		SectionID: *v.SectionID,
		Title:     *v.Title,
		Content:   *v.Content,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}
