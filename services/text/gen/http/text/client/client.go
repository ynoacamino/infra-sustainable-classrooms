// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text client HTTP transport
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the text service endpoint HTTP clients.
type Client struct {
	// CreateCourse Doer is the HTTP client used to make requests to the
	// CreateCourse endpoint.
	CreateCourseDoer goahttp.Doer

	// GetCourse Doer is the HTTP client used to make requests to the GetCourse
	// endpoint.
	GetCourseDoer goahttp.Doer

	// ListCourses Doer is the HTTP client used to make requests to the ListCourses
	// endpoint.
	ListCoursesDoer goahttp.Doer

	// DeleteCourse Doer is the HTTP client used to make requests to the
	// DeleteCourse endpoint.
	DeleteCourseDoer goahttp.Doer

	// UpdateCourse Doer is the HTTP client used to make requests to the
	// UpdateCourse endpoint.
	UpdateCourseDoer goahttp.Doer

	// CreateSection Doer is the HTTP client used to make requests to the
	// CreateSection endpoint.
	CreateSectionDoer goahttp.Doer

	// GetSection Doer is the HTTP client used to make requests to the GetSection
	// endpoint.
	GetSectionDoer goahttp.Doer

	// ListSections Doer is the HTTP client used to make requests to the
	// ListSections endpoint.
	ListSectionsDoer goahttp.Doer

	// UpdateSection Doer is the HTTP client used to make requests to the
	// UpdateSection endpoint.
	UpdateSectionDoer goahttp.Doer

	// DeleteSection Doer is the HTTP client used to make requests to the
	// DeleteSection endpoint.
	DeleteSectionDoer goahttp.Doer

	// CreateArticle Doer is the HTTP client used to make requests to the
	// CreateArticle endpoint.
	CreateArticleDoer goahttp.Doer

	// GetArticle Doer is the HTTP client used to make requests to the GetArticle
	// endpoint.
	GetArticleDoer goahttp.Doer

	// ListArticles Doer is the HTTP client used to make requests to the
	// ListArticles endpoint.
	ListArticlesDoer goahttp.Doer

	// UpdateArticle Doer is the HTTP client used to make requests to the
	// UpdateArticle endpoint.
	UpdateArticleDoer goahttp.Doer

	// DeleteArticle Doer is the HTTP client used to make requests to the
	// DeleteArticle endpoint.
	DeleteArticleDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the text service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateCourseDoer:    doer,
		GetCourseDoer:       doer,
		ListCoursesDoer:     doer,
		DeleteCourseDoer:    doer,
		UpdateCourseDoer:    doer,
		CreateSectionDoer:   doer,
		GetSectionDoer:      doer,
		ListSectionsDoer:    doer,
		UpdateSectionDoer:   doer,
		DeleteSectionDoer:   doer,
		CreateArticleDoer:   doer,
		GetArticleDoer:      doer,
		ListArticlesDoer:    doer,
		UpdateArticleDoer:   doer,
		DeleteArticleDoer:   doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateCourse returns an endpoint that makes HTTP requests to the text
// service CreateCourse server.
func (c *Client) CreateCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCourseRequest(c.encoder)
		decodeResponse = DecodeCreateCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "CreateCourse", err)
		}
		return decodeResponse(resp)
	}
}

// GetCourse returns an endpoint that makes HTTP requests to the text service
// GetCourse server.
func (c *Client) GetCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCourseRequest(c.encoder)
		decodeResponse = DecodeGetCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "GetCourse", err)
		}
		return decodeResponse(resp)
	}
}

// ListCourses returns an endpoint that makes HTTP requests to the text service
// ListCourses server.
func (c *Client) ListCourses() goa.Endpoint {
	var (
		encodeRequest  = EncodeListCoursesRequest(c.encoder)
		decodeResponse = DecodeListCoursesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListCoursesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListCoursesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "ListCourses", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCourse returns an endpoint that makes HTTP requests to the text
// service DeleteCourse server.
func (c *Client) DeleteCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteCourseRequest(c.encoder)
		decodeResponse = DecodeDeleteCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "DeleteCourse", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCourse returns an endpoint that makes HTTP requests to the text
// service UpdateCourse server.
func (c *Client) UpdateCourse() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCourseRequest(c.encoder)
		decodeResponse = DecodeUpdateCourseResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateCourseRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCourseDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "UpdateCourse", err)
		}
		return decodeResponse(resp)
	}
}

// CreateSection returns an endpoint that makes HTTP requests to the text
// service CreateSection server.
func (c *Client) CreateSection() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateSectionRequest(c.encoder)
		decodeResponse = DecodeCreateSectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateSectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateSectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "CreateSection", err)
		}
		return decodeResponse(resp)
	}
}

// GetSection returns an endpoint that makes HTTP requests to the text service
// GetSection server.
func (c *Client) GetSection() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetSectionRequest(c.encoder)
		decodeResponse = DecodeGetSectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetSectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "GetSection", err)
		}
		return decodeResponse(resp)
	}
}

// ListSections returns an endpoint that makes HTTP requests to the text
// service ListSections server.
func (c *Client) ListSections() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSectionsRequest(c.encoder)
		decodeResponse = DecodeListSectionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListSectionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSectionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "ListSections", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateSection returns an endpoint that makes HTTP requests to the text
// service UpdateSection server.
func (c *Client) UpdateSection() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateSectionRequest(c.encoder)
		decodeResponse = DecodeUpdateSectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateSectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateSectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "UpdateSection", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteSection returns an endpoint that makes HTTP requests to the text
// service DeleteSection server.
func (c *Client) DeleteSection() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteSectionRequest(c.encoder)
		decodeResponse = DecodeDeleteSectionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteSectionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteSectionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "DeleteSection", err)
		}
		return decodeResponse(resp)
	}
}

// CreateArticle returns an endpoint that makes HTTP requests to the text
// service CreateArticle server.
func (c *Client) CreateArticle() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateArticleRequest(c.encoder)
		decodeResponse = DecodeCreateArticleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateArticleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateArticleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "CreateArticle", err)
		}
		return decodeResponse(resp)
	}
}

// GetArticle returns an endpoint that makes HTTP requests to the text service
// GetArticle server.
func (c *Client) GetArticle() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetArticleRequest(c.encoder)
		decodeResponse = DecodeGetArticleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetArticleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetArticleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "GetArticle", err)
		}
		return decodeResponse(resp)
	}
}

// ListArticles returns an endpoint that makes HTTP requests to the text
// service ListArticles server.
func (c *Client) ListArticles() goa.Endpoint {
	var (
		encodeRequest  = EncodeListArticlesRequest(c.encoder)
		decodeResponse = DecodeListArticlesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListArticlesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListArticlesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "ListArticles", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateArticle returns an endpoint that makes HTTP requests to the text
// service UpdateArticle server.
func (c *Client) UpdateArticle() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateArticleRequest(c.encoder)
		decodeResponse = DecodeUpdateArticleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateArticleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateArticleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "UpdateArticle", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteArticle returns an endpoint that makes HTTP requests to the text
// service DeleteArticle server.
func (c *Client) DeleteArticle() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteArticleRequest(c.encoder)
		decodeResponse = DecodeDeleteArticleResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteArticleRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteArticleDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("text", "DeleteArticle", err)
		}
		return decodeResponse(resp)
	}
}
