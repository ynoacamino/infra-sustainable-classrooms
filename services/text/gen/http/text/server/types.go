// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text HTTP server types
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package server

import (
	"unicode/utf8"

	text "github.com/ynoacamino/infra-sustainable-classrooms/services/text/gen/text"
	goa "goa.design/goa/v3/pkg"
)

// CreateCourseRequestBody is the type of the "text" service "CreateCourse"
// endpoint HTTP request body.
type CreateCourseRequestBody struct {
	// Course title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Course description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Course image URL
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

// UpdateCourseRequestBody is the type of the "text" service "UpdateCourse"
// endpoint HTTP request body.
type UpdateCourseRequestBody struct {
	// Course title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Course description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Course image URL
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

// CreateSectionRequestBody is the type of the "text" service "CreateSection"
// endpoint HTTP request body.
type CreateSectionRequestBody struct {
	// Section title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Section description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Order of the section in the course (optional, if not set it will be
	// auto-numbered)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// UpdateSectionRequestBody is the type of the "text" service "UpdateSection"
// endpoint HTTP request body.
type UpdateSectionRequestBody struct {
	// Section title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Section description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Order of the section in the course (optional, if set will update the order)
	Order *int64 `form:"order,omitempty" json:"order,omitempty" xml:"order,omitempty"`
}

// CreateArticleRequestBody is the type of the "text" service "CreateArticle"
// endpoint HTTP request body.
type CreateArticleRequestBody struct {
	// Article title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Article content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// UpdateArticleRequestBody is the type of the "text" service "UpdateArticle"
// endpoint HTTP request body.
type UpdateArticleRequestBody struct {
	// Article title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Article content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// CreateCourseResponseBody is the type of the "text" service "CreateCourse"
// endpoint HTTP response body.
type CreateCourseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetCourseResponseBody is the type of the "text" service "GetCourse" endpoint
// HTTP response body.
type GetCourseResponseBody struct {
	// Unique identifier for the course
	ID int64 `form:"id" json:"id" xml:"id"`
	// Title of the course
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the course
	Description string `form:"description" json:"description" xml:"description"`
	// URL of the course image
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	// Timestamp when the course was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the course was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListCoursesResponseBody is the type of the "text" service "ListCourses"
// endpoint HTTP response body.
type ListCoursesResponseBody []*CourseResponse

// DeleteCourseResponseBody is the type of the "text" service "DeleteCourse"
// endpoint HTTP response body.
type DeleteCourseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateCourseResponseBody is the type of the "text" service "UpdateCourse"
// endpoint HTTP response body.
type UpdateCourseResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateSectionResponseBody is the type of the "text" service "CreateSection"
// endpoint HTTP response body.
type CreateSectionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetSectionResponseBody is the type of the "text" service "GetSection"
// endpoint HTTP response body.
type GetSectionResponseBody struct {
	// Unique identifier for the section
	ID int64 `form:"id" json:"id" xml:"id"`
	// ID of the parent course
	CourseID int64 `form:"course_id" json:"course_id" xml:"course_id"`
	// Title of the section
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the section
	Description string `form:"description" json:"description" xml:"description"`
	// Order of the section in the course (autonumbered for frontend rendering)
	Order int64 `form:"order" json:"order" xml:"order"`
	// Timestamp when the section was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the section was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListSectionsResponseBody is the type of the "text" service "ListSections"
// endpoint HTTP response body.
type ListSectionsResponseBody []*SectionResponse

// UpdateSectionResponseBody is the type of the "text" service "UpdateSection"
// endpoint HTTP response body.
type UpdateSectionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteSectionResponseBody is the type of the "text" service "DeleteSection"
// endpoint HTTP response body.
type DeleteSectionResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateArticleResponseBody is the type of the "text" service "CreateArticle"
// endpoint HTTP response body.
type CreateArticleResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// GetArticleResponseBody is the type of the "text" service "GetArticle"
// endpoint HTTP response body.
type GetArticleResponseBody struct {
	// Unique identifier for the article
	ID int64 `form:"id" json:"id" xml:"id"`
	// ID of the parent section
	SectionID int64 `form:"section_id" json:"section_id" xml:"section_id"`
	// Title of the article
	Title string `form:"title" json:"title" xml:"title"`
	// Content of the article
	Content string `form:"content" json:"content" xml:"content"`
	// Timestamp when the article was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the article was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListArticlesResponseBody is the type of the "text" service "ListArticles"
// endpoint HTTP response body.
type ListArticlesResponseBody []*ArticleResponse

// UpdateArticleResponseBody is the type of the "text" service "UpdateArticle"
// endpoint HTTP response body.
type UpdateArticleResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteArticleResponseBody is the type of the "text" service "DeleteArticle"
// endpoint HTTP response body.
type DeleteArticleResponseBody struct {
	// Operation success status
	Success bool `form:"success" json:"success" xml:"success"`
	// Response message
	Message string `form:"message" json:"message" xml:"message"`
}

// CourseResponse is used to define fields on response body types.
type CourseResponse struct {
	// Unique identifier for the course
	ID int64 `form:"id" json:"id" xml:"id"`
	// Title of the course
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the course
	Description string `form:"description" json:"description" xml:"description"`
	// URL of the course image
	ImageURL *string `form:"imageUrl,omitempty" json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
	// Timestamp when the course was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the course was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// SectionResponse is used to define fields on response body types.
type SectionResponse struct {
	// Unique identifier for the section
	ID int64 `form:"id" json:"id" xml:"id"`
	// ID of the parent course
	CourseID int64 `form:"course_id" json:"course_id" xml:"course_id"`
	// Title of the section
	Title string `form:"title" json:"title" xml:"title"`
	// Description of the section
	Description string `form:"description" json:"description" xml:"description"`
	// Order of the section in the course (autonumbered for frontend rendering)
	Order int64 `form:"order" json:"order" xml:"order"`
	// Timestamp when the section was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the section was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ArticleResponse is used to define fields on response body types.
type ArticleResponse struct {
	// Unique identifier for the article
	ID int64 `form:"id" json:"id" xml:"id"`
	// ID of the parent section
	SectionID int64 `form:"section_id" json:"section_id" xml:"section_id"`
	// Title of the article
	Title string `form:"title" json:"title" xml:"title"`
	// Content of the article
	Content string `form:"content" json:"content" xml:"content"`
	// Timestamp when the article was created (milliseconds since epoch)
	CreatedAt int64 `form:"created_at" json:"created_at" xml:"created_at"`
	// Timestamp when the article was last updated (milliseconds since epoch)
	UpdatedAt int64 `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateCourseResponseBody builds the HTTP response body from the result of
// the "CreateCourse" endpoint of the "text" service.
func NewCreateCourseResponseBody(res *text.SimpleResponse) *CreateCourseResponseBody {
	body := &CreateCourseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetCourseResponseBody builds the HTTP response body from the result of
// the "GetCourse" endpoint of the "text" service.
func NewGetCourseResponseBody(res *text.Course) *GetCourseResponseBody {
	body := &GetCourseResponseBody{
		ID:          res.ID,
		Title:       res.Title,
		Description: res.Description,
		ImageURL:    res.ImageURL,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewListCoursesResponseBody builds the HTTP response body from the result of
// the "ListCourses" endpoint of the "text" service.
func NewListCoursesResponseBody(res []*text.Course) ListCoursesResponseBody {
	body := make([]*CourseResponse, len(res))
	for i, val := range res {
		body[i] = marshalTextCourseToCourseResponse(val)
	}
	return body
}

// NewDeleteCourseResponseBody builds the HTTP response body from the result of
// the "DeleteCourse" endpoint of the "text" service.
func NewDeleteCourseResponseBody(res *text.SimpleResponse) *DeleteCourseResponseBody {
	body := &DeleteCourseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewUpdateCourseResponseBody builds the HTTP response body from the result of
// the "UpdateCourse" endpoint of the "text" service.
func NewUpdateCourseResponseBody(res *text.SimpleResponse) *UpdateCourseResponseBody {
	body := &UpdateCourseResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewCreateSectionResponseBody builds the HTTP response body from the result
// of the "CreateSection" endpoint of the "text" service.
func NewCreateSectionResponseBody(res *text.SimpleResponse) *CreateSectionResponseBody {
	body := &CreateSectionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetSectionResponseBody builds the HTTP response body from the result of
// the "GetSection" endpoint of the "text" service.
func NewGetSectionResponseBody(res *text.Section) *GetSectionResponseBody {
	body := &GetSectionResponseBody{
		ID:          res.ID,
		CourseID:    res.CourseID,
		Title:       res.Title,
		Description: res.Description,
		Order:       res.Order,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewListSectionsResponseBody builds the HTTP response body from the result of
// the "ListSections" endpoint of the "text" service.
func NewListSectionsResponseBody(res []*text.Section) ListSectionsResponseBody {
	body := make([]*SectionResponse, len(res))
	for i, val := range res {
		body[i] = marshalTextSectionToSectionResponse(val)
	}
	return body
}

// NewUpdateSectionResponseBody builds the HTTP response body from the result
// of the "UpdateSection" endpoint of the "text" service.
func NewUpdateSectionResponseBody(res *text.SimpleResponse) *UpdateSectionResponseBody {
	body := &UpdateSectionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteSectionResponseBody builds the HTTP response body from the result
// of the "DeleteSection" endpoint of the "text" service.
func NewDeleteSectionResponseBody(res *text.SimpleResponse) *DeleteSectionResponseBody {
	body := &DeleteSectionResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewCreateArticleResponseBody builds the HTTP response body from the result
// of the "CreateArticle" endpoint of the "text" service.
func NewCreateArticleResponseBody(res *text.SimpleResponse) *CreateArticleResponseBody {
	body := &CreateArticleResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewGetArticleResponseBody builds the HTTP response body from the result of
// the "GetArticle" endpoint of the "text" service.
func NewGetArticleResponseBody(res *text.Article) *GetArticleResponseBody {
	body := &GetArticleResponseBody{
		ID:        res.ID,
		SectionID: res.SectionID,
		Title:     res.Title,
		Content:   res.Content,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}
	return body
}

// NewListArticlesResponseBody builds the HTTP response body from the result of
// the "ListArticles" endpoint of the "text" service.
func NewListArticlesResponseBody(res []*text.Article) ListArticlesResponseBody {
	body := make([]*ArticleResponse, len(res))
	for i, val := range res {
		body[i] = marshalTextArticleToArticleResponse(val)
	}
	return body
}

// NewUpdateArticleResponseBody builds the HTTP response body from the result
// of the "UpdateArticle" endpoint of the "text" service.
func NewUpdateArticleResponseBody(res *text.SimpleResponse) *UpdateArticleResponseBody {
	body := &UpdateArticleResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewDeleteArticleResponseBody builds the HTTP response body from the result
// of the "DeleteArticle" endpoint of the "text" service.
func NewDeleteArticleResponseBody(res *text.SimpleResponse) *DeleteArticleResponseBody {
	body := &DeleteArticleResponseBody{
		Success: res.Success,
		Message: res.Message,
	}
	return body
}

// NewCreateCoursePayload builds a text service CreateCourse endpoint payload.
func NewCreateCoursePayload(body *CreateCourseRequestBody, sessionToken string) *text.CreateCoursePayload {
	v := &text.CreateCoursePayload{
		Title:       *body.Title,
		Description: *body.Description,
		ImageURL:    body.ImageURL,
	}
	v.SessionToken = sessionToken

	return v
}

// NewGetCoursePayload builds a text service GetCourse endpoint payload.
func NewGetCoursePayload(courseID int64, sessionToken string) *text.GetCoursePayload {
	v := &text.GetCoursePayload{}
	v.CourseID = courseID
	v.SessionToken = sessionToken

	return v
}

// NewListCoursesPayload builds a text service ListCourses endpoint payload.
func NewListCoursesPayload(sessionToken string) *text.ListCoursesPayload {
	v := &text.ListCoursesPayload{}
	v.SessionToken = sessionToken

	return v
}

// NewDeleteCoursePayload builds a text service DeleteCourse endpoint payload.
func NewDeleteCoursePayload(courseID int64, sessionToken string) *text.DeleteCoursePayload {
	v := &text.DeleteCoursePayload{}
	v.CourseID = courseID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateCoursePayload builds a text service UpdateCourse endpoint payload.
func NewUpdateCoursePayload(body *UpdateCourseRequestBody, courseID int64, sessionToken string) *text.UpdateCoursePayload {
	v := &text.UpdateCoursePayload{
		Title:       body.Title,
		Description: body.Description,
		ImageURL:    body.ImageURL,
	}
	v.CourseID = courseID
	v.SessionToken = sessionToken

	return v
}

// NewCreateSectionPayload builds a text service CreateSection endpoint payload.
func NewCreateSectionPayload(body *CreateSectionRequestBody, courseID int64, sessionToken string) *text.CreateSectionPayload {
	v := &text.CreateSectionPayload{
		Title:       *body.Title,
		Description: *body.Description,
		Order:       body.Order,
	}
	v.CourseID = courseID
	v.SessionToken = sessionToken

	return v
}

// NewGetSectionPayload builds a text service GetSection endpoint payload.
func NewGetSectionPayload(sectionID int64, sessionToken string) *text.GetSectionPayload {
	v := &text.GetSectionPayload{}
	v.SectionID = sectionID
	v.SessionToken = sessionToken

	return v
}

// NewListSectionsPayload builds a text service ListSections endpoint payload.
func NewListSectionsPayload(courseID int64, sessionToken string) *text.ListSectionsPayload {
	v := &text.ListSectionsPayload{}
	v.CourseID = courseID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateSectionPayload builds a text service UpdateSection endpoint payload.
func NewUpdateSectionPayload(body *UpdateSectionRequestBody, sectionID int64, sessionToken string) *text.UpdateSectionPayload {
	v := &text.UpdateSectionPayload{
		Title:       body.Title,
		Description: body.Description,
		Order:       body.Order,
	}
	v.SectionID = sectionID
	v.SessionToken = sessionToken

	return v
}

// NewDeleteSectionPayload builds a text service DeleteSection endpoint payload.
func NewDeleteSectionPayload(sectionID int64, sessionToken string) *text.DeleteSectionPayload {
	v := &text.DeleteSectionPayload{}
	v.SectionID = sectionID
	v.SessionToken = sessionToken

	return v
}

// NewCreateArticlePayload builds a text service CreateArticle endpoint payload.
func NewCreateArticlePayload(body *CreateArticleRequestBody, sectionID int64, sessionToken string) *text.CreateArticlePayload {
	v := &text.CreateArticlePayload{
		Title:   *body.Title,
		Content: *body.Content,
	}
	v.SectionID = sectionID
	v.SessionToken = sessionToken

	return v
}

// NewGetArticlePayload builds a text service GetArticle endpoint payload.
func NewGetArticlePayload(articleID int64, sessionToken string) *text.GetArticlePayload {
	v := &text.GetArticlePayload{}
	v.ArticleID = articleID
	v.SessionToken = sessionToken

	return v
}

// NewListArticlesPayload builds a text service ListArticles endpoint payload.
func NewListArticlesPayload(sectionID int64, sessionToken string) *text.ListArticlesPayload {
	v := &text.ListArticlesPayload{}
	v.SectionID = sectionID
	v.SessionToken = sessionToken

	return v
}

// NewUpdateArticlePayload builds a text service UpdateArticle endpoint payload.
func NewUpdateArticlePayload(body *UpdateArticleRequestBody, articleID int64, sessionToken string) *text.UpdateArticlePayload {
	v := &text.UpdateArticlePayload{
		Title:   body.Title,
		Content: body.Content,
	}
	v.ArticleID = articleID
	v.SessionToken = sessionToken

	return v
}

// NewDeleteArticlePayload builds a text service DeleteArticle endpoint payload.
func NewDeleteArticlePayload(articleID int64, sessionToken string) *text.DeleteArticlePayload {
	v := &text.DeleteArticlePayload{}
	v.ArticleID = articleID
	v.SessionToken = sessionToken

	return v
}

// ValidateCreateCourseRequestBody runs the validations defined on
// CreateCourseRequestBody
func ValidateCreateCourseRequestBody(body *CreateCourseRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 10, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 300, false))
		}
	}
	if body.ImageURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.imageUrl", *body.ImageURL, goa.FormatURI))
	}
	if body.ImageURL != nil {
		if utf8.RuneCountInString(*body.ImageURL) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.imageUrl", *body.ImageURL, utf8.RuneCountInString(*body.ImageURL), 5, true))
		}
	}
	if body.ImageURL != nil {
		if utf8.RuneCountInString(*body.ImageURL) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.imageUrl", *body.ImageURL, utf8.RuneCountInString(*body.ImageURL), 500, false))
		}
	}
	return
}

// ValidateUpdateCourseRequestBody runs the validations defined on
// UpdateCourseRequestBody
func ValidateUpdateCourseRequestBody(body *UpdateCourseRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 150 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 150, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 10, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 300 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 300, false))
		}
	}
	if body.ImageURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.imageUrl", *body.ImageURL, goa.FormatURI))
	}
	if body.ImageURL != nil {
		if utf8.RuneCountInString(*body.ImageURL) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.imageUrl", *body.ImageURL, utf8.RuneCountInString(*body.ImageURL), 5, true))
		}
	}
	if body.ImageURL != nil {
		if utf8.RuneCountInString(*body.ImageURL) > 500 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.imageUrl", *body.ImageURL, utf8.RuneCountInString(*body.ImageURL), 500, false))
		}
	}
	return
}

// ValidateCreateSectionRequestBody runs the validations defined on
// CreateSectionRequestBody
func ValidateCreateSectionRequestBody(body *CreateSectionRequestBody) (err error) {
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 5, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 200, false))
		}
	}
	if body.Order != nil {
		if *body.Order < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.order", *body.Order, 1, true))
		}
	}
	return
}

// ValidateUpdateSectionRequestBody runs the validations defined on
// UpdateSectionRequestBody
func ValidateUpdateSectionRequestBody(body *UpdateSectionRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 5 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 5, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) > 200 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 200, false))
		}
	}
	if body.Order != nil {
		if *body.Order < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.order", *body.Order, 1, true))
		}
	}
	return
}

// ValidateCreateArticleRequestBody runs the validations defined on
// CreateArticleRequestBody
func ValidateCreateArticleRequestBody(body *CreateArticleRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 10, true))
		}
	}
	return
}

// ValidateUpdateArticleRequestBody runs the validations defined on
// UpdateArticleRequestBody
func ValidateUpdateArticleRequestBody(body *UpdateArticleRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 100, false))
		}
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 10, true))
		}
	}
	return
}
