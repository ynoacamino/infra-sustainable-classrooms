// Code generated by goa v3.21.1, DO NOT EDIT.
//
// text-http HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/ynoacamino/infra-sustainable-classrooms/services/text/design/api
// -o ./services/text/

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	textc "github.com/ynoacamino/infra-sustainable-classrooms/services/text/gen/http/text/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `text (create-course|get-course|list-courses|delete-course|update-course|create-section|get-section|list-sections|update-section|delete-section|create-article|get-article|list-articles|update-article|delete-article)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` text create-course --body '{
      "description": "Learn the basics of Go programming language.",
      "imageUrl": "https://example.com/course-image.jpg",
      "title": "Introduction to Go"
   }' --session-token "Similique repellat qui ut voluptatum culpa soluta."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		textFlags = flag.NewFlagSet("text", flag.ContinueOnError)

		textCreateCourseFlags            = flag.NewFlagSet("create-course", flag.ExitOnError)
		textCreateCourseBodyFlag         = textCreateCourseFlags.String("body", "REQUIRED", "")
		textCreateCourseSessionTokenFlag = textCreateCourseFlags.String("session-token", "REQUIRED", "")

		textGetCourseFlags            = flag.NewFlagSet("get-course", flag.ExitOnError)
		textGetCourseCourseIDFlag     = textGetCourseFlags.String("course-id", "REQUIRED", "Course unique identifier")
		textGetCourseSessionTokenFlag = textGetCourseFlags.String("session-token", "REQUIRED", "")

		textListCoursesFlags            = flag.NewFlagSet("list-courses", flag.ExitOnError)
		textListCoursesSessionTokenFlag = textListCoursesFlags.String("session-token", "REQUIRED", "")

		textDeleteCourseFlags            = flag.NewFlagSet("delete-course", flag.ExitOnError)
		textDeleteCourseCourseIDFlag     = textDeleteCourseFlags.String("course-id", "REQUIRED", "Course unique identifier")
		textDeleteCourseSessionTokenFlag = textDeleteCourseFlags.String("session-token", "REQUIRED", "")

		textUpdateCourseFlags            = flag.NewFlagSet("update-course", flag.ExitOnError)
		textUpdateCourseBodyFlag         = textUpdateCourseFlags.String("body", "REQUIRED", "")
		textUpdateCourseCourseIDFlag     = textUpdateCourseFlags.String("course-id", "REQUIRED", "Course unique identifier")
		textUpdateCourseSessionTokenFlag = textUpdateCourseFlags.String("session-token", "REQUIRED", "")

		textCreateSectionFlags            = flag.NewFlagSet("create-section", flag.ExitOnError)
		textCreateSectionBodyFlag         = textCreateSectionFlags.String("body", "REQUIRED", "")
		textCreateSectionCourseIDFlag     = textCreateSectionFlags.String("course-id", "REQUIRED", "Course unique identifier")
		textCreateSectionSessionTokenFlag = textCreateSectionFlags.String("session-token", "REQUIRED", "")

		textGetSectionFlags            = flag.NewFlagSet("get-section", flag.ExitOnError)
		textGetSectionSectionIDFlag    = textGetSectionFlags.String("section-id", "REQUIRED", "Section unique identifier")
		textGetSectionSessionTokenFlag = textGetSectionFlags.String("session-token", "REQUIRED", "")

		textListSectionsFlags            = flag.NewFlagSet("list-sections", flag.ExitOnError)
		textListSectionsCourseIDFlag     = textListSectionsFlags.String("course-id", "REQUIRED", "Course unique identifier")
		textListSectionsSessionTokenFlag = textListSectionsFlags.String("session-token", "REQUIRED", "")

		textUpdateSectionFlags            = flag.NewFlagSet("update-section", flag.ExitOnError)
		textUpdateSectionBodyFlag         = textUpdateSectionFlags.String("body", "REQUIRED", "")
		textUpdateSectionSectionIDFlag    = textUpdateSectionFlags.String("section-id", "REQUIRED", "Section unique identifier")
		textUpdateSectionSessionTokenFlag = textUpdateSectionFlags.String("session-token", "REQUIRED", "")

		textDeleteSectionFlags            = flag.NewFlagSet("delete-section", flag.ExitOnError)
		textDeleteSectionSectionIDFlag    = textDeleteSectionFlags.String("section-id", "REQUIRED", "Section unique identifier")
		textDeleteSectionSessionTokenFlag = textDeleteSectionFlags.String("session-token", "REQUIRED", "")

		textCreateArticleFlags            = flag.NewFlagSet("create-article", flag.ExitOnError)
		textCreateArticleBodyFlag         = textCreateArticleFlags.String("body", "REQUIRED", "")
		textCreateArticleSectionIDFlag    = textCreateArticleFlags.String("section-id", "REQUIRED", "Section unique identifier")
		textCreateArticleSessionTokenFlag = textCreateArticleFlags.String("session-token", "REQUIRED", "")

		textGetArticleFlags            = flag.NewFlagSet("get-article", flag.ExitOnError)
		textGetArticleArticleIDFlag    = textGetArticleFlags.String("article-id", "REQUIRED", "Article unique identifier")
		textGetArticleSessionTokenFlag = textGetArticleFlags.String("session-token", "REQUIRED", "")

		textListArticlesFlags            = flag.NewFlagSet("list-articles", flag.ExitOnError)
		textListArticlesSectionIDFlag    = textListArticlesFlags.String("section-id", "REQUIRED", "Section unique identifier")
		textListArticlesSessionTokenFlag = textListArticlesFlags.String("session-token", "REQUIRED", "")

		textUpdateArticleFlags            = flag.NewFlagSet("update-article", flag.ExitOnError)
		textUpdateArticleBodyFlag         = textUpdateArticleFlags.String("body", "REQUIRED", "")
		textUpdateArticleArticleIDFlag    = textUpdateArticleFlags.String("article-id", "REQUIRED", "Article unique identifier")
		textUpdateArticleSessionTokenFlag = textUpdateArticleFlags.String("session-token", "REQUIRED", "")

		textDeleteArticleFlags            = flag.NewFlagSet("delete-article", flag.ExitOnError)
		textDeleteArticleArticleIDFlag    = textDeleteArticleFlags.String("article-id", "REQUIRED", "Article unique identifier")
		textDeleteArticleSessionTokenFlag = textDeleteArticleFlags.String("session-token", "REQUIRED", "")
	)
	textFlags.Usage = textUsage
	textCreateCourseFlags.Usage = textCreateCourseUsage
	textGetCourseFlags.Usage = textGetCourseUsage
	textListCoursesFlags.Usage = textListCoursesUsage
	textDeleteCourseFlags.Usage = textDeleteCourseUsage
	textUpdateCourseFlags.Usage = textUpdateCourseUsage
	textCreateSectionFlags.Usage = textCreateSectionUsage
	textGetSectionFlags.Usage = textGetSectionUsage
	textListSectionsFlags.Usage = textListSectionsUsage
	textUpdateSectionFlags.Usage = textUpdateSectionUsage
	textDeleteSectionFlags.Usage = textDeleteSectionUsage
	textCreateArticleFlags.Usage = textCreateArticleUsage
	textGetArticleFlags.Usage = textGetArticleUsage
	textListArticlesFlags.Usage = textListArticlesUsage
	textUpdateArticleFlags.Usage = textUpdateArticleUsage
	textDeleteArticleFlags.Usage = textDeleteArticleUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "text":
			svcf = textFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "text":
			switch epn {
			case "create-course":
				epf = textCreateCourseFlags

			case "get-course":
				epf = textGetCourseFlags

			case "list-courses":
				epf = textListCoursesFlags

			case "delete-course":
				epf = textDeleteCourseFlags

			case "update-course":
				epf = textUpdateCourseFlags

			case "create-section":
				epf = textCreateSectionFlags

			case "get-section":
				epf = textGetSectionFlags

			case "list-sections":
				epf = textListSectionsFlags

			case "update-section":
				epf = textUpdateSectionFlags

			case "delete-section":
				epf = textDeleteSectionFlags

			case "create-article":
				epf = textCreateArticleFlags

			case "get-article":
				epf = textGetArticleFlags

			case "list-articles":
				epf = textListArticlesFlags

			case "update-article":
				epf = textUpdateArticleFlags

			case "delete-article":
				epf = textDeleteArticleFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "text":
			c := textc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-course":
				endpoint = c.CreateCourse()
				data, err = textc.BuildCreateCoursePayload(*textCreateCourseBodyFlag, *textCreateCourseSessionTokenFlag)
			case "get-course":
				endpoint = c.GetCourse()
				data, err = textc.BuildGetCoursePayload(*textGetCourseCourseIDFlag, *textGetCourseSessionTokenFlag)
			case "list-courses":
				endpoint = c.ListCourses()
				data, err = textc.BuildListCoursesPayload(*textListCoursesSessionTokenFlag)
			case "delete-course":
				endpoint = c.DeleteCourse()
				data, err = textc.BuildDeleteCoursePayload(*textDeleteCourseCourseIDFlag, *textDeleteCourseSessionTokenFlag)
			case "update-course":
				endpoint = c.UpdateCourse()
				data, err = textc.BuildUpdateCoursePayload(*textUpdateCourseBodyFlag, *textUpdateCourseCourseIDFlag, *textUpdateCourseSessionTokenFlag)
			case "create-section":
				endpoint = c.CreateSection()
				data, err = textc.BuildCreateSectionPayload(*textCreateSectionBodyFlag, *textCreateSectionCourseIDFlag, *textCreateSectionSessionTokenFlag)
			case "get-section":
				endpoint = c.GetSection()
				data, err = textc.BuildGetSectionPayload(*textGetSectionSectionIDFlag, *textGetSectionSessionTokenFlag)
			case "list-sections":
				endpoint = c.ListSections()
				data, err = textc.BuildListSectionsPayload(*textListSectionsCourseIDFlag, *textListSectionsSessionTokenFlag)
			case "update-section":
				endpoint = c.UpdateSection()
				data, err = textc.BuildUpdateSectionPayload(*textUpdateSectionBodyFlag, *textUpdateSectionSectionIDFlag, *textUpdateSectionSessionTokenFlag)
			case "delete-section":
				endpoint = c.DeleteSection()
				data, err = textc.BuildDeleteSectionPayload(*textDeleteSectionSectionIDFlag, *textDeleteSectionSessionTokenFlag)
			case "create-article":
				endpoint = c.CreateArticle()
				data, err = textc.BuildCreateArticlePayload(*textCreateArticleBodyFlag, *textCreateArticleSectionIDFlag, *textCreateArticleSessionTokenFlag)
			case "get-article":
				endpoint = c.GetArticle()
				data, err = textc.BuildGetArticlePayload(*textGetArticleArticleIDFlag, *textGetArticleSessionTokenFlag)
			case "list-articles":
				endpoint = c.ListArticles()
				data, err = textc.BuildListArticlesPayload(*textListArticlesSectionIDFlag, *textListArticlesSessionTokenFlag)
			case "update-article":
				endpoint = c.UpdateArticle()
				data, err = textc.BuildUpdateArticlePayload(*textUpdateArticleBodyFlag, *textUpdateArticleArticleIDFlag, *textUpdateArticleSessionTokenFlag)
			case "delete-article":
				endpoint = c.DeleteArticle()
				data, err = textc.BuildDeleteArticlePayload(*textDeleteArticleArticleIDFlag, *textDeleteArticleSessionTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// textUsage displays the usage of the text command and its subcommands.
func textUsage() {
	fmt.Fprintf(os.Stderr, `Course management service for text-based learning, with sections and articles. Only teachers can create, update, or delete content. All endpoints require session_token via cookie.
Usage:
    %[1]s [globalflags] text COMMAND [flags]

COMMAND:
    create-course: Create a new text-based course (teachers only)
    get-course: Retrieve course details by ID
    list-courses: List all available courses
    delete-course: Delete a course by ID (teachers only)
    update-course: Update course details by ID (teachers only)
    create-section: Create a new section in a course (teachers only)
    get-section: Get section details by ID
    list-sections: List all sections for a course
    update-section: Update section details (teachers only)
    delete-section: Delete a section (teachers only)
    create-article: Create a new article in a section (teachers only)
    get-article: Get article details by ID
    list-articles: List all articles for a section
    update-article: Update article details (teachers only)
    delete-article: Delete an article (teachers only)

Additional help:
    %[1]s text COMMAND --help
`, os.Args[0])
}
func textCreateCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text create-course -body JSON -session-token STRING

Create a new text-based course (teachers only)
    -body JSON: 
    -session-token STRING: 

Example:
    %[1]s text create-course --body '{
      "description": "Learn the basics of Go programming language.",
      "imageUrl": "https://example.com/course-image.jpg",
      "title": "Introduction to Go"
   }' --session-token "Similique repellat qui ut voluptatum culpa soluta."
`, os.Args[0])
}

func textGetCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text get-course -course-id INT64 -session-token STRING

Retrieve course details by ID
    -course-id INT64: Course unique identifier
    -session-token STRING: 

Example:
    %[1]s text get-course --course-id 12345 --session-token "Architecto necessitatibus."
`, os.Args[0])
}

func textListCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text list-courses -session-token STRING

List all available courses
    -session-token STRING: 

Example:
    %[1]s text list-courses --session-token "Et aut necessitatibus ad."
`, os.Args[0])
}

func textDeleteCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text delete-course -course-id INT64 -session-token STRING

Delete a course by ID (teachers only)
    -course-id INT64: Course unique identifier
    -session-token STRING: 

Example:
    %[1]s text delete-course --course-id 12345 --session-token "Et velit aut fugit possimus."
`, os.Args[0])
}

func textUpdateCourseUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text update-course -body JSON -course-id INT64 -session-token STRING

Update course details by ID (teachers only)
    -body JSON: 
    -course-id INT64: Course unique identifier
    -session-token STRING: 

Example:
    %[1]s text update-course --body '{
      "description": "Deep dive into Go programming language features.",
      "imageUrl": "https://example.com/updated-course-image.jpg",
      "title": "Advanced Go Programming"
   }' --course-id 12345 --session-token "Rerum deserunt cupiditate in architecto."
`, os.Args[0])
}

func textCreateSectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text create-section -body JSON -course-id INT64 -session-token STRING

Create a new section in a course (teachers only)
    -body JSON: 
    -course-id INT64: Course unique identifier
    -session-token STRING: 

Example:
    %[1]s text create-section --body '{
      "description": "Introduction to the course structure.",
      "order": 1,
      "title": "Getting Started"
   }' --course-id 6585239223915333408 --session-token "Occaecati tenetur sint et adipisci nihil debitis."
`, os.Args[0])
}

func textGetSectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text get-section -section-id INT64 -session-token STRING

Get section details by ID
    -section-id INT64: Section unique identifier
    -session-token STRING: 

Example:
    %[1]s text get-section --section-id 2859334110510714751 --session-token "Maiores tempore ut nihil asperiores nam magni."
`, os.Args[0])
}

func textListSectionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text list-sections -course-id INT64 -session-token STRING

List all sections for a course
    -course-id INT64: Course unique identifier
    -session-token STRING: 

Example:
    %[1]s text list-sections --course-id 4687694673009248287 --session-token "Voluptatem omnis voluptatum ipsam quo ut earum."
`, os.Args[0])
}

func textUpdateSectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text update-section -body JSON -section-id INT64 -session-token STRING

Update section details (teachers only)
    -body JSON: 
    -section-id INT64: Section unique identifier
    -session-token STRING: 

Example:
    %[1]s text update-section --body '{
      "description": "Updated section description.",
      "order": 2,
      "title": "Updated Section Title."
   }' --section-id 6472829103151004040 --session-token "Inventore ducimus culpa tempora et."
`, os.Args[0])
}

func textDeleteSectionUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text delete-section -section-id INT64 -session-token STRING

Delete a section (teachers only)
    -section-id INT64: Section unique identifier
    -session-token STRING: 

Example:
    %[1]s text delete-section --section-id 3475644856606374114 --session-token "Debitis labore voluptates quis."
`, os.Args[0])
}

func textCreateArticleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text create-article -body JSON -section-id INT64 -session-token STRING

Create a new article in a section (teachers only)
    -body JSON: 
    -section-id INT64: Section unique identifier
    -session-token STRING: 

Example:
    %[1]s text create-article --body '{
      "content": "Go is an open source programming language...",
      "title": "What is Go?"
   }' --section-id 2213241966299428981 --session-token "At sequi omnis totam rerum consequatur consectetur."
`, os.Args[0])
}

func textGetArticleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text get-article -article-id INT64 -session-token STRING

Get article details by ID
    -article-id INT64: Article unique identifier
    -session-token STRING: 

Example:
    %[1]s text get-article --article-id 3764947998212807900 --session-token "Voluptatibus eius repellat et."
`, os.Args[0])
}

func textListArticlesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text list-articles -section-id INT64 -session-token STRING

List all articles for a section
    -section-id INT64: Section unique identifier
    -session-token STRING: 

Example:
    %[1]s text list-articles --section-id 9049715817362438839 --session-token "Ut minima ab consequuntur vero quo."
`, os.Args[0])
}

func textUpdateArticleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text update-article -body JSON -article-id INT64 -session-token STRING

Update article details (teachers only)
    -body JSON: 
    -article-id INT64: Article unique identifier
    -session-token STRING: 

Example:
    %[1]s text update-article --body '{
      "content": "Updated article content...",
      "title": "Updated Article Title"
   }' --article-id 1122778624596280723 --session-token "Fugiat sint ea est enim."
`, os.Args[0])
}

func textDeleteArticleUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] text delete-article -article-id INT64 -session-token STRING

Delete an article (teachers only)
    -article-id INT64: Article unique identifier
    -session-token STRING: 

Example:
    %[1]s text delete-article --article-id 29652877799980820 --session-token "Eos sequi."
`, os.Args[0])
}
